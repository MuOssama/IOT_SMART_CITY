
SmartCityBasket.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00004bbe  00004c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080017c  0080017c  00004d6e  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  00004d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ca  00000000  00000000  00008160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000932a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000094ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000096ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000bac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000ce3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e018  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000e4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee eb       	ldi	r30, 0xBE	; 190
     162:	fb e4       	ldi	r31, 0x4B	; 75
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	ac 37       	cpi	r26, 0x7C	; 124
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	ac e7       	ldi	r26, 0x7C	; 124
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a0 38       	cpi	r26, 0x80	; 128
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <main>
     184:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a0 e6       	ldi	r26, 0x60	; 96
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	80 e6       	ldi	r24, 0x60	; 96
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 53 23 	jmp	0x46a6	; 0x46a6 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	60 e6       	ldi	r22, 0x60	; 96
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 84 05 	call	0xb08	; 0xb08 <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <__epilogue_restores__+0x20>

00000b08 <__clzsi2>:
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	e8 16       	cp	r14, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	f8 06       	cpc	r15, r24
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	08 07       	cpc	r16, r24
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	18 07       	cpc	r17, r24
     b24:	88 f4       	brcc	.+34     	; 0xb48 <__clzsi2+0x40>
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	e8 16       	cp	r14, r24
     b2a:	f1 04       	cpc	r15, r1
     b2c:	01 05       	cpc	r16, r1
     b2e:	11 05       	cpc	r17, r1
     b30:	31 f0       	breq	.+12     	; 0xb3e <__clzsi2+0x36>
     b32:	28 f0       	brcs	.+10     	; 0xb3e <__clzsi2+0x36>
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <__clzsi2+0x64>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	12 c0       	rjmp	.+36     	; 0xb6c <__clzsi2+0x64>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	e8 16       	cp	r14, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	f8 06       	cpc	r15, r24
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 07       	cpc	r16, r24
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	18 07       	cpc	r17, r24
     b58:	28 f0       	brcs	.+10     	; 0xb64 <__clzsi2+0x5c>
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <__clzsi2+0x64>
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	20 e2       	ldi	r18, 0x20	; 32
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	28 1b       	sub	r18, r24
     b76:	39 0b       	sbc	r19, r25
     b78:	4a 0b       	sbc	r20, r26
     b7a:	5b 0b       	sbc	r21, r27
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__clzsi2+0x7e>
     b7e:	16 95       	lsr	r17
     b80:	07 95       	ror	r16
     b82:	f7 94       	ror	r15
     b84:	e7 94       	ror	r14
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__clzsi2+0x76>
     b8a:	f7 01       	movw	r30, r14
     b8c:	e8 59       	subi	r30, 0x98	; 152
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	28 1b       	sub	r18, r24
     b94:	31 09       	sbc	r19, r1
     b96:	41 09       	sbc	r20, r1
     b98:	51 09       	sbc	r21, r1
     b9a:	c9 01       	movw	r24, r18
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <__pack_f>:
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	fc 01       	movw	r30, r24
     bb2:	e4 80       	ldd	r14, Z+4	; 0x04
     bb4:	f5 80       	ldd	r15, Z+5	; 0x05
     bb6:	06 81       	ldd	r16, Z+6	; 0x06
     bb8:	17 81       	ldd	r17, Z+7	; 0x07
     bba:	d1 80       	ldd	r13, Z+1	; 0x01
     bbc:	80 81       	ld	r24, Z
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	48 f4       	brcc	.+18     	; 0xbd4 <__pack_f+0x2e>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e1       	ldi	r26, 0x10	; 16
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e8 2a       	or	r14, r24
     bcc:	f9 2a       	or	r15, r25
     bce:	0a 2b       	or	r16, r26
     bd0:	1b 2b       	or	r17, r27
     bd2:	a5 c0       	rjmp	.+330    	; 0xd1e <__pack_f+0x178>
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	09 f4       	brne	.+2      	; 0xbda <__pack_f+0x34>
     bd8:	9f c0       	rjmp	.+318    	; 0xd18 <__pack_f+0x172>
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <__pack_f+0x40>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__pack_f+0x4a>
     be6:	e1 14       	cp	r14, r1
     be8:	f1 04       	cpc	r15, r1
     bea:	01 05       	cpc	r16, r1
     bec:	11 05       	cpc	r17, r1
     bee:	19 f4       	brne	.+6      	; 0xbf6 <__pack_f+0x50>
     bf0:	e0 e0       	ldi	r30, 0x00	; 0
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	96 c0       	rjmp	.+300    	; 0xd22 <__pack_f+0x17c>
     bf6:	62 81       	ldd	r22, Z+2	; 0x02
     bf8:	73 81       	ldd	r23, Z+3	; 0x03
     bfa:	9f ef       	ldi	r25, 0xFF	; 255
     bfc:	62 38       	cpi	r22, 0x82	; 130
     bfe:	79 07       	cpc	r23, r25
     c00:	0c f0       	brlt	.+2      	; 0xc04 <__pack_f+0x5e>
     c02:	5b c0       	rjmp	.+182    	; 0xcba <__pack_f+0x114>
     c04:	22 e8       	ldi	r18, 0x82	; 130
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	26 1b       	sub	r18, r22
     c0a:	37 0b       	sbc	r19, r23
     c0c:	2a 31       	cpi	r18, 0x1A	; 26
     c0e:	31 05       	cpc	r19, r1
     c10:	2c f0       	brlt	.+10     	; 0xc1c <__pack_f+0x76>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	2a c0       	rjmp	.+84     	; 0xc70 <__pack_f+0xca>
     c1c:	b8 01       	movw	r22, r16
     c1e:	a7 01       	movw	r20, r14
     c20:	02 2e       	mov	r0, r18
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <__pack_f+0x86>
     c24:	76 95       	lsr	r23
     c26:	67 95       	ror	r22
     c28:	57 95       	ror	r21
     c2a:	47 95       	ror	r20
     c2c:	0a 94       	dec	r0
     c2e:	d2 f7       	brpl	.-12     	; 0xc24 <__pack_f+0x7e>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__pack_f+0x9c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__pack_f+0x94>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__pack_f+0xbe>
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	9a 01       	movw	r18, r20
     c66:	ab 01       	movw	r20, r22
     c68:	28 2b       	or	r18, r24
     c6a:	39 2b       	or	r19, r25
     c6c:	4a 2b       	or	r20, r26
     c6e:	5b 2b       	or	r21, r27
     c70:	da 01       	movw	r26, r20
     c72:	c9 01       	movw	r24, r18
     c74:	8f 77       	andi	r24, 0x7F	; 127
     c76:	90 70       	andi	r25, 0x00	; 0
     c78:	a0 70       	andi	r26, 0x00	; 0
     c7a:	b0 70       	andi	r27, 0x00	; 0
     c7c:	80 34       	cpi	r24, 0x40	; 64
     c7e:	91 05       	cpc	r25, r1
     c80:	a1 05       	cpc	r26, r1
     c82:	b1 05       	cpc	r27, r1
     c84:	39 f4       	brne	.+14     	; 0xc94 <__pack_f+0xee>
     c86:	27 ff       	sbrs	r18, 7
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <__pack_f+0xf6>
     c8a:	20 5c       	subi	r18, 0xC0	; 192
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	4f 4f       	sbci	r20, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <__pack_f+0xf6>
     c94:	21 5c       	subi	r18, 0xC1	; 193
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	4f 4f       	sbci	r20, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	e0 e0       	ldi	r30, 0x00	; 0
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	20 30       	cpi	r18, 0x00	; 0
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	3a 07       	cpc	r19, r26
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	4a 07       	cpc	r20, r26
     caa:	a0 e4       	ldi	r26, 0x40	; 64
     cac:	5a 07       	cpc	r21, r26
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <__pack_f+0x10e>
     cb0:	e1 e0       	ldi	r30, 0x01	; 1
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	79 01       	movw	r14, r18
     cb6:	8a 01       	movw	r16, r20
     cb8:	27 c0       	rjmp	.+78     	; 0xd08 <__pack_f+0x162>
     cba:	60 38       	cpi	r22, 0x80	; 128
     cbc:	71 05       	cpc	r23, r1
     cbe:	64 f5       	brge	.+88     	; 0xd18 <__pack_f+0x172>
     cc0:	fb 01       	movw	r30, r22
     cc2:	e1 58       	subi	r30, 0x81	; 129
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	d8 01       	movw	r26, r16
     cc8:	c7 01       	movw	r24, r14
     cca:	8f 77       	andi	r24, 0x7F	; 127
     ccc:	90 70       	andi	r25, 0x00	; 0
     cce:	a0 70       	andi	r26, 0x00	; 0
     cd0:	b0 70       	andi	r27, 0x00	; 0
     cd2:	80 34       	cpi	r24, 0x40	; 64
     cd4:	91 05       	cpc	r25, r1
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	39 f4       	brne	.+14     	; 0xcea <__pack_f+0x144>
     cdc:	e7 fe       	sbrs	r14, 7
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <__pack_f+0x154>
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__pack_f+0x14c>
     cea:	8f e3       	ldi	r24, 0x3F	; 63
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e8 0e       	add	r14, r24
     cf4:	f9 1e       	adc	r15, r25
     cf6:	0a 1f       	adc	r16, r26
     cf8:	1b 1f       	adc	r17, r27
     cfa:	17 ff       	sbrs	r17, 7
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__pack_f+0x162>
     cfe:	16 95       	lsr	r17
     d00:	07 95       	ror	r16
     d02:	f7 94       	ror	r15
     d04:	e7 94       	ror	r14
     d06:	31 96       	adiw	r30, 0x01	; 1
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	16 95       	lsr	r17
     d0c:	07 95       	ror	r16
     d0e:	f7 94       	ror	r15
     d10:	e7 94       	ror	r14
     d12:	8a 95       	dec	r24
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__pack_f+0x164>
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <__pack_f+0x17c>
     d18:	ee 24       	eor	r14, r14
     d1a:	ff 24       	eor	r15, r15
     d1c:	87 01       	movw	r16, r14
     d1e:	ef ef       	ldi	r30, 0xFF	; 255
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	6e 2f       	mov	r22, r30
     d24:	67 95       	ror	r22
     d26:	66 27       	eor	r22, r22
     d28:	67 95       	ror	r22
     d2a:	90 2f       	mov	r25, r16
     d2c:	9f 77       	andi	r25, 0x7F	; 127
     d2e:	d7 94       	ror	r13
     d30:	dd 24       	eor	r13, r13
     d32:	d7 94       	ror	r13
     d34:	8e 2f       	mov	r24, r30
     d36:	86 95       	lsr	r24
     d38:	49 2f       	mov	r20, r25
     d3a:	46 2b       	or	r20, r22
     d3c:	58 2f       	mov	r21, r24
     d3e:	5d 29       	or	r21, r13
     d40:	b7 01       	movw	r22, r14
     d42:	ca 01       	movw	r24, r20
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	08 95       	ret

00000d50 <__unpack_f>:
     d50:	fc 01       	movw	r30, r24
     d52:	db 01       	movw	r26, r22
     d54:	40 81       	ld	r20, Z
     d56:	51 81       	ldd	r21, Z+1	; 0x01
     d58:	22 81       	ldd	r18, Z+2	; 0x02
     d5a:	62 2f       	mov	r22, r18
     d5c:	6f 77       	andi	r22, 0x7F	; 127
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	22 1f       	adc	r18, r18
     d62:	22 27       	eor	r18, r18
     d64:	22 1f       	adc	r18, r18
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	89 2f       	mov	r24, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	82 2b       	or	r24, r18
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	99 1f       	adc	r25, r25
     d74:	99 27       	eor	r25, r25
     d76:	99 1f       	adc	r25, r25
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	9c 93       	st	X, r25
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	a9 f5       	brne	.+106    	; 0xdee <__unpack_f+0x9e>
     d84:	41 15       	cp	r20, r1
     d86:	51 05       	cpc	r21, r1
     d88:	61 05       	cpc	r22, r1
     d8a:	71 05       	cpc	r23, r1
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__unpack_f+0x42>
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	37 c0       	rjmp	.+110    	; 0xe00 <__unpack_f+0xb0>
     d92:	82 e8       	ldi	r24, 0x82	; 130
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	13 96       	adiw	r26, 0x03	; 3
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
     d9c:	12 97       	sbiw	r26, 0x02	; 2
     d9e:	9a 01       	movw	r18, r20
     da0:	ab 01       	movw	r20, r22
     da2:	67 e0       	ldi	r22, 0x07	; 7
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	6a 95       	dec	r22
     dae:	d1 f7       	brne	.-12     	; 0xda4 <__unpack_f+0x54>
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	8c 93       	st	X, r24
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <__unpack_f+0x80>
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	44 1f       	adc	r20, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	8d 91       	ld	r24, X+
     dc2:	9c 91       	ld	r25, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	13 96       	adiw	r26, 0x03	; 3
     dca:	9c 93       	st	X, r25
     dcc:	8e 93       	st	-X, r24
     dce:	12 97       	sbiw	r26, 0x02	; 2
     dd0:	20 30       	cpi	r18, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	38 07       	cpc	r19, r24
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	48 07       	cpc	r20, r24
     dda:	80 e4       	ldi	r24, 0x40	; 64
     ddc:	58 07       	cpc	r21, r24
     dde:	58 f3       	brcs	.-42     	; 0xdb6 <__unpack_f+0x66>
     de0:	14 96       	adiw	r26, 0x04	; 4
     de2:	2d 93       	st	X+, r18
     de4:	3d 93       	st	X+, r19
     de6:	4d 93       	st	X+, r20
     de8:	5c 93       	st	X, r21
     dea:	17 97       	sbiw	r26, 0x07	; 7
     dec:	08 95       	ret
     dee:	2f 3f       	cpi	r18, 0xFF	; 255
     df0:	31 05       	cpc	r19, r1
     df2:	79 f4       	brne	.+30     	; 0xe12 <__unpack_f+0xc2>
     df4:	41 15       	cp	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	61 05       	cpc	r22, r1
     dfa:	71 05       	cpc	r23, r1
     dfc:	19 f4       	brne	.+6      	; 0xe04 <__unpack_f+0xb4>
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	8c 93       	st	X, r24
     e02:	08 95       	ret
     e04:	64 ff       	sbrs	r22, 4
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <__unpack_f+0xbe>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	12 c0       	rjmp	.+36     	; 0xe32 <__unpack_f+0xe2>
     e0e:	1c 92       	st	X, r1
     e10:	10 c0       	rjmp	.+32     	; 0xe32 <__unpack_f+0xe2>
     e12:	2f 57       	subi	r18, 0x7F	; 127
     e14:	30 40       	sbci	r19, 0x00	; 0
     e16:	13 96       	adiw	r26, 0x03	; 3
     e18:	3c 93       	st	X, r19
     e1a:	2e 93       	st	-X, r18
     e1c:	12 97       	sbiw	r26, 0x02	; 2
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	8c 93       	st	X, r24
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	66 1f       	adc	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	8a 95       	dec	r24
     e2e:	d1 f7       	brne	.-12     	; 0xe24 <__unpack_f+0xd4>
     e30:	70 64       	ori	r23, 0x40	; 64
     e32:	14 96       	adiw	r26, 0x04	; 4
     e34:	4d 93       	st	X+, r20
     e36:	5d 93       	st	X+, r21
     e38:	6d 93       	st	X+, r22
     e3a:	7c 93       	st	X, r23
     e3c:	17 97       	sbiw	r26, 0x07	; 7
     e3e:	08 95       	ret

00000e40 <__fpcmp_parts_f>:
     e40:	1f 93       	push	r17
     e42:	dc 01       	movw	r26, r24
     e44:	fb 01       	movw	r30, r22
     e46:	9c 91       	ld	r25, X
     e48:	92 30       	cpi	r25, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0xe>
     e4c:	47 c0       	rjmp	.+142    	; 0xedc <__fpcmp_parts_f+0x9c>
     e4e:	80 81       	ld	r24, Z
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	08 f4       	brcc	.+2      	; 0xe56 <__fpcmp_parts_f+0x16>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <__fpcmp_parts_f+0x9c>
     e56:	94 30       	cpi	r25, 0x04	; 4
     e58:	51 f4       	brne	.+20     	; 0xe6e <__fpcmp_parts_f+0x2e>
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	1c 91       	ld	r17, X
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	99 f5       	brne	.+102    	; 0xec8 <__fpcmp_parts_f+0x88>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	68 2f       	mov	r22, r24
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	61 1b       	sub	r22, r17
     e6a:	71 09       	sbc	r23, r1
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <__fpcmp_parts_f+0xac>
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	21 f0       	breq	.+8      	; 0xe7a <__fpcmp_parts_f+0x3a>
     e72:	92 30       	cpi	r25, 0x02	; 2
     e74:	31 f4       	brne	.+12     	; 0xe82 <__fpcmp_parts_f+0x42>
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	b9 f1       	breq	.+110    	; 0xee8 <__fpcmp_parts_f+0xa8>
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	88 23       	and	r24, r24
     e7e:	89 f1       	breq	.+98     	; 0xee2 <__fpcmp_parts_f+0xa2>
     e80:	2d c0       	rjmp	.+90     	; 0xedc <__fpcmp_parts_f+0x9c>
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	1c 91       	ld	r17, X
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	f1 f0       	breq	.+60     	; 0xec8 <__fpcmp_parts_f+0x88>
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	18 17       	cp	r17, r24
     e90:	d9 f4       	brne	.+54     	; 0xec8 <__fpcmp_parts_f+0x88>
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	2d 91       	ld	r18, X+
     e96:	3c 91       	ld	r19, X
     e98:	13 97       	sbiw	r26, 0x03	; 3
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	82 17       	cp	r24, r18
     ea0:	93 07       	cpc	r25, r19
     ea2:	94 f0       	brlt	.+36     	; 0xec8 <__fpcmp_parts_f+0x88>
     ea4:	28 17       	cp	r18, r24
     ea6:	39 07       	cpc	r19, r25
     ea8:	bc f0       	brlt	.+46     	; 0xed8 <__fpcmp_parts_f+0x98>
     eaa:	14 96       	adiw	r26, 0x04	; 4
     eac:	8d 91       	ld	r24, X+
     eae:	9d 91       	ld	r25, X+
     eb0:	0d 90       	ld	r0, X+
     eb2:	bc 91       	ld	r27, X
     eb4:	a0 2d       	mov	r26, r0
     eb6:	24 81       	ldd	r18, Z+4	; 0x04
     eb8:	35 81       	ldd	r19, Z+5	; 0x05
     eba:	46 81       	ldd	r20, Z+6	; 0x06
     ebc:	57 81       	ldd	r21, Z+7	; 0x07
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	4a 07       	cpc	r20, r26
     ec4:	5b 07       	cpc	r21, r27
     ec6:	18 f4       	brcc	.+6      	; 0xece <__fpcmp_parts_f+0x8e>
     ec8:	11 23       	and	r17, r17
     eca:	41 f0       	breq	.+16     	; 0xedc <__fpcmp_parts_f+0x9c>
     ecc:	0a c0       	rjmp	.+20     	; 0xee2 <__fpcmp_parts_f+0xa2>
     ece:	82 17       	cp	r24, r18
     ed0:	93 07       	cpc	r25, r19
     ed2:	a4 07       	cpc	r26, r20
     ed4:	b5 07       	cpc	r27, r21
     ed6:	40 f4       	brcc	.+16     	; 0xee8 <__fpcmp_parts_f+0xa8>
     ed8:	11 23       	and	r17, r17
     eda:	19 f0       	breq	.+6      	; 0xee2 <__fpcmp_parts_f+0xa2>
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__fpcmp_parts_f+0xac>
     ee2:	6f ef       	ldi	r22, 0xFF	; 255
     ee4:	7f ef       	ldi	r23, 0xFF	; 255
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <__fpcmp_parts_f+0xac>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	cb 01       	movw	r24, r22
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <init_master>:
/****************************
 function return type : void
 init the master --> SPCR
 *****************************/
void init_master(void)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	/*
	 setting the output of SPI pins
	 */
	SPI_DDR |= ((1 << SPI_SS) | (1 << SPI_SCK) | (1 << SPI_MOSI));
     efa:	a7 e3       	ldi	r26, 0x37	; 55
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e7 e3       	ldi	r30, 0x37	; 55
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 6b       	ori	r24, 0xB0	; 176
     f06:	8c 93       	st	X, r24
	/*
	 SET BIT 4 TO BECOME A MSTER (MSTR)
	 SET BIT 2 TO ENABLE THE SPI (SPE)
	 frequancy 125k
	 */
	SPCR |= ((1 << 6) | (1 << 4) | (1 << 1));
     f08:	ad e2       	ldi	r26, 0x2D	; 45
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ed e2       	ldi	r30, 0x2D	; 45
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 65       	ori	r24, 0x52	; 82
     f14:	8c 93       	st	X, r24
}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <transfer_BLOCK>:

u8 transfer_BLOCK(u8 data)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     f28:	ef e2       	ldi	r30, 0x2F	; 47
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	80 83       	st	Z, r24
	while (!(SPSR & (1 << 7))); // waiting 8 clocks
     f30:	ee e2       	ldi	r30, 0x2E	; 46
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 23       	and	r24, r24
     f38:	dc f7       	brge	.-10     	; 0xf30 <transfer_BLOCK+0x14>
	return SPDR;
     f3a:	ef e2       	ldi	r30, 0x2F	; 47
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
}
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <init_slave>:

void init_slave(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	SPI_DDR = (1 << SPI_MISO);
     f50:	e7 e3       	ldi	r30, 0x37	; 55
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 e4       	ldi	r24, 0x40	; 64
     f56:	80 83       	st	Z, r24
	SPCR = (1 << SPE);
     f58:	ed e2       	ldi	r30, 0x2D	; 45
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 e4       	ldi	r24, 0x40	; 64
     f5e:	80 83       	st	Z, r24
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <DIO_SetPinDirection>:
#include "DIO_REG.h"
#include "../../uitils/BIT_MATH.h"
#include "DIO.h"

void DIO_SetPinDirection(u8 GropuIDcopy, u8 PinIDcopy, u8 DirId)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	27 97       	sbiw	r28, 0x07	; 7
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	6a 83       	std	Y+2, r22	; 0x02
     f7e:	4b 83       	std	Y+3, r20	; 0x03
    if (DirId == INPUT)
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	88 23       	and	r24, r24
     f84:	09 f0       	breq	.+2      	; 0xf88 <DIO_SetPinDirection+0x22>
     f86:	74 c0       	rjmp	.+232    	; 0x1070 <DIO_SetPinDirection+0x10a>
    {
        switch (GropuIDcopy)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	3f 83       	std	Y+7, r19	; 0x07
     f90:	2e 83       	std	Y+6, r18	; 0x06
     f92:	8e 81       	ldd	r24, Y+6	; 0x06
     f94:	9f 81       	ldd	r25, Y+7	; 0x07
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	91 05       	cpc	r25, r1
     f9a:	59 f1       	breq	.+86     	; 0xff2 <DIO_SetPinDirection+0x8c>
     f9c:	2e 81       	ldd	r18, Y+6	; 0x06
     f9e:	3f 81       	ldd	r19, Y+7	; 0x07
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	2c f4       	brge	.+10     	; 0xfb0 <DIO_SetPinDirection+0x4a>
     fa6:	8e 81       	ldd	r24, Y+6	; 0x06
     fa8:	9f 81       	ldd	r25, Y+7	; 0x07
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f0       	breq	.+26     	; 0xfc8 <DIO_SetPinDirection+0x62>
     fae:	d2 c0       	rjmp	.+420    	; 0x1154 <DIO_SetPinDirection+0x1ee>
     fb0:	2e 81       	ldd	r18, Y+6	; 0x06
     fb2:	3f 81       	ldd	r19, Y+7	; 0x07
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	89 f1       	breq	.+98     	; 0x101c <DIO_SetPinDirection+0xb6>
     fba:	8e 81       	ldd	r24, Y+6	; 0x06
     fbc:	9f 81       	ldd	r25, Y+7	; 0x07
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <DIO_SetPinDirection+0x60>
     fc4:	40 c0       	rjmp	.+128    	; 0x1046 <DIO_SetPinDirection+0xe0>
     fc6:	c6 c0       	rjmp	.+396    	; 0x1154 <DIO_SetPinDirection+0x1ee>
        {
        case GROUPA:
            CLR_BIT(DDRA_Register, PinIDcopy);
     fc8:	aa e3       	ldi	r26, 0x3A	; 58
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea e3       	ldi	r30, 0x3A	; 58
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_SetPinDirection+0x80>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_SetPinDirection+0x7c>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	b1 c0       	rjmp	.+354    	; 0x1154 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPB:
            CLR_BIT(DDRB_Register, PinIDcopy);
     ff2:	a7 e3       	ldi	r26, 0x37	; 55
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e3       	ldi	r30, 0x37	; 55
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_SetPinDirection+0xaa>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_SetPinDirection+0xa6>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	9c c0       	rjmp	.+312    	; 0x1154 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPC:
            CLR_BIT(DDRC_Register, PinIDcopy);
    101c:	a4 e3       	ldi	r26, 0x34	; 52
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e4 e3       	ldi	r30, 0x34	; 52
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_SetPinDirection+0xd4>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_SetPinDirection+0xd0>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	87 c0       	rjmp	.+270    	; 0x1154 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPD:
            CLR_BIT(DDRD_Register, PinIDcopy);
    1046:	a1 e3       	ldi	r26, 0x31	; 49
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e1 e3       	ldi	r30, 0x31	; 49
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_SetPinDirection+0xfe>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_SetPinDirection+0xfa>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	72 c0       	rjmp	.+228    	; 0x1154 <DIO_SetPinDirection+0x1ee>
            break;
        }
    }
    else if (DirId == OUTPUT)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	09 f0       	breq	.+2      	; 0x1078 <DIO_SetPinDirection+0x112>
    1076:	6e c0       	rjmp	.+220    	; 0x1154 <DIO_SetPinDirection+0x1ee>
    {
        switch (GropuIDcopy)
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3d 83       	std	Y+5, r19	; 0x05
    1080:	2c 83       	std	Y+4, r18	; 0x04
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	49 f1       	breq	.+82     	; 0x10de <DIO_SetPinDirection+0x178>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	2c f4       	brge	.+10     	; 0x10a0 <DIO_SetPinDirection+0x13a>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	61 f0       	breq	.+24     	; 0x10b6 <DIO_SetPinDirection+0x150>
    109e:	5a c0       	rjmp	.+180    	; 0x1154 <DIO_SetPinDirection+0x1ee>
    10a0:	2c 81       	ldd	r18, Y+4	; 0x04
    10a2:	3d 81       	ldd	r19, Y+5	; 0x05
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	71 f1       	breq	.+92     	; 0x1106 <DIO_SetPinDirection+0x1a0>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	e9 f1       	breq	.+122    	; 0x112e <DIO_SetPinDirection+0x1c8>
    10b4:	4f c0       	rjmp	.+158    	; 0x1154 <DIO_SetPinDirection+0x1ee>
        {
        case GROUPA:
            SET_BIT(DDRA_Register, PinIDcopy);
    10b6:	aa e3       	ldi	r26, 0x3A	; 58
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ea e3       	ldi	r30, 0x3A	; 58
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_SetPinDirection+0x16e>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_SetPinDirection+0x16a>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	3b c0       	rjmp	.+118    	; 0x1154 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPB:
            SET_BIT(DDRB_Register, PinIDcopy);
    10de:	a7 e3       	ldi	r26, 0x37	; 55
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e7 e3       	ldi	r30, 0x37	; 55
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_SetPinDirection+0x196>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_SetPinDirection+0x192>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	27 c0       	rjmp	.+78     	; 0x1154 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPC:
            SET_BIT(DDRC_Register, PinIDcopy);
    1106:	a4 e3       	ldi	r26, 0x34	; 52
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e4 e3       	ldi	r30, 0x34	; 52
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_SetPinDirection+0x1be>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_SetPinDirection+0x1ba>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	13 c0       	rjmp	.+38     	; 0x1154 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPD:
            SET_BIT(DDRD_Register, PinIDcopy);
    112e:	a1 e3       	ldi	r26, 0x31	; 49
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e1 e3       	ldi	r30, 0x31	; 49
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_SetPinDirection+0x1e6>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_SetPinDirection+0x1e2>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    1154:	27 96       	adiw	r28, 0x07	; 7
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <DIO_SetPinValue>:

void DIO_SetPinValue(u8 GropuIDcopy, u8 PinIDcopy, u8 ValueId)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	27 97       	sbiw	r28, 0x07	; 7
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
    117e:	4b 83       	std	Y+3, r20	; 0x03
    if (ValueId == LOW)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 23       	and	r24, r24
    1184:	09 f0       	breq	.+2      	; 0x1188 <DIO_SetPinValue+0x22>
    1186:	74 c0       	rjmp	.+232    	; 0x1270 <DIO_SetPinValue+0x10a>
    {
        switch (GropuIDcopy)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3f 83       	std	Y+7, r19	; 0x07
    1190:	2e 83       	std	Y+6, r18	; 0x06
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	59 f1       	breq	.+86     	; 0x11f2 <DIO_SetPinValue+0x8c>
    119c:	2e 81       	ldd	r18, Y+6	; 0x06
    119e:	3f 81       	ldd	r19, Y+7	; 0x07
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <DIO_SetPinValue+0x4a>
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	69 f0       	breq	.+26     	; 0x11c8 <DIO_SetPinValue+0x62>
    11ae:	d2 c0       	rjmp	.+420    	; 0x1354 <DIO_SetPinValue+0x1ee>
    11b0:	2e 81       	ldd	r18, Y+6	; 0x06
    11b2:	3f 81       	ldd	r19, Y+7	; 0x07
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	89 f1       	breq	.+98     	; 0x121c <DIO_SetPinValue+0xb6>
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <DIO_SetPinValue+0x60>
    11c4:	40 c0       	rjmp	.+128    	; 0x1246 <DIO_SetPinValue+0xe0>
    11c6:	c6 c0       	rjmp	.+396    	; 0x1354 <DIO_SetPinValue+0x1ee>
        {
        case GROUPA:
            CLR_BIT(PORTA_Register, PinIDcopy);
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_SetPinValue+0x80>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_SetPinValue+0x7c>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	b1 c0       	rjmp	.+354    	; 0x1354 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPB:
            CLR_BIT(PORTB_Register, PinIDcopy);
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_SetPinValue+0xaa>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_SetPinValue+0xa6>
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	9c c0       	rjmp	.+312    	; 0x1354 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPC:
            CLR_BIT(PORTC_Register, PinIDcopy);
    121c:	a5 e3       	ldi	r26, 0x35	; 53
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e3       	ldi	r30, 0x35	; 53
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_SetPinValue+0xd4>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_SetPinValue+0xd0>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	87 c0       	rjmp	.+270    	; 0x1354 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPD:
            CLR_BIT(PORTD_Register, PinIDcopy);
    1246:	a2 e3       	ldi	r26, 0x32	; 50
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e2 e3       	ldi	r30, 0x32	; 50
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_SetPinValue+0xfe>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_SetPinValue+0xfa>
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	72 c0       	rjmp	.+228    	; 0x1354 <DIO_SetPinValue+0x1ee>
            break;
        }
    }
    else if (ValueId == HIGH)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	09 f0       	breq	.+2      	; 0x1278 <DIO_SetPinValue+0x112>
    1276:	6e c0       	rjmp	.+220    	; 0x1354 <DIO_SetPinValue+0x1ee>
    {
        switch (GropuIDcopy)
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3d 83       	std	Y+5, r19	; 0x05
    1280:	2c 83       	std	Y+4, r18	; 0x04
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	49 f1       	breq	.+82     	; 0x12de <DIO_SetPinValue+0x178>
    128c:	2c 81       	ldd	r18, Y+4	; 0x04
    128e:	3d 81       	ldd	r19, Y+5	; 0x05
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	2c f4       	brge	.+10     	; 0x12a0 <DIO_SetPinValue+0x13a>
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	61 f0       	breq	.+24     	; 0x12b6 <DIO_SetPinValue+0x150>
    129e:	5a c0       	rjmp	.+180    	; 0x1354 <DIO_SetPinValue+0x1ee>
    12a0:	2c 81       	ldd	r18, Y+4	; 0x04
    12a2:	3d 81       	ldd	r19, Y+5	; 0x05
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	71 f1       	breq	.+92     	; 0x1306 <DIO_SetPinValue+0x1a0>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	e9 f1       	breq	.+122    	; 0x132e <DIO_SetPinValue+0x1c8>
    12b4:	4f c0       	rjmp	.+158    	; 0x1354 <DIO_SetPinValue+0x1ee>
        {
        case GROUPA:
            SET_BIT(PORTA_Register, PinIDcopy);
    12b6:	ab e3       	ldi	r26, 0x3B	; 59
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	eb e3       	ldi	r30, 0x3B	; 59
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_SetPinValue+0x16e>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_SetPinValue+0x16a>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	3b c0       	rjmp	.+118    	; 0x1354 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPB:
            SET_BIT(PORTB_Register, PinIDcopy);
    12de:	a8 e3       	ldi	r26, 0x38	; 56
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e8 e3       	ldi	r30, 0x38	; 56
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_SetPinValue+0x196>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_SetPinValue+0x192>
    1300:	84 2b       	or	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	27 c0       	rjmp	.+78     	; 0x1354 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPC:
            SET_BIT(PORTC_Register, PinIDcopy);
    1306:	a5 e3       	ldi	r26, 0x35	; 53
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e5 e3       	ldi	r30, 0x35	; 53
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_SetPinValue+0x1be>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_SetPinValue+0x1ba>
    1328:	84 2b       	or	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPD:
            SET_BIT(PORTD_Register, PinIDcopy);
    132e:	a2 e3       	ldi	r26, 0x32	; 50
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e2 e3       	ldi	r30, 0x32	; 50
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_SetPinValue+0x1e6>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_SetPinValue+0x1e2>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
            break;
        }
    }
}
    1354:	27 96       	adiw	r28, 0x07	; 7
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 GropuIDcopy, u8 PinIDcopy)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_GetPinValue+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_GetPinValue+0x8>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	6b 83       	std	Y+3, r22	; 0x03
    u8 result = 0xFF;
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	89 83       	std	Y+1, r24	; 0x01
    switch (GropuIDcopy)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 83       	std	Y+5, r19	; 0x05
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	4c 81       	ldd	r20, Y+4	; 0x04
    1388:	5d 81       	ldd	r21, Y+5	; 0x05
    138a:	41 30       	cpi	r20, 0x01	; 1
    138c:	51 05       	cpc	r21, r1
    138e:	41 f1       	breq	.+80     	; 0x13e0 <DIO_GetPinValue+0x7a>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	91 05       	cpc	r25, r1
    1398:	34 f4       	brge	.+12     	; 0x13a6 <DIO_GetPinValue+0x40>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	21 15       	cp	r18, r1
    13a0:	31 05       	cpc	r19, r1
    13a2:	61 f0       	breq	.+24     	; 0x13bc <DIO_GetPinValue+0x56>
    13a4:	52 c0       	rjmp	.+164    	; 0x144a <DIO_GetPinValue+0xe4>
    13a6:	4c 81       	ldd	r20, Y+4	; 0x04
    13a8:	5d 81       	ldd	r21, Y+5	; 0x05
    13aa:	42 30       	cpi	r20, 0x02	; 2
    13ac:	51 05       	cpc	r21, r1
    13ae:	51 f1       	breq	.+84     	; 0x1404 <DIO_GetPinValue+0x9e>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	b9 f1       	breq	.+110    	; 0x1428 <DIO_GetPinValue+0xc2>
    13ba:	47 c0       	rjmp	.+142    	; 0x144a <DIO_GetPinValue+0xe4>
    {
    case GROUPA:
        result = GET_BIT(PINA_Register, PinIDcopy);
    13bc:	e9 e3       	ldi	r30, 0x39	; 57
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a9 01       	movw	r20, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_GetPinValue+0x6e>
    13d0:	55 95       	asr	r21
    13d2:	47 95       	ror	r20
    13d4:	8a 95       	dec	r24
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_GetPinValue+0x6a>
    13d8:	ca 01       	movw	r24, r20
    13da:	81 70       	andi	r24, 0x01	; 1
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	35 c0       	rjmp	.+106    	; 0x144a <DIO_GetPinValue+0xe4>
        break;
    case GROUPB:
        result = GET_BIT(PINB_Register, PinIDcopy);
    13e0:	e6 e3       	ldi	r30, 0x36	; 54
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a9 01       	movw	r20, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_GetPinValue+0x92>
    13f4:	55 95       	asr	r21
    13f6:	47 95       	ror	r20
    13f8:	8a 95       	dec	r24
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_GetPinValue+0x8e>
    13fc:	ca 01       	movw	r24, r20
    13fe:	81 70       	andi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	23 c0       	rjmp	.+70     	; 0x144a <DIO_GetPinValue+0xe4>
        break;
    case GROUPC:
        result = GET_BIT(PINC_Register, PinIDcopy);
    1404:	e3 e3       	ldi	r30, 0x33	; 51
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_GetPinValue+0xb6>
    1418:	55 95       	asr	r21
    141a:	47 95       	ror	r20
    141c:	8a 95       	dec	r24
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_GetPinValue+0xb2>
    1420:	ca 01       	movw	r24, r20
    1422:	81 70       	andi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	11 c0       	rjmp	.+34     	; 0x144a <DIO_GetPinValue+0xe4>
        break;
    case GROUPD:
        result = GET_BIT(PIND_Register, PinIDcopy);
    1428:	e0 e3       	ldi	r30, 0x30	; 48
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_GetPinValue+0xda>
    143c:	55 95       	asr	r21
    143e:	47 95       	ror	r20
    1440:	8a 95       	dec	r24
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_GetPinValue+0xd6>
    1444:	ca 01       	movw	r24, r20
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return result;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DIO_SetGroupDirection>:

void DIO_SetGroupDirection(u8 GropuIDcopy, u8 DirID)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_SetGroupDirection+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_SetGroupDirection+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	6a 83       	std	Y+2, r22	; 0x02
    switch (GropuIDcopy)
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3c 83       	std	Y+4, r19	; 0x04
    1474:	2b 83       	std	Y+3, r18	; 0x03
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	d1 f0       	breq	.+52     	; 0x14b4 <DIO_SetGroupDirection+0x58>
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <DIO_SetGroupDirection+0x38>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	61 f0       	breq	.+24     	; 0x14aa <DIO_SetGroupDirection+0x4e>
    1492:	1e c0       	rjmp	.+60     	; 0x14d0 <DIO_SetGroupDirection+0x74>
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	81 f0       	breq	.+32     	; 0x14be <DIO_SetGroupDirection+0x62>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <DIO_SetGroupDirection+0x6c>
    14a8:	13 c0       	rjmp	.+38     	; 0x14d0 <DIO_SetGroupDirection+0x74>
    {
    case GROUPA:
        DDRA_Register = DirID;
    14aa:	ea e3       	ldi	r30, 0x3A	; 58
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	80 83       	st	Z, r24
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <DIO_SetGroupDirection+0x74>
        break;
    case GROUPB:
        DDRB_Register = DirID;
    14b4:	e7 e3       	ldi	r30, 0x37	; 55
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 83       	st	Z, r24
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <DIO_SetGroupDirection+0x74>
        break;
    case GROUPC:
        DDRC_Register = DirID;
    14be:	e4 e3       	ldi	r30, 0x34	; 52
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <DIO_SetGroupDirection+0x74>
        break;
    case GROUPD:
        DDRD_Register = DirID;
    14c8:	e1 e3       	ldi	r30, 0x31	; 49
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
        break;
    }
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <DIO_SetGroupValue>:

void DIO_SetGroupValue(u8 GropuIDcopy, u8 valueID)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <DIO_SetGroupValue+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <DIO_SetGroupValue+0x8>
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	6a 83       	std	Y+2, r22	; 0x02

    switch (GropuIDcopy)
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	3c 83       	std	Y+4, r19	; 0x04
    14f6:	2b 83       	std	Y+3, r18	; 0x03
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	d1 f0       	breq	.+52     	; 0x1536 <DIO_SetGroupValue+0x58>
    1502:	2b 81       	ldd	r18, Y+3	; 0x03
    1504:	3c 81       	ldd	r19, Y+4	; 0x04
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	2c f4       	brge	.+10     	; 0x1516 <DIO_SetGroupValue+0x38>
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	61 f0       	breq	.+24     	; 0x152c <DIO_SetGroupValue+0x4e>
    1514:	1e c0       	rjmp	.+60     	; 0x1552 <DIO_SetGroupValue+0x74>
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	3c 81       	ldd	r19, Y+4	; 0x04
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	81 f0       	breq	.+32     	; 0x1540 <DIO_SetGroupValue+0x62>
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	81 f0       	breq	.+32     	; 0x154a <DIO_SetGroupValue+0x6c>
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <DIO_SetGroupValue+0x74>
    {
    case GROUPA:
        PORTA_Register = valueID;
    152c:	eb e3       	ldi	r30, 0x3B	; 59
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	80 83       	st	Z, r24
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <DIO_SetGroupValue+0x74>
        break;
    case GROUPB:
        PORTB_Register = valueID;
    1536:	e8 e3       	ldi	r30, 0x38	; 56
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	80 83       	st	Z, r24
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <DIO_SetGroupValue+0x74>
        break;
    case GROUPC:
        PORTC_Register = valueID;
    1540:	e5 e3       	ldi	r30, 0x35	; 53
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 83       	st	Z, r24
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <DIO_SetGroupValue+0x74>
        break;
    case GROUPD:
        PORTD_Register = valueID;
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	80 83       	st	Z, r24
        break;
    }
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <DIO_TogPin>:


void DIO_TogPin(u8 GropuIDcopy, u8 PinIDcopy) {
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <DIO_TogPin+0x6>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <DIO_TogPin+0x8>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	6a 83       	std	Y+2, r22	; 0x02
	switch (GropuIDcopy) {
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	3c 83       	std	Y+4, r19	; 0x04
    1578:	2b 83       	std	Y+3, r18	; 0x03
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	91 05       	cpc	r25, r1
    1582:	49 f1       	breq	.+82     	; 0x15d6 <DIO_TogPin+0x76>
    1584:	2b 81       	ldd	r18, Y+3	; 0x03
    1586:	3c 81       	ldd	r19, Y+4	; 0x04
    1588:	22 30       	cpi	r18, 0x02	; 2
    158a:	31 05       	cpc	r19, r1
    158c:	2c f4       	brge	.+10     	; 0x1598 <DIO_TogPin+0x38>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	61 f0       	breq	.+24     	; 0x15ae <DIO_TogPin+0x4e>
    1596:	5a c0       	rjmp	.+180    	; 0x164c <DIO_TogPin+0xec>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	31 05       	cpc	r19, r1
    15a0:	71 f1       	breq	.+92     	; 0x15fe <DIO_TogPin+0x9e>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	83 30       	cpi	r24, 0x03	; 3
    15a8:	91 05       	cpc	r25, r1
    15aa:	e9 f1       	breq	.+122    	; 0x1626 <DIO_TogPin+0xc6>
    15ac:	4f c0       	rjmp	.+158    	; 0x164c <DIO_TogPin+0xec>
	case GROUPA:
		PORTA_Register ^= (1 << PinIDcopy);
    15ae:	ab e3       	ldi	r26, 0x3B	; 59
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	eb e3       	ldi	r30, 0x3B	; 59
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_TogPin+0x6c>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_TogPin+0x68>
    15d0:	84 27       	eor	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	3b c0       	rjmp	.+118    	; 0x164c <DIO_TogPin+0xec>
		break;
	case GROUPB:
		PORTB_Register ^= (1 << PinIDcopy);
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_TogPin+0x94>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_TogPin+0x90>
    15f8:	84 27       	eor	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	27 c0       	rjmp	.+78     	; 0x164c <DIO_TogPin+0xec>
		break;
	case GROUPC:
		PORTC_Register ^= (1 << PinIDcopy);
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_TogPin+0xbc>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_TogPin+0xb8>
    1620:	84 27       	eor	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	13 c0       	rjmp	.+38     	; 0x164c <DIO_TogPin+0xec>
		break;
	case GROUPD:
		PORTD_Register ^= (1 << PinIDcopy);
    1626:	a2 e3       	ldi	r26, 0x32	; 50
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e2 e3       	ldi	r30, 0x32	; 50
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_TogPin+0xe4>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_TogPin+0xe0>
    1648:	84 27       	eor	r24, r20
    164a:	8c 93       	st	X, r24
		break;
	}
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <ADC_init>:
#include "ADC.h"

#define ADCD *((volatile u16*)(0x24))

void ADC_init( )
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= (1 << 6);
    1662:	a7 e2       	ldi	r26, 0x27	; 39
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e7 e2       	ldi	r30, 0x27	; 39
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 64       	ori	r24, 0x40	; 64
    166e:	8c 93       	st	X, r24
	ADMUX &= ~(1 << 7);
    1670:	a7 e2       	ldi	r26, 0x27	; 39
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e7 e2       	ldi	r30, 0x27	; 39
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8f 77       	andi	r24, 0x7F	; 127
    167c:	8c 93       	st	X, r24
	ADMUX &= ~(1 << 5);
    167e:	a7 e2       	ldi	r26, 0x27	; 39
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e7 e2       	ldi	r30, 0x27	; 39
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 7d       	andi	r24, 0xDF	; 223
    168a:	8c 93       	st	X, r24
	ADCSRA &= ~(1 << 0);
    168c:	a6 e2       	ldi	r26, 0x26	; 38
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e6 e2       	ldi	r30, 0x26	; 38
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8e 7f       	andi	r24, 0xFE	; 254
    1698:	8c 93       	st	X, r24
	ADCSRA |= (1 << 1);
    169a:	a6 e2       	ldi	r26, 0x26	; 38
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e6 e2       	ldi	r30, 0x26	; 38
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	82 60       	ori	r24, 0x02	; 2
    16a6:	8c 93       	st	X, r24
	ADCSRA |= (1 << 2);
    16a8:	a6 e2       	ldi	r26, 0x26	; 38
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e6 e2       	ldi	r30, 0x26	; 38
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	84 60       	ori	r24, 0x04	; 4
    16b4:	8c 93       	st	X, r24
	ADCSRA |= (1 << 7);
    16b6:	a6 e2       	ldi	r26, 0x26	; 38
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e6 e2       	ldi	r30, 0x26	; 38
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 68       	ori	r24, 0x80	; 128
    16c2:	8c 93       	st	X, r24
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <ADC_read>:

u16 ADC_read(u8 channel)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	89 83       	std	Y+1, r24	; 0x01
	if (channel <= 7) {
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	88 30       	cpi	r24, 0x08	; 8
    16da:	40 f5       	brcc	.+80     	; 0x172c <ADC_read+0x62>
		ADMUX &= 0XE0;
    16dc:	a7 e2       	ldi	r26, 0x27	; 39
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e2       	ldi	r30, 0x27	; 39
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 7e       	andi	r24, 0xE0	; 224
    16e8:	8c 93       	st	X, r24
		ADMUX |= channel;
    16ea:	a7 e2       	ldi	r26, 0x27	; 39
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e7 e2       	ldi	r30, 0x27	; 39
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	90 81       	ld	r25, Z
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	89 2b       	or	r24, r25
    16f8:	8c 93       	st	X, r24
		ADCSRA |= (1 << 6);
    16fa:	a6 e2       	ldi	r26, 0x26	; 38
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e6 e2       	ldi	r30, 0x26	; 38
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 64       	ori	r24, 0x40	; 64
    1706:	8c 93       	st	X, r24
		while (GET_BIT(ADCSRA,4) != 1) {
    1708:	e6 e2       	ldi	r30, 0x26	; 38
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	82 95       	swap	r24
    1710:	8f 70       	andi	r24, 0x0F	; 15
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	a9 f3       	breq	.-22     	; 0x1708 <ADC_read+0x3e>

		}
		ADCSRA |= (1 << 4);
    171e:	a6 e2       	ldi	r26, 0x26	; 38
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e6 e2       	ldi	r30, 0x26	; 38
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 61       	ori	r24, 0x10	; 16
    172a:	8c 93       	st	X, r24
	}
	return ADCD;
    172c:	e4 e2       	ldi	r30, 0x24	; 36
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
}
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <LCD_Vinit>:
#define LCD_DISPLAY_ON 0x0C


#define degree_sysmbol 0xdf
#define degree_sysmbol_i  0xdf
void LCD_Vinit(void) {
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	c4 55       	subi	r28, 0x54	; 84
    174a:	d0 40       	sbci	r29, 0x00	; 0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
	/* set DDRA as OUTPUTs pins */
	DIO_SetGroupDirection(LCD_GROUP_DATA, 0xFF);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	6f ef       	ldi	r22, 0xFF	; 255
    175a:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_SetGroupDirection>
	/* confguire RS & E as output */
	DIO_SetPinDirection(LCD_GROUP_CONTROL, LCD_RS_PIN, OUTPUT);
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	64 e0       	ldi	r22, 0x04	; 4
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_GROUP_CONTROL, LCD_E_PIN, OUTPUT);
    1768:	83 e0       	ldi	r24, 0x03	; 3
    176a:	67 e0       	ldi	r22, 0x07	; 7
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_SetPinDirection>
    1772:	fe 01       	movw	r30, r28
    1774:	ef 5a       	subi	r30, 0xAF	; 175
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 ef       	ldi	r26, 0xF0	; 240
    177e:	b1 e4       	ldi	r27, 0x41	; 65
    1780:	80 83       	st	Z, r24
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	a2 83       	std	Z+2, r26	; 0x02
    1786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1788:	8e 01       	movw	r16, r28
    178a:	03 5b       	subi	r16, 0xB3	; 179
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	fe 01       	movw	r30, r28
    1790:	ef 5a       	subi	r30, 0xAF	; 175
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a ef       	ldi	r20, 0xFA	; 250
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	f8 01       	movw	r30, r16
    17ae:	80 83       	st	Z, r24
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	a2 83       	std	Z+2, r26	; 0x02
    17b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b6:	fe 01       	movw	r30, r28
    17b8:	e3 5b       	subi	r30, 0xB3	; 179
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	44 f4       	brge	.+16     	; 0x17e4 <LCD_Vinit+0xa8>
		__ticks = 1;
    17d4:	fe 01       	movw	r30, r28
    17d6:	e5 5b       	subi	r30, 0xB5	; 181
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	64 c0       	rjmp	.+200    	; 0x18ac <LCD_Vinit+0x170>
	else if (__tmp > 65535)
    17e4:	fe 01       	movw	r30, r28
    17e6:	e3 5b       	subi	r30, 0xB3	; 179
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	0c f0       	brlt	.+2      	; 0x1804 <LCD_Vinit+0xc8>
    1802:	43 c0       	rjmp	.+134    	; 0x188a <LCD_Vinit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	fe 01       	movw	r30, r28
    1806:	ef 5a       	subi	r30, 0xAF	; 175
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e2       	ldi	r20, 0x20	; 32
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8e 01       	movw	r16, r28
    1824:	05 5b       	subi	r16, 0xB5	; 181
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	f8 01       	movw	r30, r16
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	1f c0       	rjmp	.+62     	; 0x187a <LCD_Vinit+0x13e>
    183c:	fe 01       	movw	r30, r28
    183e:	e7 5b       	subi	r30, 0xB7	; 183
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5b       	subi	r30, 0xB7	; 183
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <LCD_Vinit+0x118>
    1858:	fe 01       	movw	r30, r28
    185a:	e7 5b       	subi	r30, 0xB7	; 183
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	de 01       	movw	r26, r28
    1864:	a5 5b       	subi	r26, 0xB5	; 181
    1866:	bf 4f       	sbci	r27, 0xFF	; 255
    1868:	fe 01       	movw	r30, r28
    186a:	e5 5b       	subi	r30, 0xB5	; 181
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	11 96       	adiw	r26, 0x01	; 1
    1876:	9c 93       	st	X, r25
    1878:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187a:	fe 01       	movw	r30, r28
    187c:	e5 5b       	subi	r30, 0xB5	; 181
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	d1 f6       	brne	.-76     	; 0x183c <LCD_Vinit+0x100>
    1888:	27 c0       	rjmp	.+78     	; 0x18d8 <LCD_Vinit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	8e 01       	movw	r16, r28
    188c:	05 5b       	subi	r16, 0xB5	; 181
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	fe 01       	movw	r30, r28
    1892:	e3 5b       	subi	r30, 0xB3	; 179
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	f8 01       	movw	r30, r16
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	de 01       	movw	r26, r28
    18ae:	a9 5b       	subi	r26, 0xB9	; 185
    18b0:	bf 4f       	sbci	r27, 0xFF	; 255
    18b2:	fe 01       	movw	r30, r28
    18b4:	e5 5b       	subi	r30, 0xB5	; 181
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	8d 93       	st	X+, r24
    18be:	9c 93       	st	X, r25
    18c0:	fe 01       	movw	r30, r28
    18c2:	e9 5b       	subi	r30, 0xB9	; 185
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_Vinit+0x18e>
    18ce:	fe 01       	movw	r30, r28
    18d0:	e9 5b       	subi	r30, 0xB9	; 185
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_Send_Command(LCD_HOME);
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
    18de:	fe 01       	movw	r30, r28
    18e0:	ed 5b       	subi	r30, 0xBD	; 189
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e7       	ldi	r26, 0x70	; 112
    18ea:	b1 e4       	ldi	r27, 0x41	; 65
    18ec:	80 83       	st	Z, r24
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	a2 83       	std	Z+2, r26	; 0x02
    18f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	8e 01       	movw	r16, r28
    18f6:	01 5c       	subi	r16, 0xC1	; 193
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	ed 5b       	subi	r30, 0xBD	; 189
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	f8 01       	movw	r30, r16
    191a:	80 83       	st	Z, r24
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	a2 83       	std	Z+2, r26	; 0x02
    1920:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1922:	fe 01       	movw	r30, r28
    1924:	ff 96       	adiw	r30, 0x3f	; 63
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <LCD_Vinit+0x20c>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9e af       	std	Y+62, r25	; 0x3e
    1944:	8d af       	std	Y+61, r24	; 0x3d
    1946:	46 c0       	rjmp	.+140    	; 0x19d4 <LCD_Vinit+0x298>
	else if (__tmp > 65535)
    1948:	fe 01       	movw	r30, r28
    194a:	ff 96       	adiw	r30, 0x3f	; 63
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	57 e4       	ldi	r21, 0x47	; 71
    195c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	64 f5       	brge	.+88     	; 0x19bc <LCD_Vinit+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1964:	fe 01       	movw	r30, r28
    1966:	ed 5b       	subi	r30, 0xBD	; 189
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	60 81       	ld	r22, Z
    196c:	71 81       	ldd	r23, Z+1	; 0x01
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e af       	std	Y+62, r25	; 0x3e
    1990:	8d af       	std	Y+61, r24	; 0x3d
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <LCD_Vinit+0x276>
    1994:	88 ec       	ldi	r24, 0xC8	; 200
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9c af       	std	Y+60, r25	; 0x3c
    199a:	8b af       	std	Y+59, r24	; 0x3b
    199c:	8b ad       	ldd	r24, Y+59	; 0x3b
    199e:	9c ad       	ldd	r25, Y+60	; 0x3c
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_Vinit+0x264>
    19a4:	9c af       	std	Y+60, r25	; 0x3c
    19a6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9e af       	std	Y+62, r25	; 0x3e
    19b0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <LCD_Vinit+0x258>
    19ba:	16 c0       	rjmp	.+44     	; 0x19e8 <LCD_Vinit+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	fe 01       	movw	r30, r28
    19be:	ff 96       	adiw	r30, 0x3f	; 63
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e af       	std	Y+62, r25	; 0x3e
    19d2:	8d af       	std	Y+61, r24	; 0x3d
    19d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d8:	9a af       	std	Y+58, r25	; 0x3a
    19da:	89 af       	std	Y+57, r24	; 0x39
    19dc:	89 ad       	ldd	r24, Y+57	; 0x39
    19de:	9a ad       	ldd	r25, Y+58	; 0x3a
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_Vinit+0x2a4>
    19e4:	9a af       	std	Y+58, r25	; 0x3a
    19e6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	LCD_Send_Command(LCD_SET_8FUNCTION);
    19e8:	88 e3       	ldi	r24, 0x38	; 56
    19ea:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e8       	ldi	r26, 0x80	; 128
    19f4:	bf e3       	ldi	r27, 0x3F	; 63
    19f6:	8d ab       	std	Y+53, r24	; 0x35
    19f8:	9e ab       	std	Y+54, r25	; 0x36
    19fa:	af ab       	std	Y+55, r26	; 0x37
    19fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1a00:	7e a9       	ldd	r23, Y+54	; 0x36
    1a02:	8f a9       	ldd	r24, Y+55	; 0x37
    1a04:	98 ad       	ldd	r25, Y+56	; 0x38
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	89 ab       	std	Y+49, r24	; 0x31
    1a18:	9a ab       	std	Y+50, r25	; 0x32
    1a1a:	ab ab       	std	Y+51, r26	; 0x33
    1a1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a20:	7a a9       	ldd	r23, Y+50	; 0x32
    1a22:	8b a9       	ldd	r24, Y+51	; 0x33
    1a24:	9c a9       	ldd	r25, Y+52	; 0x34
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <LCD_Vinit+0x304>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	98 ab       	std	Y+48, r25	; 0x30
    1a3c:	8f a7       	std	Y+47, r24	; 0x2f
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <LCD_Vinit+0x382>
	else if (__tmp > 65535)
    1a40:	69 a9       	ldd	r22, Y+49	; 0x31
    1a42:	7a a9       	ldd	r23, Y+50	; 0x32
    1a44:	8b a9       	ldd	r24, Y+51	; 0x33
    1a46:	9c a9       	ldd	r25, Y+52	; 0x34
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	4c f5       	brge	.+82     	; 0x1aaa <LCD_Vinit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a58:	6d a9       	ldd	r22, Y+53	; 0x35
    1a5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_Vinit+0x364>
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e a7       	std	Y+46, r25	; 0x2e
    1a88:	8d a7       	std	Y+45, r24	; 0x2d
    1a8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_Vinit+0x352>
    1a92:	9e a7       	std	Y+46, r25	; 0x2e
    1a94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a98:	98 a9       	ldd	r25, Y+48	; 0x30
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	98 ab       	std	Y+48, r25	; 0x30
    1a9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa2:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <LCD_Vinit+0x346>
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <LCD_Vinit+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	69 a9       	ldd	r22, Y+49	; 0x31
    1aac:	7a a9       	ldd	r23, Y+50	; 0x32
    1aae:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	98 ab       	std	Y+48, r25	; 0x30
    1abc:	8f a7       	std	Y+47, r24	; 0x2f
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	9c a7       	std	Y+44, r25	; 0x2c
    1ac4:	8b a7       	std	Y+43, r24	; 0x2b
    1ac6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_Vinit+0x38e>
    1ace:	9c a7       	std	Y+44, r25	; 0x2c
    1ad0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_Send_Command(LCD_DISPLAY_ON);
    1ad2:	8c e0       	ldi	r24, 0x0C	; 12
    1ad4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e8       	ldi	r26, 0x80	; 128
    1ade:	bf e3       	ldi	r27, 0x3F	; 63
    1ae0:	8f a3       	std	Y+39, r24	; 0x27
    1ae2:	98 a7       	std	Y+40, r25	; 0x28
    1ae4:	a9 a7       	std	Y+41, r26	; 0x29
    1ae6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aea:	78 a5       	ldd	r23, Y+40	; 0x28
    1aec:	89 a5       	ldd	r24, Y+41	; 0x29
    1aee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a ef       	ldi	r20, 0xFA	; 250
    1af6:	54 e4       	ldi	r21, 0x44	; 68
    1af8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8b a3       	std	Y+35, r24	; 0x23
    1b02:	9c a3       	std	Y+36, r25	; 0x24
    1b04:	ad a3       	std	Y+37, r26	; 0x25
    1b06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b08:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <LCD_Vinit+0x3ee>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9a a3       	std	Y+34, r25	; 0x22
    1b26:	89 a3       	std	Y+33, r24	; 0x21
    1b28:	3f c0       	rjmp	.+126    	; 0x1ba8 <LCD_Vinit+0x46c>
	else if (__tmp > 65535)
    1b2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b30:	9e a1       	ldd	r25, Y+38	; 0x26
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	4c f5       	brge	.+82     	; 0x1b94 <LCD_Vinit+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	6f a1       	ldd	r22, Y+39	; 0x27
    1b44:	78 a5       	ldd	r23, Y+40	; 0x28
    1b46:	89 a5       	ldd	r24, Y+41	; 0x29
    1b48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <LCD_Vinit+0x44e>
    1b6c:	88 ec       	ldi	r24, 0xC8	; 200
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	98 a3       	std	Y+32, r25	; 0x20
    1b72:	8f 8f       	std	Y+31, r24	; 0x1f
    1b74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b76:	98 a1       	ldd	r25, Y+32	; 0x20
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_Vinit+0x43c>
    1b7c:	98 a3       	std	Y+32, r25	; 0x20
    1b7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	89 a1       	ldd	r24, Y+33	; 0x21
    1b82:	9a a1       	ldd	r25, Y+34	; 0x22
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	9a a3       	std	Y+34, r25	; 0x22
    1b88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <LCD_Vinit+0x430>
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <LCD_Vinit+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	6b a1       	ldd	r22, Y+35	; 0x23
    1b96:	7c a1       	ldd	r23, Y+36	; 0x24
    1b98:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9a a3       	std	Y+34, r25	; 0x22
    1ba6:	89 a3       	std	Y+33, r24	; 0x21
    1ba8:	89 a1       	ldd	r24, Y+33	; 0x21
    1baa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bac:	9e 8f       	std	Y+30, r25	; 0x1e
    1bae:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_Vinit+0x478>
    1bb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_Send_Command(LCD_CLEAR);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a0 e0       	ldi	r26, 0x00	; 0
    1bc8:	b0 e4       	ldi	r27, 0x40	; 64
    1bca:	89 8f       	std	Y+25, r24	; 0x19
    1bcc:	9a 8f       	std	Y+26, r25	; 0x1a
    1bce:	ab 8f       	std	Y+27, r26	; 0x1b
    1bd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a ef       	ldi	r20, 0xFA	; 250
    1be0:	54 e4       	ldi	r21, 0x44	; 68
    1be2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	8d 8b       	std	Y+21, r24	; 0x15
    1bec:	9e 8b       	std	Y+22, r25	; 0x16
    1bee:	af 8b       	std	Y+23, r26	; 0x17
    1bf0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <LCD_Vinit+0x4d8>
		__ticks = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9c 8b       	std	Y+20, r25	; 0x14
    1c10:	8b 8b       	std	Y+19, r24	; 0x13
    1c12:	3f c0       	rjmp	.+126    	; 0x1c92 <LCD_Vinit+0x556>
	else if (__tmp > 65535)
    1c14:	6d 89       	ldd	r22, Y+21	; 0x15
    1c16:	7e 89       	ldd	r23, Y+22	; 0x16
    1c18:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	57 e4       	ldi	r21, 0x47	; 71
    1c24:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	4c f5       	brge	.+82     	; 0x1c7e <LCD_Vinit+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e2       	ldi	r20, 0x20	; 32
    1c3a:	51 e4       	ldi	r21, 0x41	; 65
    1c3c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9c 8b       	std	Y+20, r25	; 0x14
    1c52:	8b 8b       	std	Y+19, r24	; 0x13
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <LCD_Vinit+0x538>
    1c56:	88 ec       	ldi	r24, 0xC8	; 200
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9a 8b       	std	Y+18, r25	; 0x12
    1c5c:	89 8b       	std	Y+17, r24	; 0x11
    1c5e:	89 89       	ldd	r24, Y+17	; 0x11
    1c60:	9a 89       	ldd	r25, Y+18	; 0x12
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_Vinit+0x526>
    1c66:	9a 8b       	std	Y+18, r25	; 0x12
    1c68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c74:	8b 89       	ldd	r24, Y+19	; 0x13
    1c76:	9c 89       	ldd	r25, Y+20	; 0x14
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	69 f7       	brne	.-38     	; 0x1c56 <LCD_Vinit+0x51a>
    1c7c:	14 c0       	rjmp	.+40     	; 0x1ca6 <LCD_Vinit+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c80:	7e 89       	ldd	r23, Y+22	; 0x16
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9c 8b       	std	Y+20, r25	; 0x14
    1c90:	8b 8b       	std	Y+19, r24	; 0x13
    1c92:	8b 89       	ldd	r24, Y+19	; 0x13
    1c94:	9c 89       	ldd	r25, Y+20	; 0x14
    1c96:	98 8b       	std	Y+16, r25	; 0x10
    1c98:	8f 87       	std	Y+15, r24	; 0x0f
    1c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9c:	98 89       	ldd	r25, Y+16	; 0x10
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_Vinit+0x562>
    1ca2:	98 8b       	std	Y+16, r25	; 0x10
    1ca4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_Send_Command(LCD_DATA_ENTERY);
    1ca6:	86 e0       	ldi	r24, 0x06	; 6
    1ca8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e7       	ldi	r26, 0x70	; 112
    1cb2:	b1 e4       	ldi	r27, 0x41	; 65
    1cb4:	8b 87       	std	Y+11, r24	; 0x0b
    1cb6:	9c 87       	std	Y+12, r25	; 0x0c
    1cb8:	ad 87       	std	Y+13, r26	; 0x0d
    1cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a ef       	ldi	r20, 0xFA	; 250
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <LCD_Vinit+0x5c2>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <LCD_Vinit+0x640>
	else if (__tmp > 65535)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <LCD_Vinit+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <LCD_Vinit+0x622>
    1d40:	88 ec       	ldi	r24, 0xC8	; 200
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_Vinit+0x610>
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <LCD_Vinit+0x604>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <LCD_Vinit+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_Vinit+0x64c>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

}
    1d90:	cc 5a       	subi	r28, 0xAC	; 172
    1d92:	df 4f       	sbci	r29, 0xFF	; 255
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	08 95       	ret

00001da8 <LCD_Send_Command>:

void LCD_Send_Command(u8 command) {
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	cf 56       	subi	r28, 0x6F	; 111
    1db6:	d0 40       	sbci	r29, 0x00	; 0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e1 59       	subi	r30, 0x91	; 145
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 83       	st	Z, r24
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_RS_PIN, LOW);
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	64 e0       	ldi	r22, 0x04	; 4
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e5 59       	subi	r30, 0x95	; 149
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e8       	ldi	r26, 0x80	; 128
    1de0:	bf e3       	ldi	r27, 0x3F	; 63
    1de2:	80 83       	st	Z, r24
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	a2 83       	std	Z+2, r26	; 0x02
    1de8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dea:	8e 01       	movw	r16, r28
    1dec:	09 59       	subi	r16, 0x99	; 153
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e5 59       	subi	r30, 0x95	; 149
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	2b ea       	ldi	r18, 0xAB	; 171
    1e00:	3a ea       	ldi	r19, 0xAA	; 170
    1e02:	4a e2       	ldi	r20, 0x2A	; 42
    1e04:	50 e4       	ldi	r21, 0x40	; 64
    1e06:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	80 83       	st	Z, r24
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	a2 83       	std	Z+2, r26	; 0x02
    1e16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e9 59       	subi	r30, 0x99	; 153
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	34 f4       	brge	.+12     	; 0x1e42 <LCD_Send_Command+0x9a>
		__ticks = 1;
    1e36:	fe 01       	movw	r30, r28
    1e38:	ea 59       	subi	r30, 0x9A	; 154
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 83       	st	Z, r24
    1e40:	e0 c0       	rjmp	.+448    	; 0x2002 <LCD_Send_Command+0x25a>
	else if (__tmp > 255)
    1e42:	fe 01       	movw	r30, r28
    1e44:	e9 59       	subi	r30, 0x99	; 153
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	53 e4       	ldi	r21, 0x43	; 67
    1e58:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <LCD_Send_Command+0xba>
    1e60:	c0 c0       	rjmp	.+384    	; 0x1fe2 <LCD_Send_Command+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1e62:	fe 01       	movw	r30, r28
    1e64:	e5 59       	subi	r30, 0x95	; 149
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a e7       	ldi	r20, 0x7A	; 122
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	fe 01       	movw	r30, r28
    1e82:	ee 59       	subi	r30, 0x9E	; 158
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 83       	st	Z, r24
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	a2 83       	std	Z+2, r26	; 0x02
    1e8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	8e 01       	movw	r16, r28
    1e90:	02 5a       	subi	r16, 0xA2	; 162
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	fe 01       	movw	r30, r28
    1e96:	ee 59       	subi	r30, 0x9E	; 158
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	60 81       	ld	r22, Z
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a ef       	ldi	r20, 0xFA	; 250
    1ea8:	54 e4       	ldi	r21, 0x44	; 68
    1eaa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 83       	st	Z, r24
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	a2 83       	std	Z+2, r26	; 0x02
    1eba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e2 5a       	subi	r30, 0xA2	; 162
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	44 f4       	brge	.+16     	; 0x1eea <LCD_Send_Command+0x142>
		__ticks = 1;
    1eda:	fe 01       	movw	r30, r28
    1edc:	e4 5a       	subi	r30, 0xA4	; 164
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	64 c0       	rjmp	.+200    	; 0x1fb2 <LCD_Send_Command+0x20a>
	else if (__tmp > 65535)
    1eea:	fe 01       	movw	r30, r28
    1eec:	e2 5a       	subi	r30, 0xA2	; 162
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <LCD_Send_Command+0x162>
    1f08:	43 c0       	rjmp	.+134    	; 0x1f90 <LCD_Send_Command+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ee 59       	subi	r30, 0x9E	; 158
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8e 01       	movw	r16, r28
    1f2a:	04 5a       	subi	r16, 0xA4	; 164
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	1f c0       	rjmp	.+62     	; 0x1f80 <LCD_Send_Command+0x1d8>
    1f42:	fe 01       	movw	r30, r28
    1f44:	e6 5a       	subi	r30, 0xA6	; 166
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	88 ec       	ldi	r24, 0xC8	; 200
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
    1f50:	fe 01       	movw	r30, r28
    1f52:	e6 5a       	subi	r30, 0xA6	; 166
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_Send_Command+0x1b2>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e6 5a       	subi	r30, 0xA6	; 166
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f68:	de 01       	movw	r26, r28
    1f6a:	a4 5a       	subi	r26, 0xA4	; 164
    1f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e4 5a       	subi	r30, 0xA4	; 164
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	11 96       	adiw	r26, 0x01	; 1
    1f7c:	9c 93       	st	X, r25
    1f7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	fe 01       	movw	r30, r28
    1f82:	e4 5a       	subi	r30, 0xA4	; 164
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	d1 f6       	brne	.-76     	; 0x1f42 <LCD_Send_Command+0x19a>
    1f8e:	4b c0       	rjmp	.+150    	; 0x2026 <LCD_Send_Command+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	8e 01       	movw	r16, r28
    1f92:	04 5a       	subi	r16, 0xA4	; 164
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	fe 01       	movw	r30, r28
    1f98:	e2 5a       	subi	r30, 0xA2	; 162
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	f8 01       	movw	r30, r16
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
    1fb2:	de 01       	movw	r26, r28
    1fb4:	a8 5a       	subi	r26, 0xA8	; 168
    1fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e4 5a       	subi	r30, 0xA4	; 164
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	11 96       	adiw	r26, 0x01	; 1
    1fc4:	9c 93       	st	X, r25
    1fc6:	8e 93       	st	-X, r24
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e8 5a       	subi	r30, 0xA8	; 168
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_Send_Command+0x22a>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e8 5a       	subi	r30, 0xA8	; 168
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	22 c0       	rjmp	.+68     	; 0x2026 <LCD_Send_Command+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	0a 59       	subi	r16, 0x9A	; 154
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e9 59       	subi	r30, 0x99	; 153
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	f8 01       	movw	r30, r16
    2000:	80 83       	st	Z, r24
    2002:	de 01       	movw	r26, r28
    2004:	a9 5a       	subi	r26, 0xA9	; 169
    2006:	bf 4f       	sbci	r27, 0xFF	; 255
    2008:	fe 01       	movw	r30, r28
    200a:	ea 59       	subi	r30, 0x9A	; 154
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2012:	fe 01       	movw	r30, r28
    2014:	e9 5a       	subi	r30, 0xA9	; 169
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	8a 95       	dec	r24
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_Send_Command+0x272>
    201e:	fe 01       	movw	r30, r28
    2020:	e9 5a       	subi	r30, 0xA9	; 169
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_E_PIN, HIGH);
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	67 e0       	ldi	r22, 0x07	; 7
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    2030:	fe 01       	movw	r30, r28
    2032:	ed 5a       	subi	r30, 0xAD	; 173
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e8       	ldi	r26, 0x80	; 128
    203c:	bf e3       	ldi	r27, 0x3F	; 63
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	a2 83       	std	Z+2, r26	; 0x02
    2044:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2046:	8e 01       	movw	r16, r28
    2048:	01 5b       	subi	r16, 0xB1	; 177
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	ed 5a       	subi	r30, 0xAD	; 173
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	2b ea       	ldi	r18, 0xAB	; 171
    205c:	3a ea       	ldi	r19, 0xAA	; 170
    205e:	4a e2       	ldi	r20, 0x2A	; 42
    2060:	50 e4       	ldi	r21, 0x40	; 64
    2062:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	f8 01       	movw	r30, r16
    206c:	80 83       	st	Z, r24
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	a2 83       	std	Z+2, r26	; 0x02
    2072:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2074:	fe 01       	movw	r30, r28
    2076:	e1 5b       	subi	r30, 0xB1	; 177
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	34 f4       	brge	.+12     	; 0x209e <LCD_Send_Command+0x2f6>
		__ticks = 1;
    2092:	fe 01       	movw	r30, r28
    2094:	e2 5b       	subi	r30, 0xB2	; 178
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	80 83       	st	Z, r24
    209c:	e0 c0       	rjmp	.+448    	; 0x225e <LCD_Send_Command+0x4b6>
	else if (__tmp > 255)
    209e:	fe 01       	movw	r30, r28
    20a0:	e1 5b       	subi	r30, 0xB1	; 177
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	53 e4       	ldi	r21, 0x43	; 67
    20b4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	0c f0       	brlt	.+2      	; 0x20be <LCD_Send_Command+0x316>
    20bc:	c0 c0       	rjmp	.+384    	; 0x223e <LCD_Send_Command+0x496>
	{
		_delay_ms(__us / 1000.0);
    20be:	fe 01       	movw	r30, r28
    20c0:	ed 5a       	subi	r30, 0xAD	; 173
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	54 e4       	ldi	r21, 0x44	; 68
    20d4:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	fe 01       	movw	r30, r28
    20de:	e6 5b       	subi	r30, 0xB6	; 182
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 83       	st	Z, r24
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	a2 83       	std	Z+2, r26	; 0x02
    20e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	8e 01       	movw	r16, r28
    20ec:	0a 5b       	subi	r16, 0xBA	; 186
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	e6 5b       	subi	r30, 0xB6	; 182
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a ef       	ldi	r20, 0xFA	; 250
    2104:	54 e4       	ldi	r21, 0x44	; 68
    2106:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	80 83       	st	Z, r24
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	a2 83       	std	Z+2, r26	; 0x02
    2116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2118:	fe 01       	movw	r30, r28
    211a:	ea 5b       	subi	r30, 0xBA	; 186
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	44 f4       	brge	.+16     	; 0x2146 <LCD_Send_Command+0x39e>
		__ticks = 1;
    2136:	fe 01       	movw	r30, r28
    2138:	ec 5b       	subi	r30, 0xBC	; 188
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	64 c0       	rjmp	.+200    	; 0x220e <LCD_Send_Command+0x466>
	else if (__tmp > 65535)
    2146:	fe 01       	movw	r30, r28
    2148:	ea 5b       	subi	r30, 0xBA	; 186
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	0c f0       	brlt	.+2      	; 0x2166 <LCD_Send_Command+0x3be>
    2164:	43 c0       	rjmp	.+134    	; 0x21ec <LCD_Send_Command+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	fe 01       	movw	r30, r28
    2168:	e6 5b       	subi	r30, 0xB6	; 182
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8e 01       	movw	r16, r28
    2186:	0c 5b       	subi	r16, 0xBC	; 188
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	1f c0       	rjmp	.+62     	; 0x21dc <LCD_Send_Command+0x434>
    219e:	fe 01       	movw	r30, r28
    21a0:	ee 5b       	subi	r30, 0xBE	; 190
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ac:	fe 01       	movw	r30, r28
    21ae:	ee 5b       	subi	r30, 0xBE	; 190
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_Send_Command+0x40e>
    21ba:	fe 01       	movw	r30, r28
    21bc:	ee 5b       	subi	r30, 0xBE	; 190
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	de 01       	movw	r26, r28
    21c6:	ac 5b       	subi	r26, 0xBC	; 188
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	ec 5b       	subi	r30, 0xBC	; 188
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	11 96       	adiw	r26, 0x01	; 1
    21d8:	9c 93       	st	X, r25
    21da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	fe 01       	movw	r30, r28
    21de:	ec 5b       	subi	r30, 0xBC	; 188
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d1 f6       	brne	.-76     	; 0x219e <LCD_Send_Command+0x3f6>
    21ea:	42 c0       	rjmp	.+132    	; 0x2270 <LCD_Send_Command+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	8e 01       	movw	r16, r28
    21ee:	0c 5b       	subi	r16, 0xBC	; 188
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	ea 5b       	subi	r30, 0xBA	; 186
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	de 01       	movw	r26, r28
    2210:	a0 5c       	subi	r26, 0xC0	; 192
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	ec 5b       	subi	r30, 0xBC	; 188
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	9c 93       	st	X, r25
    2222:	8e 93       	st	-X, r24
    2224:	fe 01       	movw	r30, r28
    2226:	e0 5c       	subi	r30, 0xC0	; 192
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <LCD_Send_Command+0x486>
    2232:	fe 01       	movw	r30, r28
    2234:	e0 5c       	subi	r30, 0xC0	; 192
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
    223c:	19 c0       	rjmp	.+50     	; 0x2270 <LCD_Send_Command+0x4c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    223e:	8e 01       	movw	r16, r28
    2240:	02 5b       	subi	r16, 0xB2	; 178
    2242:	1f 4f       	sbci	r17, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	e1 5b       	subi	r30, 0xB1	; 177
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	f8 01       	movw	r30, r16
    225c:	80 83       	st	Z, r24
    225e:	fe 01       	movw	r30, r28
    2260:	e2 5b       	subi	r30, 0xB2	; 178
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2268:	8f ad       	ldd	r24, Y+63	; 0x3f
    226a:	8a 95       	dec	r24
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_Send_Command+0x4c2>
    226e:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_SetGroupValue(LCD_GROUP_DATA, command);
    2270:	fe 01       	movw	r30, r28
    2272:	e1 59       	subi	r30, 0x91	; 145
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	60 81       	ld	r22, Z
    227a:	0e 94 6f 0a 	call	0x14de	; 0x14de <DIO_SetGroupValue>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a0 e8       	ldi	r26, 0x80	; 128
    2284:	bf e3       	ldi	r27, 0x3F	; 63
    2286:	8b af       	std	Y+59, r24	; 0x3b
    2288:	9c af       	std	Y+60, r25	; 0x3c
    228a:	ad af       	std	Y+61, r26	; 0x3d
    228c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2290:	7c ad       	ldd	r23, Y+60	; 0x3c
    2292:	8d ad       	ldd	r24, Y+61	; 0x3d
    2294:	9e ad       	ldd	r25, Y+62	; 0x3e
    2296:	2b ea       	ldi	r18, 0xAB	; 171
    2298:	3a ea       	ldi	r19, 0xAA	; 170
    229a:	4a e2       	ldi	r20, 0x2A	; 42
    229c:	50 e4       	ldi	r21, 0x40	; 64
    229e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	8f ab       	std	Y+55, r24	; 0x37
    22a8:	98 af       	std	Y+56, r25	; 0x38
    22aa:	a9 af       	std	Y+57, r26	; 0x39
    22ac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    22ae:	6f a9       	ldd	r22, Y+55	; 0x37
    22b0:	78 ad       	ldd	r23, Y+56	; 0x38
    22b2:	89 ad       	ldd	r24, Y+57	; 0x39
    22b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	1c f4       	brge	.+6      	; 0x22cc <LCD_Send_Command+0x524>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	8e ab       	std	Y+54, r24	; 0x36
    22ca:	91 c0       	rjmp	.+290    	; 0x23ee <LCD_Send_Command+0x646>
	else if (__tmp > 255)
    22cc:	6f a9       	ldd	r22, Y+55	; 0x37
    22ce:	78 ad       	ldd	r23, Y+56	; 0x38
    22d0:	89 ad       	ldd	r24, Y+57	; 0x39
    22d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	0c f0       	brlt	.+2      	; 0x22e6 <LCD_Send_Command+0x53e>
    22e4:	7b c0       	rjmp	.+246    	; 0x23dc <LCD_Send_Command+0x634>
	{
		_delay_ms(__us / 1000.0);
    22e6:	6b ad       	ldd	r22, Y+59	; 0x3b
    22e8:	7c ad       	ldd	r23, Y+60	; 0x3c
    22ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a e7       	ldi	r20, 0x7A	; 122
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8a ab       	std	Y+50, r24	; 0x32
    2300:	9b ab       	std	Y+51, r25	; 0x33
    2302:	ac ab       	std	Y+52, r26	; 0x34
    2304:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6a a9       	ldd	r22, Y+50	; 0x32
    2308:	7b a9       	ldd	r23, Y+51	; 0x33
    230a:	8c a9       	ldd	r24, Y+52	; 0x34
    230c:	9d a9       	ldd	r25, Y+53	; 0x35
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8e a7       	std	Y+46, r24	; 0x2e
    2320:	9f a7       	std	Y+47, r25	; 0x2f
    2322:	a8 ab       	std	Y+48, r26	; 0x30
    2324:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2326:	6e a5       	ldd	r22, Y+46	; 0x2e
    2328:	7f a5       	ldd	r23, Y+47	; 0x2f
    232a:	88 a9       	ldd	r24, Y+48	; 0x30
    232c:	99 a9       	ldd	r25, Y+49	; 0x31
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <LCD_Send_Command+0x5a0>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9d a7       	std	Y+45, r25	; 0x2d
    2344:	8c a7       	std	Y+44, r24	; 0x2c
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <LCD_Send_Command+0x61e>
	else if (__tmp > 65535)
    2348:	6e a5       	ldd	r22, Y+46	; 0x2e
    234a:	7f a5       	ldd	r23, Y+47	; 0x2f
    234c:	88 a9       	ldd	r24, Y+48	; 0x30
    234e:	99 a9       	ldd	r25, Y+49	; 0x31
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <LCD_Send_Command+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6a a9       	ldd	r22, Y+50	; 0x32
    2362:	7b a9       	ldd	r23, Y+51	; 0x33
    2364:	8c a9       	ldd	r24, Y+52	; 0x34
    2366:	9d a9       	ldd	r25, Y+53	; 0x35
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9d a7       	std	Y+45, r25	; 0x2d
    2386:	8c a7       	std	Y+44, r24	; 0x2c
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <LCD_Send_Command+0x600>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9b a7       	std	Y+43, r25	; 0x2b
    2390:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2392:	8a a5       	ldd	r24, Y+42	; 0x2a
    2394:	9b a5       	ldd	r25, Y+43	; 0x2b
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_Send_Command+0x5ee>
    239a:	9b a7       	std	Y+43, r25	; 0x2b
    239c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8c a5       	ldd	r24, Y+44	; 0x2c
    23a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9d a7       	std	Y+45, r25	; 0x2d
    23a6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    23aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <LCD_Send_Command+0x5e2>
    23b0:	24 c0       	rjmp	.+72     	; 0x23fa <LCD_Send_Command+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6e a5       	ldd	r22, Y+46	; 0x2e
    23b4:	7f a5       	ldd	r23, Y+47	; 0x2f
    23b6:	88 a9       	ldd	r24, Y+48	; 0x30
    23b8:	99 a9       	ldd	r25, Y+49	; 0x31
    23ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9d a7       	std	Y+45, r25	; 0x2d
    23c4:	8c a7       	std	Y+44, r24	; 0x2c
    23c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    23c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    23ca:	99 a7       	std	Y+41, r25	; 0x29
    23cc:	88 a7       	std	Y+40, r24	; 0x28
    23ce:	88 a5       	ldd	r24, Y+40	; 0x28
    23d0:	99 a5       	ldd	r25, Y+41	; 0x29
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_Send_Command+0x62a>
    23d6:	99 a7       	std	Y+41, r25	; 0x29
    23d8:	88 a7       	std	Y+40, r24	; 0x28
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_Send_Command+0x652>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23dc:	6f a9       	ldd	r22, Y+55	; 0x37
    23de:	78 ad       	ldd	r23, Y+56	; 0x38
    23e0:	89 ad       	ldd	r24, Y+57	; 0x39
    23e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    23e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8e ab       	std	Y+54, r24	; 0x36
    23ee:	8e a9       	ldd	r24, Y+54	; 0x36
    23f0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f2:	8f a1       	ldd	r24, Y+39	; 0x27
    23f4:	8a 95       	dec	r24
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_Send_Command+0x64c>
    23f8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_E_PIN, LOW);
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	67 e0       	ldi	r22, 0x07	; 7
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 ea       	ldi	r26, 0xA0	; 160
    240a:	b0 e4       	ldi	r27, 0x40	; 64
    240c:	8b a3       	std	Y+35, r24	; 0x23
    240e:	9c a3       	std	Y+36, r25	; 0x24
    2410:	ad a3       	std	Y+37, r26	; 0x25
    2412:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2414:	6b a1       	ldd	r22, Y+35	; 0x23
    2416:	7c a1       	ldd	r23, Y+36	; 0x24
    2418:	8d a1       	ldd	r24, Y+37	; 0x25
    241a:	9e a1       	ldd	r25, Y+38	; 0x26
    241c:	2b ea       	ldi	r18, 0xAB	; 171
    241e:	3a ea       	ldi	r19, 0xAA	; 170
    2420:	4a e2       	ldi	r20, 0x2A	; 42
    2422:	50 e4       	ldi	r21, 0x40	; 64
    2424:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8f 8f       	std	Y+31, r24	; 0x1f
    242e:	98 a3       	std	Y+32, r25	; 0x20
    2430:	a9 a3       	std	Y+33, r26	; 0x21
    2432:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2434:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2436:	78 a1       	ldd	r23, Y+32	; 0x20
    2438:	89 a1       	ldd	r24, Y+33	; 0x21
    243a:	9a a1       	ldd	r25, Y+34	; 0x22
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	1c f4       	brge	.+6      	; 0x2452 <LCD_Send_Command+0x6aa>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	8e 8f       	std	Y+30, r24	; 0x1e
    2450:	91 c0       	rjmp	.+290    	; 0x2574 <LCD_Send_Command+0x7cc>
	else if (__tmp > 255)
    2452:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2454:	78 a1       	ldd	r23, Y+32	; 0x20
    2456:	89 a1       	ldd	r24, Y+33	; 0x21
    2458:	9a a1       	ldd	r25, Y+34	; 0x22
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	53 e4       	ldi	r21, 0x43	; 67
    2462:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	0c f0       	brlt	.+2      	; 0x246c <LCD_Send_Command+0x6c4>
    246a:	7b c0       	rjmp	.+246    	; 0x2562 <LCD_Send_Command+0x7ba>
	{
		_delay_ms(__us / 1000.0);
    246c:	6b a1       	ldd	r22, Y+35	; 0x23
    246e:	7c a1       	ldd	r23, Y+36	; 0x24
    2470:	8d a1       	ldd	r24, Y+37	; 0x25
    2472:	9e a1       	ldd	r25, Y+38	; 0x26
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a e7       	ldi	r20, 0x7A	; 122
    247a:	54 e4       	ldi	r21, 0x44	; 68
    247c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	8a 8f       	std	Y+26, r24	; 0x1a
    2486:	9b 8f       	std	Y+27, r25	; 0x1b
    2488:	ac 8f       	std	Y+28, r26	; 0x1c
    248a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    248e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2490:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2492:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a ef       	ldi	r20, 0xFA	; 250
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8e 8b       	std	Y+22, r24	; 0x16
    24a6:	9f 8b       	std	Y+23, r25	; 0x17
    24a8:	a8 8f       	std	Y+24, r26	; 0x18
    24aa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    24ac:	6e 89       	ldd	r22, Y+22	; 0x16
    24ae:	7f 89       	ldd	r23, Y+23	; 0x17
    24b0:	88 8d       	ldd	r24, Y+24	; 0x18
    24b2:	99 8d       	ldd	r25, Y+25	; 0x19
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <LCD_Send_Command+0x726>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9d 8b       	std	Y+21, r25	; 0x15
    24ca:	8c 8b       	std	Y+20, r24	; 0x14
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <LCD_Send_Command+0x7a4>
	else if (__tmp > 65535)
    24ce:	6e 89       	ldd	r22, Y+22	; 0x16
    24d0:	7f 89       	ldd	r23, Y+23	; 0x17
    24d2:	88 8d       	ldd	r24, Y+24	; 0x18
    24d4:	99 8d       	ldd	r25, Y+25	; 0x19
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <LCD_Send_Command+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24e8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9d 8b       	std	Y+21, r25	; 0x15
    250c:	8c 8b       	std	Y+20, r24	; 0x14
    250e:	0f c0       	rjmp	.+30     	; 0x252e <LCD_Send_Command+0x786>
    2510:	88 ec       	ldi	r24, 0xC8	; 200
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9b 8b       	std	Y+19, r25	; 0x13
    2516:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2518:	8a 89       	ldd	r24, Y+18	; 0x12
    251a:	9b 89       	ldd	r25, Y+19	; 0x13
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_Send_Command+0x774>
    2520:	9b 8b       	std	Y+19, r25	; 0x13
    2522:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8c 89       	ldd	r24, Y+20	; 0x14
    2526:	9d 89       	ldd	r25, Y+21	; 0x15
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9d 8b       	std	Y+21, r25	; 0x15
    252c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8c 89       	ldd	r24, Y+20	; 0x14
    2530:	9d 89       	ldd	r25, Y+21	; 0x15
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <LCD_Send_Command+0x768>
    2536:	24 c0       	rjmp	.+72     	; 0x2580 <LCD_Send_Command+0x7d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6e 89       	ldd	r22, Y+22	; 0x16
    253a:	7f 89       	ldd	r23, Y+23	; 0x17
    253c:	88 8d       	ldd	r24, Y+24	; 0x18
    253e:	99 8d       	ldd	r25, Y+25	; 0x19
    2540:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9d 8b       	std	Y+21, r25	; 0x15
    254a:	8c 8b       	std	Y+20, r24	; 0x14
    254c:	8c 89       	ldd	r24, Y+20	; 0x14
    254e:	9d 89       	ldd	r25, Y+21	; 0x15
    2550:	99 8b       	std	Y+17, r25	; 0x11
    2552:	88 8b       	std	Y+16, r24	; 0x10
    2554:	88 89       	ldd	r24, Y+16	; 0x10
    2556:	99 89       	ldd	r25, Y+17	; 0x11
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_Send_Command+0x7b0>
    255c:	99 8b       	std	Y+17, r25	; 0x11
    255e:	88 8b       	std	Y+16, r24	; 0x10
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <LCD_Send_Command+0x7d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2562:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2564:	78 a1       	ldd	r23, Y+32	; 0x20
    2566:	89 a1       	ldd	r24, Y+33	; 0x21
    2568:	9a a1       	ldd	r25, Y+34	; 0x22
    256a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8e 8f       	std	Y+30, r24	; 0x1e
    2574:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2576:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2578:	8f 85       	ldd	r24, Y+15	; 0x0f
    257a:	8a 95       	dec	r24
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_Send_Command+0x7d2>
    257e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(5);
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_E_PIN, HIGH);
    2580:	83 e0       	ldi	r24, 0x03	; 3
    2582:	67 e0       	ldi	r22, 0x07	; 7
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	a0 e2       	ldi	r26, 0x20	; 32
    2590:	b1 e4       	ldi	r27, 0x41	; 65
    2592:	8b 87       	std	Y+11, r24	; 0x0b
    2594:	9c 87       	std	Y+12, r25	; 0x0c
    2596:	ad 87       	std	Y+13, r26	; 0x0d
    2598:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	8f 83       	std	Y+7, r24	; 0x07
    25b4:	98 87       	std	Y+8, r25	; 0x08
    25b6:	a9 87       	std	Y+9, r26	; 0x09
    25b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	2c f4       	brge	.+10     	; 0x25dc <LCD_Send_Command+0x834>
		__ticks = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	3f c0       	rjmp	.+126    	; 0x265a <LCD_Send_Command+0x8b2>
	else if (__tmp > 65535)
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	3f ef       	ldi	r19, 0xFF	; 255
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	57 e4       	ldi	r21, 0x47	; 71
    25ec:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	4c f5       	brge	.+82     	; 0x2646 <LCD_Send_Command+0x89e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	0f c0       	rjmp	.+30     	; 0x263c <LCD_Send_Command+0x894>
    261e:	88 ec       	ldi	r24, 0xC8	; 200
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_Send_Command+0x882>
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f7       	brne	.-38     	; 0x261e <LCD_Send_Command+0x876>
    2644:	14 c0       	rjmp	.+40     	; 0x266e <LCD_Send_Command+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_Send_Command+0x8be>
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    266e:	c1 59       	subi	r28, 0x91	; 145
    2670:	df 4f       	sbci	r29, 0xFF	; 255
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	08 95       	ret

00002686 <LCD_Send_Data>:

void LCD_Send_Data(u8 data) {
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	cf 56       	subi	r28, 0x6F	; 111
    2694:	d0 40       	sbci	r29, 0x00	; 0
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	fe 01       	movw	r30, r28
    26a2:	e1 59       	subi	r30, 0x91	; 145
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 83       	st	Z, r24
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_RS_PIN, HIGH);
    26a8:	83 e0       	ldi	r24, 0x03	; 3
    26aa:	64 e0       	ldi	r22, 0x04	; 4
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    26b2:	fe 01       	movw	r30, r28
    26b4:	e5 59       	subi	r30, 0x95	; 149
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e8       	ldi	r26, 0x80	; 128
    26be:	bf e3       	ldi	r27, 0x3F	; 63
    26c0:	80 83       	st	Z, r24
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	a2 83       	std	Z+2, r26	; 0x02
    26c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26c8:	8e 01       	movw	r16, r28
    26ca:	09 59       	subi	r16, 0x99	; 153
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	e5 59       	subi	r30, 0x95	; 149
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	2b ea       	ldi	r18, 0xAB	; 171
    26de:	3a ea       	ldi	r19, 0xAA	; 170
    26e0:	4a e2       	ldi	r20, 0x2A	; 42
    26e2:	50 e4       	ldi	r21, 0x40	; 64
    26e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	f8 01       	movw	r30, r16
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	a2 83       	std	Z+2, r26	; 0x02
    26f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e9 59       	subi	r30, 0x99	; 153
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	34 f4       	brge	.+12     	; 0x2720 <LCD_Send_Data+0x9a>
		__ticks = 1;
    2714:	fe 01       	movw	r30, r28
    2716:	ea 59       	subi	r30, 0x9A	; 154
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	80 83       	st	Z, r24
    271e:	e0 c0       	rjmp	.+448    	; 0x28e0 <LCD_Send_Data+0x25a>
	else if (__tmp > 255)
    2720:	fe 01       	movw	r30, r28
    2722:	e9 59       	subi	r30, 0x99	; 153
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	53 e4       	ldi	r21, 0x43	; 67
    2736:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	0c f0       	brlt	.+2      	; 0x2740 <LCD_Send_Data+0xba>
    273e:	c0 c0       	rjmp	.+384    	; 0x28c0 <LCD_Send_Data+0x23a>
	{
		_delay_ms(__us / 1000.0);
    2740:	fe 01       	movw	r30, r28
    2742:	e5 59       	subi	r30, 0x95	; 149
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a e7       	ldi	r20, 0x7A	; 122
    2754:	54 e4       	ldi	r21, 0x44	; 68
    2756:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	fe 01       	movw	r30, r28
    2760:	ee 59       	subi	r30, 0x9E	; 158
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 83       	st	Z, r24
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	a2 83       	std	Z+2, r26	; 0x02
    276a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	8e 01       	movw	r16, r28
    276e:	02 5a       	subi	r16, 0xA2	; 162
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	fe 01       	movw	r30, r28
    2774:	ee 59       	subi	r30, 0x9E	; 158
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	f8 01       	movw	r30, r16
    2792:	80 83       	st	Z, r24
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	a2 83       	std	Z+2, r26	; 0x02
    2798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    279a:	fe 01       	movw	r30, r28
    279c:	e2 5a       	subi	r30, 0xA2	; 162
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e8       	ldi	r20, 0x80	; 128
    27ae:	5f e3       	ldi	r21, 0x3F	; 63
    27b0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	44 f4       	brge	.+16     	; 0x27c8 <LCD_Send_Data+0x142>
		__ticks = 1;
    27b8:	fe 01       	movw	r30, r28
    27ba:	e4 5a       	subi	r30, 0xA4	; 164
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	64 c0       	rjmp	.+200    	; 0x2890 <LCD_Send_Data+0x20a>
	else if (__tmp > 65535)
    27c8:	fe 01       	movw	r30, r28
    27ca:	e2 5a       	subi	r30, 0xA2	; 162
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	0c f0       	brlt	.+2      	; 0x27e8 <LCD_Send_Data+0x162>
    27e6:	43 c0       	rjmp	.+134    	; 0x286e <LCD_Send_Data+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	fe 01       	movw	r30, r28
    27ea:	ee 59       	subi	r30, 0x9E	; 158
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8e 01       	movw	r16, r28
    2808:	04 5a       	subi	r16, 0xA4	; 164
    280a:	1f 4f       	sbci	r17, 0xFF	; 255
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	f8 01       	movw	r30, r16
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	1f c0       	rjmp	.+62     	; 0x285e <LCD_Send_Data+0x1d8>
    2820:	fe 01       	movw	r30, r28
    2822:	e6 5a       	subi	r30, 0xA6	; 166
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	88 ec       	ldi	r24, 0xC8	; 200
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
    282e:	fe 01       	movw	r30, r28
    2830:	e6 5a       	subi	r30, 0xA6	; 166
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_Send_Data+0x1b2>
    283c:	fe 01       	movw	r30, r28
    283e:	e6 5a       	subi	r30, 0xA6	; 166
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2846:	de 01       	movw	r26, r28
    2848:	a4 5a       	subi	r26, 0xA4	; 164
    284a:	bf 4f       	sbci	r27, 0xFF	; 255
    284c:	fe 01       	movw	r30, r28
    284e:	e4 5a       	subi	r30, 0xA4	; 164
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	11 96       	adiw	r26, 0x01	; 1
    285a:	9c 93       	st	X, r25
    285c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	fe 01       	movw	r30, r28
    2860:	e4 5a       	subi	r30, 0xA4	; 164
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	d1 f6       	brne	.-76     	; 0x2820 <LCD_Send_Data+0x19a>
    286c:	4b c0       	rjmp	.+150    	; 0x2904 <LCD_Send_Data+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286e:	8e 01       	movw	r16, r28
    2870:	04 5a       	subi	r16, 0xA4	; 164
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	fe 01       	movw	r30, r28
    2876:	e2 5a       	subi	r30, 0xA2	; 162
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	f8 01       	movw	r30, r16
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	de 01       	movw	r26, r28
    2892:	a8 5a       	subi	r26, 0xA8	; 168
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	e4 5a       	subi	r30, 0xA4	; 164
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	11 96       	adiw	r26, 0x01	; 1
    28a2:	9c 93       	st	X, r25
    28a4:	8e 93       	st	-X, r24
    28a6:	fe 01       	movw	r30, r28
    28a8:	e8 5a       	subi	r30, 0xA8	; 168
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <LCD_Send_Data+0x22a>
    28b4:	fe 01       	movw	r30, r28
    28b6:	e8 5a       	subi	r30, 0xA8	; 168
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
    28be:	22 c0       	rjmp	.+68     	; 0x2904 <LCD_Send_Data+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28c0:	8e 01       	movw	r16, r28
    28c2:	0a 59       	subi	r16, 0x9A	; 154
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	e9 59       	subi	r30, 0x99	; 153
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	80 83       	st	Z, r24
    28e0:	de 01       	movw	r26, r28
    28e2:	a9 5a       	subi	r26, 0xA9	; 169
    28e4:	bf 4f       	sbci	r27, 0xFF	; 255
    28e6:	fe 01       	movw	r30, r28
    28e8:	ea 59       	subi	r30, 0x9A	; 154
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	80 81       	ld	r24, Z
    28ee:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28f0:	fe 01       	movw	r30, r28
    28f2:	e9 5a       	subi	r30, 0xA9	; 169
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 81       	ld	r24, Z
    28f8:	8a 95       	dec	r24
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_Send_Data+0x272>
    28fc:	fe 01       	movw	r30, r28
    28fe:	e9 5a       	subi	r30, 0xA9	; 169
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_E_PIN, HIGH);
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	67 e0       	ldi	r22, 0x07	; 7
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    290e:	fe 01       	movw	r30, r28
    2910:	ed 5a       	subi	r30, 0xAD	; 173
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 e8       	ldi	r26, 0x80	; 128
    291a:	bf e3       	ldi	r27, 0x3F	; 63
    291c:	80 83       	st	Z, r24
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	a2 83       	std	Z+2, r26	; 0x02
    2922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2924:	8e 01       	movw	r16, r28
    2926:	01 5b       	subi	r16, 0xB1	; 177
    2928:	1f 4f       	sbci	r17, 0xFF	; 255
    292a:	fe 01       	movw	r30, r28
    292c:	ed 5a       	subi	r30, 0xAD	; 173
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	2b ea       	ldi	r18, 0xAB	; 171
    293a:	3a ea       	ldi	r19, 0xAA	; 170
    293c:	4a e2       	ldi	r20, 0x2A	; 42
    293e:	50 e4       	ldi	r21, 0x40	; 64
    2940:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	f8 01       	movw	r30, r16
    294a:	80 83       	st	Z, r24
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	a2 83       	std	Z+2, r26	; 0x02
    2950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2952:	fe 01       	movw	r30, r28
    2954:	e1 5b       	subi	r30, 0xB1	; 177
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	34 f4       	brge	.+12     	; 0x297c <LCD_Send_Data+0x2f6>
		__ticks = 1;
    2970:	fe 01       	movw	r30, r28
    2972:	e2 5b       	subi	r30, 0xB2	; 178
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 83       	st	Z, r24
    297a:	e0 c0       	rjmp	.+448    	; 0x2b3c <LCD_Send_Data+0x4b6>
	else if (__tmp > 255)
    297c:	fe 01       	movw	r30, r28
    297e:	e1 5b       	subi	r30, 0xB1	; 177
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	4f e7       	ldi	r20, 0x7F	; 127
    2990:	53 e4       	ldi	r21, 0x43	; 67
    2992:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2996:	18 16       	cp	r1, r24
    2998:	0c f0       	brlt	.+2      	; 0x299c <LCD_Send_Data+0x316>
    299a:	c0 c0       	rjmp	.+384    	; 0x2b1c <LCD_Send_Data+0x496>
	{
		_delay_ms(__us / 1000.0);
    299c:	fe 01       	movw	r30, r28
    299e:	ed 5a       	subi	r30, 0xAD	; 173
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4a e7       	ldi	r20, 0x7A	; 122
    29b0:	54 e4       	ldi	r21, 0x44	; 68
    29b2:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	fe 01       	movw	r30, r28
    29bc:	e6 5b       	subi	r30, 0xB6	; 182
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 83       	st	Z, r24
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	a2 83       	std	Z+2, r26	; 0x02
    29c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	8e 01       	movw	r16, r28
    29ca:	0a 5b       	subi	r16, 0xBA	; 186
    29cc:	1f 4f       	sbci	r17, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	e6 5b       	subi	r30, 0xB6	; 182
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4a ef       	ldi	r20, 0xFA	; 250
    29e2:	54 e4       	ldi	r21, 0x44	; 68
    29e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	80 83       	st	Z, r24
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	a2 83       	std	Z+2, r26	; 0x02
    29f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f6:	fe 01       	movw	r30, r28
    29f8:	ea 5b       	subi	r30, 0xBA	; 186
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	44 f4       	brge	.+16     	; 0x2a24 <LCD_Send_Data+0x39e>
		__ticks = 1;
    2a14:	fe 01       	movw	r30, r28
    2a16:	ec 5b       	subi	r30, 0xBC	; 188
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    2a22:	64 c0       	rjmp	.+200    	; 0x2aec <LCD_Send_Data+0x466>
	else if (__tmp > 65535)
    2a24:	fe 01       	movw	r30, r28
    2a26:	ea 5b       	subi	r30, 0xBA	; 186
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f e7       	ldi	r20, 0x7F	; 127
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	0c f0       	brlt	.+2      	; 0x2a44 <LCD_Send_Data+0x3be>
    2a42:	43 c0       	rjmp	.+134    	; 0x2aca <LCD_Send_Data+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a44:	fe 01       	movw	r30, r28
    2a46:	e6 5b       	subi	r30, 0xB6	; 182
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8e 01       	movw	r16, r28
    2a64:	0c 5b       	subi	r16, 0xBC	; 188
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	1f c0       	rjmp	.+62     	; 0x2aba <LCD_Send_Data+0x434>
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ee 5b       	subi	r30, 0xBE	; 190
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ee 5b       	subi	r30, 0xBE	; 190
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <LCD_Send_Data+0x40e>
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ee 5b       	subi	r30, 0xBE	; 190
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	de 01       	movw	r26, r28
    2aa4:	ac 5b       	subi	r26, 0xBC	; 188
    2aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ec 5b       	subi	r30, 0xBC	; 188
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	11 96       	adiw	r26, 0x01	; 1
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aba:	fe 01       	movw	r30, r28
    2abc:	ec 5b       	subi	r30, 0xBC	; 188
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	d1 f6       	brne	.-76     	; 0x2a7c <LCD_Send_Data+0x3f6>
    2ac8:	42 c0       	rjmp	.+132    	; 0x2b4e <LCD_Send_Data+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	8e 01       	movw	r16, r28
    2acc:	0c 5b       	subi	r16, 0xBC	; 188
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ea 5b       	subi	r30, 0xBA	; 186
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
    2aec:	de 01       	movw	r26, r28
    2aee:	a0 5c       	subi	r26, 0xC0	; 192
    2af0:	bf 4f       	sbci	r27, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	ec 5b       	subi	r30, 0xBC	; 188
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	11 96       	adiw	r26, 0x01	; 1
    2afe:	9c 93       	st	X, r25
    2b00:	8e 93       	st	-X, r24
    2b02:	fe 01       	movw	r30, r28
    2b04:	e0 5c       	subi	r30, 0xC0	; 192
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_Send_Data+0x486>
    2b10:	fe 01       	movw	r30, r28
    2b12:	e0 5c       	subi	r30, 0xC0	; 192
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
    2b1a:	19 c0       	rjmp	.+50     	; 0x2b4e <LCD_Send_Data+0x4c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b1c:	8e 01       	movw	r16, r28
    2b1e:	02 5b       	subi	r16, 0xB2	; 178
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255
    2b22:	fe 01       	movw	r30, r28
    2b24:	e1 5b       	subi	r30, 0xB1	; 177
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	80 83       	st	Z, r24
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e2 5b       	subi	r30, 0xB2	; 178
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b46:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b48:	8a 95       	dec	r24
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_Send_Data+0x4c2>
    2b4c:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_SetGroupValue(LCD_GROUP_DATA, data);
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e1 59       	subi	r30, 0x91	; 145
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	60 81       	ld	r22, Z
    2b58:	0e 94 6f 0a 	call	0x14de	; 0x14de <DIO_SetGroupValue>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a0 e8       	ldi	r26, 0x80	; 128
    2b62:	bf e3       	ldi	r27, 0x3F	; 63
    2b64:	8b af       	std	Y+59, r24	; 0x3b
    2b66:	9c af       	std	Y+60, r25	; 0x3c
    2b68:	ad af       	std	Y+61, r26	; 0x3d
    2b6a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b6c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b6e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b70:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b72:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b74:	2b ea       	ldi	r18, 0xAB	; 171
    2b76:	3a ea       	ldi	r19, 0xAA	; 170
    2b78:	4a e2       	ldi	r20, 0x2A	; 42
    2b7a:	50 e4       	ldi	r21, 0x40	; 64
    2b7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8f ab       	std	Y+55, r24	; 0x37
    2b86:	98 af       	std	Y+56, r25	; 0x38
    2b88:	a9 af       	std	Y+57, r26	; 0x39
    2b8a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2b8c:	6f a9       	ldd	r22, Y+55	; 0x37
    2b8e:	78 ad       	ldd	r23, Y+56	; 0x38
    2b90:	89 ad       	ldd	r24, Y+57	; 0x39
    2b92:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	1c f4       	brge	.+6      	; 0x2baa <LCD_Send_Data+0x524>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	8e ab       	std	Y+54, r24	; 0x36
    2ba8:	91 c0       	rjmp	.+290    	; 0x2ccc <LCD_Send_Data+0x646>
	else if (__tmp > 255)
    2baa:	6f a9       	ldd	r22, Y+55	; 0x37
    2bac:	78 ad       	ldd	r23, Y+56	; 0x38
    2bae:	89 ad       	ldd	r24, Y+57	; 0x39
    2bb0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	53 e4       	ldi	r21, 0x43	; 67
    2bba:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	0c f0       	brlt	.+2      	; 0x2bc4 <LCD_Send_Data+0x53e>
    2bc2:	7b c0       	rjmp	.+246    	; 0x2cba <LCD_Send_Data+0x634>
	{
		_delay_ms(__us / 1000.0);
    2bc4:	6b ad       	ldd	r22, Y+59	; 0x3b
    2bc6:	7c ad       	ldd	r23, Y+60	; 0x3c
    2bc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bca:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	4a e7       	ldi	r20, 0x7A	; 122
    2bd2:	54 e4       	ldi	r21, 0x44	; 68
    2bd4:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8a ab       	std	Y+50, r24	; 0x32
    2bde:	9b ab       	std	Y+51, r25	; 0x33
    2be0:	ac ab       	std	Y+52, r26	; 0x34
    2be2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	6a a9       	ldd	r22, Y+50	; 0x32
    2be6:	7b a9       	ldd	r23, Y+51	; 0x33
    2be8:	8c a9       	ldd	r24, Y+52	; 0x34
    2bea:	9d a9       	ldd	r25, Y+53	; 0x35
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4a ef       	ldi	r20, 0xFA	; 250
    2bf2:	54 e4       	ldi	r21, 0x44	; 68
    2bf4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8e a7       	std	Y+46, r24	; 0x2e
    2bfe:	9f a7       	std	Y+47, r25	; 0x2f
    2c00:	a8 ab       	std	Y+48, r26	; 0x30
    2c02:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c04:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c06:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c08:	88 a9       	ldd	r24, Y+48	; 0x30
    2c0a:	99 a9       	ldd	r25, Y+49	; 0x31
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	2c f4       	brge	.+10     	; 0x2c26 <LCD_Send_Data+0x5a0>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9d a7       	std	Y+45, r25	; 0x2d
    2c22:	8c a7       	std	Y+44, r24	; 0x2c
    2c24:	3f c0       	rjmp	.+126    	; 0x2ca4 <LCD_Send_Data+0x61e>
	else if (__tmp > 65535)
    2c26:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c28:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c2a:	88 a9       	ldd	r24, Y+48	; 0x30
    2c2c:	99 a9       	ldd	r25, Y+49	; 0x31
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	57 e4       	ldi	r21, 0x47	; 71
    2c36:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	4c f5       	brge	.+82     	; 0x2c90 <LCD_Send_Data+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	6a a9       	ldd	r22, Y+50	; 0x32
    2c40:	7b a9       	ldd	r23, Y+51	; 0x33
    2c42:	8c a9       	ldd	r24, Y+52	; 0x34
    2c44:	9d a9       	ldd	r25, Y+53	; 0x35
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9d a7       	std	Y+45, r25	; 0x2d
    2c64:	8c a7       	std	Y+44, r24	; 0x2c
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <LCD_Send_Data+0x600>
    2c68:	88 ec       	ldi	r24, 0xC8	; 200
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9b a7       	std	Y+43, r25	; 0x2b
    2c6e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c70:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c72:	9b a5       	ldd	r25, Y+43	; 0x2b
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <LCD_Send_Data+0x5ee>
    2c78:	9b a7       	std	Y+43, r25	; 0x2b
    2c7a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	9d a7       	std	Y+45, r25	; 0x2d
    2c84:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c88:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <LCD_Send_Data+0x5e2>
    2c8e:	24 c0       	rjmp	.+72     	; 0x2cd8 <LCD_Send_Data+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c92:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c94:	88 a9       	ldd	r24, Y+48	; 0x30
    2c96:	99 a9       	ldd	r25, Y+49	; 0x31
    2c98:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9d a7       	std	Y+45, r25	; 0x2d
    2ca2:	8c a7       	std	Y+44, r24	; 0x2c
    2ca4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ca6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ca8:	99 a7       	std	Y+41, r25	; 0x29
    2caa:	88 a7       	std	Y+40, r24	; 0x28
    2cac:	88 a5       	ldd	r24, Y+40	; 0x28
    2cae:	99 a5       	ldd	r25, Y+41	; 0x29
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <LCD_Send_Data+0x62a>
    2cb4:	99 a7       	std	Y+41, r25	; 0x29
    2cb6:	88 a7       	std	Y+40, r24	; 0x28
    2cb8:	0f c0       	rjmp	.+30     	; 0x2cd8 <LCD_Send_Data+0x652>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cba:	6f a9       	ldd	r22, Y+55	; 0x37
    2cbc:	78 ad       	ldd	r23, Y+56	; 0x38
    2cbe:	89 ad       	ldd	r24, Y+57	; 0x39
    2cc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cc2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8e ab       	std	Y+54, r24	; 0x36
    2ccc:	8e a9       	ldd	r24, Y+54	; 0x36
    2cce:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cd0:	8f a1       	ldd	r24, Y+39	; 0x27
    2cd2:	8a 95       	dec	r24
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <LCD_Send_Data+0x64c>
    2cd6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_E_PIN, LOW);
    2cd8:	83 e0       	ldi	r24, 0x03	; 3
    2cda:	67 e0       	ldi	r22, 0x07	; 7
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	a0 ea       	ldi	r26, 0xA0	; 160
    2ce8:	b0 e4       	ldi	r27, 0x40	; 64
    2cea:	8b a3       	std	Y+35, r24	; 0x23
    2cec:	9c a3       	std	Y+36, r25	; 0x24
    2cee:	ad a3       	std	Y+37, r26	; 0x25
    2cf0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfa:	2b ea       	ldi	r18, 0xAB	; 171
    2cfc:	3a ea       	ldi	r19, 0xAA	; 170
    2cfe:	4a e2       	ldi	r20, 0x2A	; 42
    2d00:	50 e4       	ldi	r21, 0x40	; 64
    2d02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d0c:	98 a3       	std	Y+32, r25	; 0x20
    2d0e:	a9 a3       	std	Y+33, r26	; 0x21
    2d10:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d12:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d14:	78 a1       	ldd	r23, Y+32	; 0x20
    2d16:	89 a1       	ldd	r24, Y+33	; 0x21
    2d18:	9a a1       	ldd	r25, Y+34	; 0x22
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e8       	ldi	r20, 0x80	; 128
    2d20:	5f e3       	ldi	r21, 0x3F	; 63
    2d22:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d26:	88 23       	and	r24, r24
    2d28:	1c f4       	brge	.+6      	; 0x2d30 <LCD_Send_Data+0x6aa>
		__ticks = 1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d2e:	91 c0       	rjmp	.+290    	; 0x2e52 <LCD_Send_Data+0x7cc>
	else if (__tmp > 255)
    2d30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d32:	78 a1       	ldd	r23, Y+32	; 0x20
    2d34:	89 a1       	ldd	r24, Y+33	; 0x21
    2d36:	9a a1       	ldd	r25, Y+34	; 0x22
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	53 e4       	ldi	r21, 0x43	; 67
    2d40:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	0c f0       	brlt	.+2      	; 0x2d4a <LCD_Send_Data+0x6c4>
    2d48:	7b c0       	rjmp	.+246    	; 0x2e40 <LCD_Send_Data+0x7ba>
	{
		_delay_ms(__us / 1000.0);
    2d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d50:	9e a1       	ldd	r25, Y+38	; 0x26
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4a e7       	ldi	r20, 0x7A	; 122
    2d58:	54 e4       	ldi	r21, 0x44	; 68
    2d5a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	8a 8f       	std	Y+26, r24	; 0x1a
    2d64:	9b 8f       	std	Y+27, r25	; 0x1b
    2d66:	ac 8f       	std	Y+28, r26	; 0x1c
    2d68:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d6c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d70:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a ef       	ldi	r20, 0xFA	; 250
    2d78:	54 e4       	ldi	r21, 0x44	; 68
    2d7a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	8e 8b       	std	Y+22, r24	; 0x16
    2d84:	9f 8b       	std	Y+23, r25	; 0x17
    2d86:	a8 8f       	std	Y+24, r26	; 0x18
    2d88:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2d8a:	6e 89       	ldd	r22, Y+22	; 0x16
    2d8c:	7f 89       	ldd	r23, Y+23	; 0x17
    2d8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2d90:	99 8d       	ldd	r25, Y+25	; 0x19
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <LCD_Send_Data+0x726>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9d 8b       	std	Y+21, r25	; 0x15
    2da8:	8c 8b       	std	Y+20, r24	; 0x14
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <LCD_Send_Data+0x7a4>
	else if (__tmp > 65535)
    2dac:	6e 89       	ldd	r22, Y+22	; 0x16
    2dae:	7f 89       	ldd	r23, Y+23	; 0x17
    2db0:	88 8d       	ldd	r24, Y+24	; 0x18
    2db2:	99 8d       	ldd	r25, Y+25	; 0x19
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <LCD_Send_Data+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2dc6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2dc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9d 8b       	std	Y+21, r25	; 0x15
    2dea:	8c 8b       	std	Y+20, r24	; 0x14
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <LCD_Send_Data+0x786>
    2dee:	88 ec       	ldi	r24, 0xC8	; 200
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9b 8b       	std	Y+19, r25	; 0x13
    2df4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2df6:	8a 89       	ldd	r24, Y+18	; 0x12
    2df8:	9b 89       	ldd	r25, Y+19	; 0x13
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_Send_Data+0x774>
    2dfe:	9b 8b       	std	Y+19, r25	; 0x13
    2e00:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	8c 89       	ldd	r24, Y+20	; 0x14
    2e04:	9d 89       	ldd	r25, Y+21	; 0x15
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	9d 8b       	std	Y+21, r25	; 0x15
    2e0a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	8c 89       	ldd	r24, Y+20	; 0x14
    2e0e:	9d 89       	ldd	r25, Y+21	; 0x15
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <LCD_Send_Data+0x768>
    2e14:	24 c0       	rjmp	.+72     	; 0x2e5e <LCD_Send_Data+0x7d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	6e 89       	ldd	r22, Y+22	; 0x16
    2e18:	7f 89       	ldd	r23, Y+23	; 0x17
    2e1a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e1c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e1e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9d 8b       	std	Y+21, r25	; 0x15
    2e28:	8c 8b       	std	Y+20, r24	; 0x14
    2e2a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e2c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e2e:	99 8b       	std	Y+17, r25	; 0x11
    2e30:	88 8b       	std	Y+16, r24	; 0x10
    2e32:	88 89       	ldd	r24, Y+16	; 0x10
    2e34:	99 89       	ldd	r25, Y+17	; 0x11
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <LCD_Send_Data+0x7b0>
    2e3a:	99 8b       	std	Y+17, r25	; 0x11
    2e3c:	88 8b       	std	Y+16, r24	; 0x10
    2e3e:	0f c0       	rjmp	.+30     	; 0x2e5e <LCD_Send_Data+0x7d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e42:	78 a1       	ldd	r23, Y+32	; 0x20
    2e44:	89 a1       	ldd	r24, Y+33	; 0x21
    2e46:	9a a1       	ldd	r25, Y+34	; 0x22
    2e48:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	8e 8f       	std	Y+30, r24	; 0x1e
    2e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e54:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e58:	8a 95       	dec	r24
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <LCD_Send_Data+0x7d2>
    2e5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(5);
	DIO_SetPinValue(LCD_GROUP_CONTROL, LCD_E_PIN, HIGH);
    2e5e:	83 e0       	ldi	r24, 0x03	; 3
    2e60:	67 e0       	ldi	r22, 0x07	; 7
    2e62:	41 e0       	ldi	r20, 0x01	; 1
    2e64:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	a0 e2       	ldi	r26, 0x20	; 32
    2e6e:	b1 e4       	ldi	r27, 0x41	; 65
    2e70:	8b 87       	std	Y+11, r24	; 0x0b
    2e72:	9c 87       	std	Y+12, r25	; 0x0c
    2e74:	ad 87       	std	Y+13, r26	; 0x0d
    2e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	4a ef       	ldi	r20, 0xFA	; 250
    2e86:	54 e4       	ldi	r21, 0x44	; 68
    2e88:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	8f 83       	std	Y+7, r24	; 0x07
    2e92:	98 87       	std	Y+8, r25	; 0x08
    2e94:	a9 87       	std	Y+9, r26	; 0x09
    2e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e98:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9a:	78 85       	ldd	r23, Y+8	; 0x08
    2e9c:	89 85       	ldd	r24, Y+9	; 0x09
    2e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5f e3       	ldi	r21, 0x3F	; 63
    2ea8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	2c f4       	brge	.+10     	; 0x2eba <LCD_Send_Data+0x834>
		__ticks = 1;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
    2eb8:	3f c0       	rjmp	.+126    	; 0x2f38 <LCD_Send_Data+0x8b2>
	else if (__tmp > 65535)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	3f ef       	ldi	r19, 0xFF	; 255
    2ec6:	4f e7       	ldi	r20, 0x7F	; 127
    2ec8:	57 e4       	ldi	r21, 0x47	; 71
    2eca:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ece:	18 16       	cp	r1, r24
    2ed0:	4c f5       	brge	.+82     	; 0x2f24 <LCD_Send_Data+0x89e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e2       	ldi	r20, 0x20	; 32
    2ee0:	51 e4       	ldi	r21, 0x41	; 65
    2ee2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	0f c0       	rjmp	.+30     	; 0x2f1a <LCD_Send_Data+0x894>
    2efc:	88 ec       	ldi	r24, 0xC8	; 200
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	9c 81       	ldd	r25, Y+4	; 0x04
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <LCD_Send_Data+0x882>
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	9e 81       	ldd	r25, Y+6	; 0x06
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	69 f7       	brne	.-38     	; 0x2efc <LCD_Send_Data+0x876>
    2f22:	14 c0       	rjmp	.+40     	; 0x2f4c <LCD_Send_Data+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f24:	6f 81       	ldd	r22, Y+7	; 0x07
    2f26:	78 85       	ldd	r23, Y+8	; 0x08
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_Send_Data+0x8be>
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2f4c:	c1 59       	subi	r28, 0x91	; 145
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	08 95       	ret

00002f64 <LCD_Send_string>:

void LCD_Send_string(u8 *ptr) {
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <LCD_Send_string+0x6>
    2f6a:	0f 92       	push	r0
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	9b 83       	std	Y+3, r25	; 0x03
    2f72:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    2f74:	19 82       	std	Y+1, r1	; 0x01
    2f76:	0e c0       	rjmp	.+28     	; 0x2f94 <LCD_Send_string+0x30>
	while (ptr[index] != '\0') {
		LCD_Send_Data(ptr[index]);
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	fc 01       	movw	r30, r24
    2f84:	e2 0f       	add	r30, r18
    2f86:	f3 1f       	adc	r31, r19
    2f88:	80 81       	ld	r24, Z
    2f8a:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_Send_Data>
		index++;
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	8f 5f       	subi	r24, 0xFF	; 255
    2f92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}

void LCD_Send_string(u8 *ptr) {
	u8 index = 0;
	while (ptr[index] != '\0') {
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	e2 0f       	add	r30, r18
    2fa2:	f3 1f       	adc	r31, r19
    2fa4:	80 81       	ld	r24, Z
    2fa6:	88 23       	and	r24, r24
    2fa8:	39 f7       	brne	.-50     	; 0x2f78 <LCD_Send_string+0x14>
		LCD_Send_Data(ptr[index]);
		index++;
	}

}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <LCD_Clear>:

void LCD_Clear(void) {
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(LCD_CLEAR);
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
}
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <LCD_GOTOXY>:

void LCD_GOTOXY(u8 raw, u8 col) {
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <LCD_GOTOXY+0x6>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <LCD_GOTOXY+0x8>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	6a 83       	std	Y+2, r22	; 0x02

	switch (raw) {
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	3c 83       	std	Y+4, r19	; 0x04
    2fe2:	2b 83       	std	Y+3, r18	; 0x03
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	91 05       	cpc	r25, r1
    2fec:	31 f0       	breq	.+12     	; 0x2ffa <LCD_GOTOXY+0x30>
    2fee:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff2:	22 30       	cpi	r18, 0x02	; 2
    2ff4:	31 05       	cpc	r19, r1
    2ff6:	31 f0       	breq	.+12     	; 0x3004 <LCD_GOTOXY+0x3a>
    2ff8:	0a c0       	rjmp	.+20     	; 0x300e <LCD_GOTOXY+0x44>
	case 1:
		LCD_Send_Command((0x00 + col) | (0x80));
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	80 68       	ori	r24, 0x80	; 128
    2ffe:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
    3002:	05 c0       	rjmp	.+10     	; 0x300e <LCD_GOTOXY+0x44>
		break;
	case 2:
		LCD_Send_Command((0x40 + col) | (0x80));
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	80 5c       	subi	r24, 0xC0	; 192
    3008:	80 68       	ori	r24, 0x80	; 128
    300a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_Send_Command>
		break;
	default:
		break;
	}

}
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <Get_key_pad_pressed>:
u8 key_pad_arr[4][4] = { { 1, 2, 3, 'A' }, { 4, 5, 6, 'B' }, { 7, 8, 9, 'C' }, {
		'*', 0, '#', 'D' }

};

u8 Get_key_pad_pressed() {
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	60 97       	sbiw	r28, 0x10	; 16
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
	while (1) {
		for (u8 i = 0; i < ROW_NO; i++) {
    3030:	18 8a       	std	Y+16, r1	; 0x10
    3032:	bc c0       	rjmp	.+376    	; 0x31ac <Get_key_pad_pressed+0x190>
			DIO_SetGroupDirection(KEY_PAD_GROUP, (0b00010000) << i);
    3034:	88 89       	ldd	r24, Y+16	; 0x10
    3036:	28 2f       	mov	r18, r24
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	80 e1       	ldi	r24, 0x10	; 16
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <Get_key_pad_pressed+0x28>
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	2a 95       	dec	r18
    3046:	e2 f7       	brpl	.-8      	; 0x3040 <Get_key_pad_pressed+0x24>
    3048:	98 2f       	mov	r25, r24
    304a:	83 e0       	ldi	r24, 0x03	; 3
    304c:	69 2f       	mov	r22, r25
    304e:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_SetGroupDirection>
			DIO_SetGroupValue(KEY_PAD_GROUP, (~((0b00010000) << i)));
    3052:	88 89       	ldd	r24, Y+16	; 0x10
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	80 e1       	ldi	r24, 0x10	; 16
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <Get_key_pad_pressed+0x46>
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	2a 95       	dec	r18
    3064:	e2 f7       	brpl	.-8      	; 0x305e <Get_key_pad_pressed+0x42>
    3066:	98 2f       	mov	r25, r24
    3068:	90 95       	com	r25
    306a:	83 e0       	ldi	r24, 0x03	; 3
    306c:	69 2f       	mov	r22, r25
    306e:	0e 94 6f 0a 	call	0x14de	; 0x14de <DIO_SetGroupValue>
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	a8 e4       	ldi	r26, 0x48	; 72
    3078:	b2 e4       	ldi	r27, 0x42	; 66
    307a:	8b 87       	std	Y+11, r24	; 0x0b
    307c:	9c 87       	std	Y+12, r25	; 0x0c
    307e:	ad 87       	std	Y+13, r26	; 0x0d
    3080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3082:	6b 85       	ldd	r22, Y+11	; 0x0b
    3084:	7c 85       	ldd	r23, Y+12	; 0x0c
    3086:	8d 85       	ldd	r24, Y+13	; 0x0d
    3088:	9e 85       	ldd	r25, Y+14	; 0x0e
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	4a ef       	ldi	r20, 0xFA	; 250
    3090:	54 e4       	ldi	r21, 0x44	; 68
    3092:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	8f 83       	std	Y+7, r24	; 0x07
    309c:	98 87       	std	Y+8, r25	; 0x08
    309e:	a9 87       	std	Y+9, r26	; 0x09
    30a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a2:	6f 81       	ldd	r22, Y+7	; 0x07
    30a4:	78 85       	ldd	r23, Y+8	; 0x08
    30a6:	89 85       	ldd	r24, Y+9	; 0x09
    30a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e8       	ldi	r20, 0x80	; 128
    30b0:	5f e3       	ldi	r21, 0x3F	; 63
    30b2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    30b6:	88 23       	and	r24, r24
    30b8:	2c f4       	brge	.+10     	; 0x30c4 <Get_key_pad_pressed+0xa8>
		__ticks = 1;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	9e 83       	std	Y+6, r25	; 0x06
    30c0:	8d 83       	std	Y+5, r24	; 0x05
    30c2:	3f c0       	rjmp	.+126    	; 0x3142 <Get_key_pad_pressed+0x126>
	else if (__tmp > 65535)
    30c4:	6f 81       	ldd	r22, Y+7	; 0x07
    30c6:	78 85       	ldd	r23, Y+8	; 0x08
    30c8:	89 85       	ldd	r24, Y+9	; 0x09
    30ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	3f ef       	ldi	r19, 0xFF	; 255
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	57 e4       	ldi	r21, 0x47	; 71
    30d4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    30d8:	18 16       	cp	r1, r24
    30da:	4c f5       	brge	.+82     	; 0x312e <Get_key_pad_pressed+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30de:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e2       	ldi	r20, 0x20	; 32
    30ea:	51 e4       	ldi	r21, 0x41	; 65
    30ec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	bc 01       	movw	r22, r24
    30f6:	cd 01       	movw	r24, r26
    30f8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	0f c0       	rjmp	.+30     	; 0x3124 <Get_key_pad_pressed+0x108>
    3106:	88 ec       	ldi	r24, 0xC8	; 200
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9c 83       	std	Y+4, r25	; 0x04
    310c:	8b 83       	std	Y+3, r24	; 0x03
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <Get_key_pad_pressed+0xf6>
    3116:	9c 83       	std	Y+4, r25	; 0x04
    3118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311a:	8d 81       	ldd	r24, Y+5	; 0x05
    311c:	9e 81       	ldd	r25, Y+6	; 0x06
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	9e 83       	std	Y+6, r25	; 0x06
    3122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3124:	8d 81       	ldd	r24, Y+5	; 0x05
    3126:	9e 81       	ldd	r25, Y+6	; 0x06
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	69 f7       	brne	.-38     	; 0x3106 <Get_key_pad_pressed+0xea>
    312c:	14 c0       	rjmp	.+40     	; 0x3156 <Get_key_pad_pressed+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312e:	6f 81       	ldd	r22, Y+7	; 0x07
    3130:	78 85       	ldd	r23, Y+8	; 0x08
    3132:	89 85       	ldd	r24, Y+9	; 0x09
    3134:	9a 85       	ldd	r25, Y+10	; 0x0a
    3136:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	8d 83       	std	Y+5, r24	; 0x05
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	9a 83       	std	Y+2, r25	; 0x02
    3148:	89 83       	std	Y+1, r24	; 0x01
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <Get_key_pad_pressed+0x132>
    3152:	9a 83       	std	Y+2, r25	; 0x02
    3154:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);

			for (u8 y = 0; y < COL_NO; y++) {
    3156:	1f 86       	std	Y+15, r1	; 0x0f
    3158:	23 c0       	rjmp	.+70     	; 0x31a0 <Get_key_pad_pressed+0x184>
				if (DIO_GetPinValue(KEY_PAD_GROUP, y) == 0)
    315a:	83 e0       	ldi	r24, 0x03	; 3
    315c:	6f 85       	ldd	r22, Y+15	; 0x0f
    315e:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_GetPinValue>
    3162:	88 23       	and	r24, r24
    3164:	d1 f4       	brne	.+52     	; 0x319a <Get_key_pad_pressed+0x17e>
					return key_pad_arr[i][y];
    3166:	88 89       	ldd	r24, Y+16	; 0x10
    3168:	48 2f       	mov	r20, r24
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	8f 85       	ldd	r24, Y+15	; 0x0f
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	ca 01       	movw	r24, r20
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	82 0f       	add	r24, r18
    317e:	93 1f       	adc	r25, r19
    3180:	fc 01       	movw	r30, r24
    3182:	e8 59       	subi	r30, 0x98	; 152
    3184:	fe 4f       	sbci	r31, 0xFE	; 254
    3186:	80 81       	ld	r24, Z

		}

	}

}
    3188:	60 96       	adiw	r28, 0x10	; 16
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret
		for (u8 i = 0; i < ROW_NO; i++) {
			DIO_SetGroupDirection(KEY_PAD_GROUP, (0b00010000) << i);
			DIO_SetGroupValue(KEY_PAD_GROUP, (~((0b00010000) << i)));
			_delay_ms(50);

			for (u8 y = 0; y < COL_NO; y++) {
    319a:	8f 85       	ldd	r24, Y+15	; 0x0f
    319c:	8f 5f       	subi	r24, 0xFF	; 255
    319e:	8f 87       	std	Y+15, r24	; 0x0f
    31a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a2:	84 30       	cpi	r24, 0x04	; 4
    31a4:	d0 f2       	brcs	.-76     	; 0x315a <Get_key_pad_pressed+0x13e>

};

u8 Get_key_pad_pressed() {
	while (1) {
		for (u8 i = 0; i < ROW_NO; i++) {
    31a6:	88 89       	ldd	r24, Y+16	; 0x10
    31a8:	8f 5f       	subi	r24, 0xFF	; 255
    31aa:	88 8b       	std	Y+16, r24	; 0x10
    31ac:	88 89       	ldd	r24, Y+16	; 0x10
    31ae:	84 30       	cpi	r24, 0x04	; 4
    31b0:	08 f4       	brcc	.+2      	; 0x31b4 <Get_key_pad_pressed+0x198>
    31b2:	40 cf       	rjmp	.-384    	; 0x3034 <Get_key_pad_pressed+0x18>
    31b4:	3d cf       	rjmp	.-390    	; 0x3030 <Get_key_pad_pressed+0x14>

000031b6 <DIO_voidSetPortDirection>:
 * note 27na bn4t8l 3la pull up switch b2ny b5le 2l DDR_reg->input(=0) && PORT_reg==1
 */
void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)//2na m7taga 2grf 2na 48ala 3la 2nhy port mn 2l 4 & 2l pin bt3ty act as input wla output
// fk2n 2dtlo(0(porta,255)2w(1(portb,128(1000 0000)m3naha 2n pin7 output w 2l ba2y input)
//dah fe 7alet 2ny 48ala 3la port kamel
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <DIO_voidSetPortDirection+0x6>
    31bc:	00 d0       	rcall	.+0      	; 0x31be <DIO_voidSetPortDirection+0x8>
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	3c 83       	std	Y+4, r19	; 0x04
    31ce:	2b 83       	std	Y+3, r18	; 0x03
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	81 30       	cpi	r24, 0x01	; 1
    31d6:	91 05       	cpc	r25, r1
    31d8:	d1 f0       	breq	.+52     	; 0x320e <DIO_voidSetPortDirection+0x58>
    31da:	2b 81       	ldd	r18, Y+3	; 0x03
    31dc:	3c 81       	ldd	r19, Y+4	; 0x04
    31de:	22 30       	cpi	r18, 0x02	; 2
    31e0:	31 05       	cpc	r19, r1
    31e2:	2c f4       	brge	.+10     	; 0x31ee <DIO_voidSetPortDirection+0x38>
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	61 f0       	breq	.+24     	; 0x3204 <DIO_voidSetPortDirection+0x4e>
    31ec:	1e c0       	rjmp	.+60     	; 0x322a <DIO_voidSetPortDirection+0x74>
    31ee:	2b 81       	ldd	r18, Y+3	; 0x03
    31f0:	3c 81       	ldd	r19, Y+4	; 0x04
    31f2:	22 30       	cpi	r18, 0x02	; 2
    31f4:	31 05       	cpc	r19, r1
    31f6:	81 f0       	breq	.+32     	; 0x3218 <DIO_voidSetPortDirection+0x62>
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	9c 81       	ldd	r25, Y+4	; 0x04
    31fc:	83 30       	cpi	r24, 0x03	; 3
    31fe:	91 05       	cpc	r25, r1
    3200:	81 f0       	breq	.+32     	; 0x3222 <DIO_voidSetPortDirection+0x6c>
    3202:	13 c0       	rjmp	.+38     	; 0x322a <DIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:DIO_DDRA_REG=Copy_u8Direction;break;
    3204:	ea e3       	ldi	r30, 0x3A	; 58
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	80 83       	st	Z, r24
    320c:	0e c0       	rjmp	.+28     	; 0x322a <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:DIO_DDRB_REG=Copy_u8Direction;break;
    320e:	e7 e3       	ldi	r30, 0x37	; 55
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	80 83       	st	Z, r24
    3216:	09 c0       	rjmp	.+18     	; 0x322a <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:DIO_DDRC_REG=Copy_u8Direction;break;
    3218:	e4 e3       	ldi	r30, 0x34	; 52
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	80 83       	st	Z, r24
    3220:	04 c0       	rjmp	.+8      	; 0x322a <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:DIO_DDRD_REG=Copy_u8Direction;break;
    3222:	e1 e3       	ldi	r30, 0x31	; 49
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	80 83       	st	Z, r24
	default:break;
	}

}
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)//value 2l hea high wla low 2l lmba ht2ed wla l2
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	00 d0       	rcall	.+0      	; 0x323e <DIO_voidSetPortValue+0x6>
    323e:	00 d0       	rcall	.+0      	; 0x3240 <DIO_voidSetPortValue+0x8>
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	89 83       	std	Y+1, r24	; 0x01
    3246:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	28 2f       	mov	r18, r24
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	3c 83       	std	Y+4, r19	; 0x04
    3250:	2b 83       	std	Y+3, r18	; 0x03
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	81 30       	cpi	r24, 0x01	; 1
    3258:	91 05       	cpc	r25, r1
    325a:	d1 f0       	breq	.+52     	; 0x3290 <DIO_voidSetPortValue+0x58>
    325c:	2b 81       	ldd	r18, Y+3	; 0x03
    325e:	3c 81       	ldd	r19, Y+4	; 0x04
    3260:	22 30       	cpi	r18, 0x02	; 2
    3262:	31 05       	cpc	r19, r1
    3264:	2c f4       	brge	.+10     	; 0x3270 <DIO_voidSetPortValue+0x38>
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	9c 81       	ldd	r25, Y+4	; 0x04
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	61 f0       	breq	.+24     	; 0x3286 <DIO_voidSetPortValue+0x4e>
    326e:	1e c0       	rjmp	.+60     	; 0x32ac <DIO_voidSetPortValue+0x74>
    3270:	2b 81       	ldd	r18, Y+3	; 0x03
    3272:	3c 81       	ldd	r19, Y+4	; 0x04
    3274:	22 30       	cpi	r18, 0x02	; 2
    3276:	31 05       	cpc	r19, r1
    3278:	81 f0       	breq	.+32     	; 0x329a <DIO_voidSetPortValue+0x62>
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	9c 81       	ldd	r25, Y+4	; 0x04
    327e:	83 30       	cpi	r24, 0x03	; 3
    3280:	91 05       	cpc	r25, r1
    3282:	81 f0       	breq	.+32     	; 0x32a4 <DIO_voidSetPortValue+0x6c>
    3284:	13 c0       	rjmp	.+38     	; 0x32ac <DIO_voidSetPortValue+0x74>
	{
    case DIO_PORTA:DIO_PORTA_REG=Copy_u8Value;break;
    3286:	eb e3       	ldi	r30, 0x3B	; 59
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	80 83       	st	Z, r24
    328e:	0e c0       	rjmp	.+28     	; 0x32ac <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:DIO_PORTB_REG=Copy_u8Value;break;
    3290:	e8 e3       	ldi	r30, 0x38	; 56
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	80 83       	st	Z, r24
    3298:	09 c0       	rjmp	.+18     	; 0x32ac <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:DIO_PORTC_REG=Copy_u8Value;break;
    329a:	e5 e3       	ldi	r30, 0x35	; 53
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	80 83       	st	Z, r24
    32a2:	04 c0       	rjmp	.+8      	; 0x32ac <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:DIO_PORTD_REG=Copy_u8Value;break;
    32a4:	e2 e3       	ldi	r30, 0x32	; 50
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	80 83       	st	Z, r24
	default:break;
	}

}
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)//(porta,8,output)
{
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	27 97       	sbiw	r28, 0x07	; 7
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	de bf       	out	0x3e, r29	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	cd bf       	out	0x3d, r28	; 61
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	6a 83       	std	Y+2, r22	; 0x02
    32d2:	4b 83       	std	Y+3, r20	; 0x03
  if(Copy_u8Direction==DIO_OUTPUT)
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	81 30       	cpi	r24, 0x01	; 1
    32d8:	09 f0       	breq	.+2      	; 0x32dc <DIO_voidSetPinDirection+0x22>
    32da:	6f c0       	rjmp	.+222    	; 0x33ba <DIO_voidSetPinDirection+0x100>
  {
	  switch(Copy_u8Port)
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	3f 83       	std	Y+7, r19	; 0x07
    32e4:	2e 83       	std	Y+6, r18	; 0x06
    32e6:	8e 81       	ldd	r24, Y+6	; 0x06
    32e8:	9f 81       	ldd	r25, Y+7	; 0x07
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	91 05       	cpc	r25, r1
    32ee:	49 f1       	breq	.+82     	; 0x3342 <DIO_voidSetPinDirection+0x88>
    32f0:	2e 81       	ldd	r18, Y+6	; 0x06
    32f2:	3f 81       	ldd	r19, Y+7	; 0x07
    32f4:	22 30       	cpi	r18, 0x02	; 2
    32f6:	31 05       	cpc	r19, r1
    32f8:	2c f4       	brge	.+10     	; 0x3304 <DIO_voidSetPinDirection+0x4a>
    32fa:	8e 81       	ldd	r24, Y+6	; 0x06
    32fc:	9f 81       	ldd	r25, Y+7	; 0x07
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	61 f0       	breq	.+24     	; 0x331a <DIO_voidSetPinDirection+0x60>
    3302:	d2 c0       	rjmp	.+420    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
    3304:	2e 81       	ldd	r18, Y+6	; 0x06
    3306:	3f 81       	ldd	r19, Y+7	; 0x07
    3308:	22 30       	cpi	r18, 0x02	; 2
    330a:	31 05       	cpc	r19, r1
    330c:	71 f1       	breq	.+92     	; 0x336a <DIO_voidSetPinDirection+0xb0>
    330e:	8e 81       	ldd	r24, Y+6	; 0x06
    3310:	9f 81       	ldd	r25, Y+7	; 0x07
    3312:	83 30       	cpi	r24, 0x03	; 3
    3314:	91 05       	cpc	r25, r1
    3316:	e9 f1       	breq	.+122    	; 0x3392 <DIO_voidSetPinDirection+0xd8>
    3318:	c7 c0       	rjmp	.+398    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	  {
    case DIO_PORTA:SET_BIT(DIO_DDRA_REG,Copy_u8Pin);break;
    331a:	aa e3       	ldi	r26, 0x3A	; 58
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	ea e3       	ldi	r30, 0x3A	; 58
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 2e       	mov	r0, r18
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <DIO_voidSetPinDirection+0x7e>
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	0a 94       	dec	r0
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <DIO_voidSetPinDirection+0x7a>
    333c:	84 2b       	or	r24, r20
    333e:	8c 93       	st	X, r24
    3340:	b3 c0       	rjmp	.+358    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	case DIO_PORTB:SET_BIT(DIO_DDRB_REG,Copy_u8Pin);break;
    3342:	a7 e3       	ldi	r26, 0x37	; 55
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e7 e3       	ldi	r30, 0x37	; 55
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	48 2f       	mov	r20, r24
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	02 2e       	mov	r0, r18
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <DIO_voidSetPinDirection+0xa6>
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	0a 94       	dec	r0
    3362:	e2 f7       	brpl	.-8      	; 0x335c <DIO_voidSetPinDirection+0xa2>
    3364:	84 2b       	or	r24, r20
    3366:	8c 93       	st	X, r24
    3368:	9f c0       	rjmp	.+318    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	case DIO_PORTC:SET_BIT(DIO_DDRC_REG,Copy_u8Pin);break;
    336a:	a4 e3       	ldi	r26, 0x34	; 52
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	e4 e3       	ldi	r30, 0x34	; 52
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	48 2f       	mov	r20, r24
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	02 2e       	mov	r0, r18
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <DIO_voidSetPinDirection+0xce>
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	0a 94       	dec	r0
    338a:	e2 f7       	brpl	.-8      	; 0x3384 <DIO_voidSetPinDirection+0xca>
    338c:	84 2b       	or	r24, r20
    338e:	8c 93       	st	X, r24
    3390:	8b c0       	rjmp	.+278    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	case DIO_PORTD:SET_BIT(DIO_DDRD_REG,Copy_u8Pin);break;
    3392:	a1 e3       	ldi	r26, 0x31	; 49
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e1 e3       	ldi	r30, 0x31	; 49
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	48 2f       	mov	r20, r24
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 2e       	mov	r0, r18
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <DIO_voidSetPinDirection+0xf6>
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <DIO_voidSetPinDirection+0xf2>
    33b4:	84 2b       	or	r24, r20
    33b6:	8c 93       	st	X, r24
    33b8:	77 c0       	rjmp	.+238    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	default:break;
	  }
  }
  else if(Copy_u8Direction==DIO_INPUT)
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	88 23       	and	r24, r24
    33be:	09 f0       	breq	.+2      	; 0x33c2 <DIO_voidSetPinDirection+0x108>
    33c0:	73 c0       	rjmp	.+230    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
  {
	 switch(Copy_u8Port)
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	3d 83       	std	Y+5, r19	; 0x05
    33ca:	2c 83       	std	Y+4, r18	; 0x04
    33cc:	8c 81       	ldd	r24, Y+4	; 0x04
    33ce:	9d 81       	ldd	r25, Y+5	; 0x05
    33d0:	81 30       	cpi	r24, 0x01	; 1
    33d2:	91 05       	cpc	r25, r1
    33d4:	59 f1       	breq	.+86     	; 0x342c <DIO_voidSetPinDirection+0x172>
    33d6:	2c 81       	ldd	r18, Y+4	; 0x04
    33d8:	3d 81       	ldd	r19, Y+5	; 0x05
    33da:	22 30       	cpi	r18, 0x02	; 2
    33dc:	31 05       	cpc	r19, r1
    33de:	2c f4       	brge	.+10     	; 0x33ea <DIO_voidSetPinDirection+0x130>
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	9d 81       	ldd	r25, Y+5	; 0x05
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	69 f0       	breq	.+26     	; 0x3402 <DIO_voidSetPinDirection+0x148>
    33e8:	5f c0       	rjmp	.+190    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
    33ea:	2c 81       	ldd	r18, Y+4	; 0x04
    33ec:	3d 81       	ldd	r19, Y+5	; 0x05
    33ee:	22 30       	cpi	r18, 0x02	; 2
    33f0:	31 05       	cpc	r19, r1
    33f2:	89 f1       	breq	.+98     	; 0x3456 <DIO_voidSetPinDirection+0x19c>
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	9d 81       	ldd	r25, Y+5	; 0x05
    33f8:	83 30       	cpi	r24, 0x03	; 3
    33fa:	91 05       	cpc	r25, r1
    33fc:	09 f4       	brne	.+2      	; 0x3400 <DIO_voidSetPinDirection+0x146>
    33fe:	40 c0       	rjmp	.+128    	; 0x3480 <DIO_voidSetPinDirection+0x1c6>
    3400:	53 c0       	rjmp	.+166    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	 {
    case DIO_PORTA:CLR_BIT(DIO_DDRA_REG,Copy_u8Pin);break;
    3402:	aa e3       	ldi	r26, 0x3A	; 58
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	ea e3       	ldi	r30, 0x3A	; 58
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	80 81       	ld	r24, Z
    340c:	48 2f       	mov	r20, r24
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	28 2f       	mov	r18, r24
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	02 2e       	mov	r0, r18
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <DIO_voidSetPinDirection+0x166>
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	0a 94       	dec	r0
    3422:	e2 f7       	brpl	.-8      	; 0x341c <DIO_voidSetPinDirection+0x162>
    3424:	80 95       	com	r24
    3426:	84 23       	and	r24, r20
    3428:	8c 93       	st	X, r24
    342a:	3e c0       	rjmp	.+124    	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	case DIO_PORTB:CLR_BIT(DIO_DDRB_REG,Copy_u8Pin);break;
    342c:	a7 e3       	ldi	r26, 0x37	; 55
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	e7 e3       	ldi	r30, 0x37	; 55
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	80 81       	ld	r24, Z
    3436:	48 2f       	mov	r20, r24
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	28 2f       	mov	r18, r24
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	02 2e       	mov	r0, r18
    3444:	02 c0       	rjmp	.+4      	; 0x344a <DIO_voidSetPinDirection+0x190>
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	0a 94       	dec	r0
    344c:	e2 f7       	brpl	.-8      	; 0x3446 <DIO_voidSetPinDirection+0x18c>
    344e:	80 95       	com	r24
    3450:	84 23       	and	r24, r20
    3452:	8c 93       	st	X, r24
    3454:	29 c0       	rjmp	.+82     	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	case DIO_PORTC:CLR_BIT(DIO_DDRC_REG,Copy_u8Pin);break;
    3456:	a4 e3       	ldi	r26, 0x34	; 52
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	e4 e3       	ldi	r30, 0x34	; 52
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	48 2f       	mov	r20, r24
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	28 2f       	mov	r18, r24
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	02 2e       	mov	r0, r18
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <DIO_voidSetPinDirection+0x1ba>
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	0a 94       	dec	r0
    3476:	e2 f7       	brpl	.-8      	; 0x3470 <DIO_voidSetPinDirection+0x1b6>
    3478:	80 95       	com	r24
    347a:	84 23       	and	r24, r20
    347c:	8c 93       	st	X, r24
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <DIO_voidSetPinDirection+0x1ee>
	case DIO_PORTD:CLR_BIT(DIO_DDRD_REG,Copy_u8Pin);break;
    3480:	a1 e3       	ldi	r26, 0x31	; 49
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e1 e3       	ldi	r30, 0x31	; 49
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	48 2f       	mov	r20, r24
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	02 2e       	mov	r0, r18
    3498:	02 c0       	rjmp	.+4      	; 0x349e <DIO_voidSetPinDirection+0x1e4>
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	0a 94       	dec	r0
    34a0:	e2 f7       	brpl	.-8      	; 0x349a <DIO_voidSetPinDirection+0x1e0>
    34a2:	80 95       	com	r24
    34a4:	84 23       	and	r24, r20
    34a6:	8c 93       	st	X, r24
	default:break;
	 }
  }

}
    34a8:	27 96       	adiw	r28, 0x07	; 7
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)//(porta ,7,PORTa=1)

{
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	27 97       	sbiw	r28, 0x07	; 7
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	89 83       	std	Y+1, r24	; 0x01
    34d0:	6a 83       	std	Y+2, r22	; 0x02
    34d2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==DIO_HIGH)
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	09 f0       	breq	.+2      	; 0x34dc <DIO_voidSetPinValue+0x22>
    34da:	6f c0       	rjmp	.+222    	; 0x35ba <DIO_voidSetPinValue+0x100>
	  {
		  switch(Copy_u8Port)
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	28 2f       	mov	r18, r24
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	3f 83       	std	Y+7, r19	; 0x07
    34e4:	2e 83       	std	Y+6, r18	; 0x06
    34e6:	8e 81       	ldd	r24, Y+6	; 0x06
    34e8:	9f 81       	ldd	r25, Y+7	; 0x07
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	91 05       	cpc	r25, r1
    34ee:	49 f1       	breq	.+82     	; 0x3542 <DIO_voidSetPinValue+0x88>
    34f0:	2e 81       	ldd	r18, Y+6	; 0x06
    34f2:	3f 81       	ldd	r19, Y+7	; 0x07
    34f4:	22 30       	cpi	r18, 0x02	; 2
    34f6:	31 05       	cpc	r19, r1
    34f8:	2c f4       	brge	.+10     	; 0x3504 <DIO_voidSetPinValue+0x4a>
    34fa:	8e 81       	ldd	r24, Y+6	; 0x06
    34fc:	9f 81       	ldd	r25, Y+7	; 0x07
    34fe:	00 97       	sbiw	r24, 0x00	; 0
    3500:	61 f0       	breq	.+24     	; 0x351a <DIO_voidSetPinValue+0x60>
    3502:	d2 c0       	rjmp	.+420    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
    3504:	2e 81       	ldd	r18, Y+6	; 0x06
    3506:	3f 81       	ldd	r19, Y+7	; 0x07
    3508:	22 30       	cpi	r18, 0x02	; 2
    350a:	31 05       	cpc	r19, r1
    350c:	71 f1       	breq	.+92     	; 0x356a <DIO_voidSetPinValue+0xb0>
    350e:	8e 81       	ldd	r24, Y+6	; 0x06
    3510:	9f 81       	ldd	r25, Y+7	; 0x07
    3512:	83 30       	cpi	r24, 0x03	; 3
    3514:	91 05       	cpc	r25, r1
    3516:	e9 f1       	breq	.+122    	; 0x3592 <DIO_voidSetPinValue+0xd8>
    3518:	c7 c0       	rjmp	.+398    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		  {
	    case DIO_PORTA:SET_BIT(DIO_PORTA_REG,Copy_u8Pin);break;
    351a:	ab e3       	ldi	r26, 0x3B	; 59
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	eb e3       	ldi	r30, 0x3B	; 59
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	48 2f       	mov	r20, r24
    3526:	8a 81       	ldd	r24, Y+2	; 0x02
    3528:	28 2f       	mov	r18, r24
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	02 2e       	mov	r0, r18
    3532:	02 c0       	rjmp	.+4      	; 0x3538 <DIO_voidSetPinValue+0x7e>
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	0a 94       	dec	r0
    353a:	e2 f7       	brpl	.-8      	; 0x3534 <DIO_voidSetPinValue+0x7a>
    353c:	84 2b       	or	r24, r20
    353e:	8c 93       	st	X, r24
    3540:	b3 c0       	rjmp	.+358    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(DIO_PORTB_REG,Copy_u8Pin);break;
    3542:	a8 e3       	ldi	r26, 0x38	; 56
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	e8 e3       	ldi	r30, 0x38	; 56
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	48 2f       	mov	r20, r24
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	28 2f       	mov	r18, r24
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	02 2e       	mov	r0, r18
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <DIO_voidSetPinValue+0xa6>
    355c:	88 0f       	add	r24, r24
    355e:	99 1f       	adc	r25, r25
    3560:	0a 94       	dec	r0
    3562:	e2 f7       	brpl	.-8      	; 0x355c <DIO_voidSetPinValue+0xa2>
    3564:	84 2b       	or	r24, r20
    3566:	8c 93       	st	X, r24
    3568:	9f c0       	rjmp	.+318    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(DIO_PORTC_REG,Copy_u8Pin);break;
    356a:	a5 e3       	ldi	r26, 0x35	; 53
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	e5 e3       	ldi	r30, 0x35	; 53
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	48 2f       	mov	r20, r24
    3576:	8a 81       	ldd	r24, Y+2	; 0x02
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	02 2e       	mov	r0, r18
    3582:	02 c0       	rjmp	.+4      	; 0x3588 <DIO_voidSetPinValue+0xce>
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	0a 94       	dec	r0
    358a:	e2 f7       	brpl	.-8      	; 0x3584 <DIO_voidSetPinValue+0xca>
    358c:	84 2b       	or	r24, r20
    358e:	8c 93       	st	X, r24
    3590:	8b c0       	rjmp	.+278    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(DIO_PORTD_REG,Copy_u8Pin);break;
    3592:	a2 e3       	ldi	r26, 0x32	; 50
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	e2 e3       	ldi	r30, 0x32	; 50
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	48 2f       	mov	r20, r24
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	02 2e       	mov	r0, r18
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <DIO_voidSetPinValue+0xf6>
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	0a 94       	dec	r0
    35b2:	e2 f7       	brpl	.-8      	; 0x35ac <DIO_voidSetPinValue+0xf2>
    35b4:	84 2b       	or	r24, r20
    35b6:	8c 93       	st	X, r24
    35b8:	77 c0       	rjmp	.+238    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		default:break;
		  }
	  }
	  else if(Copy_u8Value==DIO_LOW)
    35ba:	8b 81       	ldd	r24, Y+3	; 0x03
    35bc:	88 23       	and	r24, r24
    35be:	09 f0       	breq	.+2      	; 0x35c2 <DIO_voidSetPinValue+0x108>
    35c0:	73 c0       	rjmp	.+230    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
	  {
		 switch(Copy_u8Port)
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	28 2f       	mov	r18, r24
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	3d 83       	std	Y+5, r19	; 0x05
    35ca:	2c 83       	std	Y+4, r18	; 0x04
    35cc:	8c 81       	ldd	r24, Y+4	; 0x04
    35ce:	9d 81       	ldd	r25, Y+5	; 0x05
    35d0:	81 30       	cpi	r24, 0x01	; 1
    35d2:	91 05       	cpc	r25, r1
    35d4:	59 f1       	breq	.+86     	; 0x362c <DIO_voidSetPinValue+0x172>
    35d6:	2c 81       	ldd	r18, Y+4	; 0x04
    35d8:	3d 81       	ldd	r19, Y+5	; 0x05
    35da:	22 30       	cpi	r18, 0x02	; 2
    35dc:	31 05       	cpc	r19, r1
    35de:	2c f4       	brge	.+10     	; 0x35ea <DIO_voidSetPinValue+0x130>
    35e0:	8c 81       	ldd	r24, Y+4	; 0x04
    35e2:	9d 81       	ldd	r25, Y+5	; 0x05
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f0       	breq	.+26     	; 0x3602 <DIO_voidSetPinValue+0x148>
    35e8:	5f c0       	rjmp	.+190    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
    35ea:	2c 81       	ldd	r18, Y+4	; 0x04
    35ec:	3d 81       	ldd	r19, Y+5	; 0x05
    35ee:	22 30       	cpi	r18, 0x02	; 2
    35f0:	31 05       	cpc	r19, r1
    35f2:	89 f1       	breq	.+98     	; 0x3656 <DIO_voidSetPinValue+0x19c>
    35f4:	8c 81       	ldd	r24, Y+4	; 0x04
    35f6:	9d 81       	ldd	r25, Y+5	; 0x05
    35f8:	83 30       	cpi	r24, 0x03	; 3
    35fa:	91 05       	cpc	r25, r1
    35fc:	09 f4       	brne	.+2      	; 0x3600 <DIO_voidSetPinValue+0x146>
    35fe:	40 c0       	rjmp	.+128    	; 0x3680 <DIO_voidSetPinValue+0x1c6>
    3600:	53 c0       	rjmp	.+166    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		 {
	    case DIO_PORTA:CLR_BIT(DIO_PORTA_REG,Copy_u8Pin);break;
    3602:	ab e3       	ldi	r26, 0x3B	; 59
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	eb e3       	ldi	r30, 0x3B	; 59
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	48 2f       	mov	r20, r24
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	02 2e       	mov	r0, r18
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <DIO_voidSetPinValue+0x166>
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	0a 94       	dec	r0
    3622:	e2 f7       	brpl	.-8      	; 0x361c <DIO_voidSetPinValue+0x162>
    3624:	80 95       	com	r24
    3626:	84 23       	and	r24, r20
    3628:	8c 93       	st	X, r24
    362a:	3e c0       	rjmp	.+124    	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(DIO_PORTB_REG,Copy_u8Pin);break;
    362c:	a8 e3       	ldi	r26, 0x38	; 56
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e8 e3       	ldi	r30, 0x38	; 56
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	48 2f       	mov	r20, r24
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	02 2e       	mov	r0, r18
    3644:	02 c0       	rjmp	.+4      	; 0x364a <DIO_voidSetPinValue+0x190>
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	0a 94       	dec	r0
    364c:	e2 f7       	brpl	.-8      	; 0x3646 <DIO_voidSetPinValue+0x18c>
    364e:	80 95       	com	r24
    3650:	84 23       	and	r24, r20
    3652:	8c 93       	st	X, r24
    3654:	29 c0       	rjmp	.+82     	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(DIO_PORTC_REG,Copy_u8Pin);break;
    3656:	a5 e3       	ldi	r26, 0x35	; 53
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	e5 e3       	ldi	r30, 0x35	; 53
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	80 81       	ld	r24, Z
    3660:	48 2f       	mov	r20, r24
    3662:	8a 81       	ldd	r24, Y+2	; 0x02
    3664:	28 2f       	mov	r18, r24
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	02 2e       	mov	r0, r18
    366e:	02 c0       	rjmp	.+4      	; 0x3674 <DIO_voidSetPinValue+0x1ba>
    3670:	88 0f       	add	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	0a 94       	dec	r0
    3676:	e2 f7       	brpl	.-8      	; 0x3670 <DIO_voidSetPinValue+0x1b6>
    3678:	80 95       	com	r24
    367a:	84 23       	and	r24, r20
    367c:	8c 93       	st	X, r24
    367e:	14 c0       	rjmp	.+40     	; 0x36a8 <DIO_voidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(DIO_PORTD_REG,Copy_u8Pin);break;
    3680:	a2 e3       	ldi	r26, 0x32	; 50
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e2 e3       	ldi	r30, 0x32	; 50
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	48 2f       	mov	r20, r24
    368c:	8a 81       	ldd	r24, Y+2	; 0x02
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	02 2e       	mov	r0, r18
    3698:	02 c0       	rjmp	.+4      	; 0x369e <DIO_voidSetPinValue+0x1e4>
    369a:	88 0f       	add	r24, r24
    369c:	99 1f       	adc	r25, r25
    369e:	0a 94       	dec	r0
    36a0:	e2 f7       	brpl	.-8      	; 0x369a <DIO_voidSetPinValue+0x1e0>
    36a2:	80 95       	com	r24
    36a4:	84 23       	and	r24, r20
    36a6:	8c 93       	st	X, r24
		default:break;
		 }
	  }
}
    36a8:	27 96       	adiw	r28, 0x07	; 7
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port)//pin act as input PORT=1 34an pull up resistance
{
    36ba:	df 93       	push	r29
    36bc:	cf 93       	push	r28
    36be:	00 d0       	rcall	.+0      	; 0x36c0 <DIO_u8GetPortValue+0x6>
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <DIO_u8GetPortValue+0x8>
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Result=0;
    36c8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    36ca:	8a 81       	ldd	r24, Y+2	; 0x02
    36cc:	28 2f       	mov	r18, r24
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	3c 83       	std	Y+4, r19	; 0x04
    36d2:	2b 83       	std	Y+3, r18	; 0x03
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	9c 81       	ldd	r25, Y+4	; 0x04
    36d8:	81 30       	cpi	r24, 0x01	; 1
    36da:	91 05       	cpc	r25, r1
    36dc:	d1 f0       	breq	.+52     	; 0x3712 <DIO_u8GetPortValue+0x58>
    36de:	2b 81       	ldd	r18, Y+3	; 0x03
    36e0:	3c 81       	ldd	r19, Y+4	; 0x04
    36e2:	22 30       	cpi	r18, 0x02	; 2
    36e4:	31 05       	cpc	r19, r1
    36e6:	2c f4       	brge	.+10     	; 0x36f2 <DIO_u8GetPortValue+0x38>
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	61 f0       	breq	.+24     	; 0x3708 <DIO_u8GetPortValue+0x4e>
    36f0:	1e c0       	rjmp	.+60     	; 0x372e <DIO_u8GetPortValue+0x74>
    36f2:	2b 81       	ldd	r18, Y+3	; 0x03
    36f4:	3c 81       	ldd	r19, Y+4	; 0x04
    36f6:	22 30       	cpi	r18, 0x02	; 2
    36f8:	31 05       	cpc	r19, r1
    36fa:	81 f0       	breq	.+32     	; 0x371c <DIO_u8GetPortValue+0x62>
    36fc:	8b 81       	ldd	r24, Y+3	; 0x03
    36fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3700:	83 30       	cpi	r24, 0x03	; 3
    3702:	91 05       	cpc	r25, r1
    3704:	81 f0       	breq	.+32     	; 0x3726 <DIO_u8GetPortValue+0x6c>
    3706:	13 c0       	rjmp	.+38     	; 0x372e <DIO_u8GetPortValue+0x74>
	{
	        case DIO_PORTA:Loc_u8Result=DIO_PINA_REG;break;
    3708:	e9 e3       	ldi	r30, 0x39	; 57
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	0e c0       	rjmp	.+28     	; 0x372e <DIO_u8GetPortValue+0x74>
			case DIO_PORTB:Loc_u8Result=DIO_PINB_REG;break;
    3712:	e6 e3       	ldi	r30, 0x36	; 54
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	09 c0       	rjmp	.+18     	; 0x372e <DIO_u8GetPortValue+0x74>
			case DIO_PORTC:Loc_u8Result=DIO_PINC_REG;break;
    371c:	e3 e3       	ldi	r30, 0x33	; 51
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	80 81       	ld	r24, Z
    3722:	89 83       	std	Y+1, r24	; 0x01
    3724:	04 c0       	rjmp	.+8      	; 0x372e <DIO_u8GetPortValue+0x74>
			case DIO_PORTD:Loc_u8Result=DIO_PIND_REG;break;
    3726:	e0 e3       	ldi	r30, 0x30	; 48
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_u8Result;
    372e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <DIO_u8GetpinValue>:
u8 DIO_u8GetpinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	00 d0       	rcall	.+0      	; 0x3744 <DIO_u8GetpinValue+0x6>
    3744:	00 d0       	rcall	.+0      	; 0x3746 <DIO_u8GetpinValue+0x8>
    3746:	0f 92       	push	r0
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	8a 83       	std	Y+2, r24	; 0x02
    374e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Result=0;
    3750:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	3d 83       	std	Y+5, r19	; 0x05
    375a:	2c 83       	std	Y+4, r18	; 0x04
    375c:	4c 81       	ldd	r20, Y+4	; 0x04
    375e:	5d 81       	ldd	r21, Y+5	; 0x05
    3760:	41 30       	cpi	r20, 0x01	; 1
    3762:	51 05       	cpc	r21, r1
    3764:	41 f1       	breq	.+80     	; 0x37b6 <DIO_u8GetpinValue+0x78>
    3766:	8c 81       	ldd	r24, Y+4	; 0x04
    3768:	9d 81       	ldd	r25, Y+5	; 0x05
    376a:	82 30       	cpi	r24, 0x02	; 2
    376c:	91 05       	cpc	r25, r1
    376e:	34 f4       	brge	.+12     	; 0x377c <DIO_u8GetpinValue+0x3e>
    3770:	2c 81       	ldd	r18, Y+4	; 0x04
    3772:	3d 81       	ldd	r19, Y+5	; 0x05
    3774:	21 15       	cp	r18, r1
    3776:	31 05       	cpc	r19, r1
    3778:	61 f0       	breq	.+24     	; 0x3792 <DIO_u8GetpinValue+0x54>
    377a:	52 c0       	rjmp	.+164    	; 0x3820 <DIO_u8GetpinValue+0xe2>
    377c:	4c 81       	ldd	r20, Y+4	; 0x04
    377e:	5d 81       	ldd	r21, Y+5	; 0x05
    3780:	42 30       	cpi	r20, 0x02	; 2
    3782:	51 05       	cpc	r21, r1
    3784:	51 f1       	breq	.+84     	; 0x37da <DIO_u8GetpinValue+0x9c>
    3786:	8c 81       	ldd	r24, Y+4	; 0x04
    3788:	9d 81       	ldd	r25, Y+5	; 0x05
    378a:	83 30       	cpi	r24, 0x03	; 3
    378c:	91 05       	cpc	r25, r1
    378e:	b9 f1       	breq	.+110    	; 0x37fe <DIO_u8GetpinValue+0xc0>
    3790:	47 c0       	rjmp	.+142    	; 0x3820 <DIO_u8GetpinValue+0xe2>
	{
	case DIO_PORTA:Loc_u8Result=GET_BIT(DIO_PINA_REG,Copy_u8Pin);break;
    3792:	e9 e3       	ldi	r30, 0x39	; 57
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	28 2f       	mov	r18, r24
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	8b 81       	ldd	r24, Y+3	; 0x03
    379e:	88 2f       	mov	r24, r24
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	a9 01       	movw	r20, r18
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <DIO_u8GetpinValue+0x6c>
    37a6:	55 95       	asr	r21
    37a8:	47 95       	ror	r20
    37aa:	8a 95       	dec	r24
    37ac:	e2 f7       	brpl	.-8      	; 0x37a6 <DIO_u8GetpinValue+0x68>
    37ae:	ca 01       	movw	r24, r20
    37b0:	81 70       	andi	r24, 0x01	; 1
    37b2:	89 83       	std	Y+1, r24	; 0x01
    37b4:	35 c0       	rjmp	.+106    	; 0x3820 <DIO_u8GetpinValue+0xe2>
	case DIO_PORTB:Loc_u8Result=GET_BIT(DIO_PINB_REG,Copy_u8Pin);break;
    37b6:	e6 e3       	ldi	r30, 0x36	; 54
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	28 2f       	mov	r18, r24
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	8b 81       	ldd	r24, Y+3	; 0x03
    37c2:	88 2f       	mov	r24, r24
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	a9 01       	movw	r20, r18
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <DIO_u8GetpinValue+0x90>
    37ca:	55 95       	asr	r21
    37cc:	47 95       	ror	r20
    37ce:	8a 95       	dec	r24
    37d0:	e2 f7       	brpl	.-8      	; 0x37ca <DIO_u8GetpinValue+0x8c>
    37d2:	ca 01       	movw	r24, r20
    37d4:	81 70       	andi	r24, 0x01	; 1
    37d6:	89 83       	std	Y+1, r24	; 0x01
    37d8:	23 c0       	rjmp	.+70     	; 0x3820 <DIO_u8GetpinValue+0xe2>
	case DIO_PORTC:Loc_u8Result=GET_BIT(DIO_PINC_REG,Copy_u8Pin);break;
    37da:	e3 e3       	ldi	r30, 0x33	; 51
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	88 2f       	mov	r24, r24
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a9 01       	movw	r20, r18
    37ec:	02 c0       	rjmp	.+4      	; 0x37f2 <DIO_u8GetpinValue+0xb4>
    37ee:	55 95       	asr	r21
    37f0:	47 95       	ror	r20
    37f2:	8a 95       	dec	r24
    37f4:	e2 f7       	brpl	.-8      	; 0x37ee <DIO_u8GetpinValue+0xb0>
    37f6:	ca 01       	movw	r24, r20
    37f8:	81 70       	andi	r24, 0x01	; 1
    37fa:	89 83       	std	Y+1, r24	; 0x01
    37fc:	11 c0       	rjmp	.+34     	; 0x3820 <DIO_u8GetpinValue+0xe2>
	case DIO_PORTD:Loc_u8Result=GET_BIT(DIO_PIND_REG,Copy_u8Pin);;break;
    37fe:	e0 e3       	ldi	r30, 0x30	; 48
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	28 2f       	mov	r18, r24
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	88 2f       	mov	r24, r24
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	a9 01       	movw	r20, r18
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <DIO_u8GetpinValue+0xd8>
    3812:	55 95       	asr	r21
    3814:	47 95       	ror	r20
    3816:	8a 95       	dec	r24
    3818:	e2 f7       	brpl	.-8      	; 0x3812 <DIO_u8GetpinValue+0xd4>
    381a:	ca 01       	movw	r24, r20
    381c:	81 70       	andi	r24, 0x01	; 1
    381e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_u8Result;
    3820:	89 81       	ldd	r24, Y+1	; 0x01
}
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <SW_voidSetConfig>:
#include"SW_Interface.h"
#include"SW_Pcfg.h"
#include"SW_Private.h"
//obj sw0
void SW_voidSetConfig(sw_types Copy_strSwConfig)//3,1,1
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	00 d0       	rcall	.+0      	; 0x3838 <SW_voidSetConfig+0x6>
    3838:	0f 92       	push	r0
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	69 83       	std	Y+1, r22	; 0x01
    3840:	7a 83       	std	Y+2, r23	; 0x02
    3842:	8b 83       	std	Y+3, r24	; 0x03
	DIO_voidSetPinDirection(Copy_strSwConfig.SW_Port,Copy_strSwConfig.SW_Pin,DIO_INPUT);//3,1,input->ddrd=0
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	9a 81       	ldd	r25, Y+2	; 0x02
    3848:	69 2f       	mov	r22, r25
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <DIO_voidSetPinDirection>
	if(Copy_strSwConfig.SW_State==SW_PULLUP)
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	81 30       	cpi	r24, 0x01	; 1
    3854:	31 f4       	brne	.+12     	; 0x3862 <SW_voidSetConfig+0x30>
	{
		DIO_voidSetPinValue(Copy_strSwConfig.SW_Port,Copy_strSwConfig.SW_Pin,DIO_HIGH);//portd pin2 =1
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	69 2f       	mov	r22, r25
    385c:	41 e0       	ldi	r20, 0x01	; 1
    385e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_voidSetPinValue>
	//	{
	//		DIO_voidSetPinValue(Copy_strButtonConfig.SW_Port,Copy_strButtonConfig.SW_Pin,DIO_LOW);
	//	}m4 m7taga 2gml kda 34an by deffult 2l port=0


}
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <SW_u8GetButtonState>:
u8 SW_u8GetButtonState(sw_types Copy_strSwConfig)
{
    386e:	df 93       	push	r29
    3870:	cf 93       	push	r28
    3872:	00 d0       	rcall	.+0      	; 0x3874 <SW_u8GetButtonState+0x6>
    3874:	00 d0       	rcall	.+0      	; 0x3876 <SW_u8GetButtonState+0x8>
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	6a 83       	std	Y+2, r22	; 0x02
    387c:	7b 83       	std	Y+3, r23	; 0x03
    387e:	8c 83       	std	Y+4, r24	; 0x04

	u8 Loc_u8ButtonState=0;
    3880:	19 82       	std	Y+1, r1	; 0x01
	Loc_u8ButtonState=DIO_u8GetpinValue(Copy_strSwConfig.SW_Port,Copy_strSwConfig.SW_Pin);
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	9b 81       	ldd	r25, Y+3	; 0x03
    3886:	69 2f       	mov	r22, r25
    3888:	0e 94 9f 1b 	call	0x373e	; 0x373e <DIO_u8GetpinValue>
    388c:	89 83       	std	Y+1, r24	; 0x01
	return Loc_u8ButtonState;
    388e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <__vector_9>:

#define  Trigger_pin	PA2

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect) {
    389e:	1f 92       	push	r1
    38a0:	0f 92       	push	r0
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	0f 92       	push	r0
    38a6:	11 24       	eor	r1, r1
    38a8:	8f 93       	push	r24
    38aa:	9f 93       	push	r25
    38ac:	df 93       	push	r29
    38ae:	cf 93       	push	r28
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++;
    38b4:	80 91 7c 01 	lds	r24, 0x017C
    38b8:	90 91 7d 01 	lds	r25, 0x017D
    38bc:	01 96       	adiw	r24, 0x01	; 1
    38be:	90 93 7d 01 	sts	0x017D, r25
    38c2:	80 93 7c 01 	sts	0x017C, r24
}
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	9f 91       	pop	r25
    38cc:	8f 91       	pop	r24
    38ce:	0f 90       	pop	r0
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	0f 90       	pop	r0
    38d4:	1f 90       	pop	r1
    38d6:	18 95       	reti

000038d8 <main>:

int main()
{
    38d8:	ef 92       	push	r14
    38da:	ff 92       	push	r15
    38dc:	0f 93       	push	r16
    38de:	1f 93       	push	r17
    38e0:	df 93       	push	r29
    38e2:	cf 93       	push	r28
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	ce 59       	subi	r28, 0x9E	; 158
    38ea:	d0 40       	sbci	r29, 0x00	; 0
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61

	sw_types SW0={GROUPD,PIN_2,SW_PULLUP};
    38f6:	ce 01       	movw	r24, r28
    38f8:	8d 57       	subi	r24, 0x7D	; 125
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	c6 56       	subi	r28, 0x66	; 102
    38fe:	df 4f       	sbci	r29, 0xFF	; 255
    3900:	99 83       	std	Y+1, r25	; 0x01
    3902:	88 83       	st	Y, r24
    3904:	ca 59       	subi	r28, 0x9A	; 154
    3906:	d0 40       	sbci	r29, 0x00	; 0
    3908:	88 e7       	ldi	r24, 0x78	; 120
    390a:	91 e0       	ldi	r25, 0x01	; 1
    390c:	c4 56       	subi	r28, 0x64	; 100
    390e:	df 4f       	sbci	r29, 0xFF	; 255
    3910:	99 83       	std	Y+1, r25	; 0x01
    3912:	88 83       	st	Y, r24
    3914:	cc 59       	subi	r28, 0x9C	; 156
    3916:	d0 40       	sbci	r29, 0x00	; 0
    3918:	93 e0       	ldi	r25, 0x03	; 3
    391a:	c2 56       	subi	r28, 0x62	; 98
    391c:	df 4f       	sbci	r29, 0xFF	; 255
    391e:	98 83       	st	Y, r25
    3920:	ce 59       	subi	r28, 0x9E	; 158
    3922:	d0 40       	sbci	r29, 0x00	; 0
    3924:	c4 56       	subi	r28, 0x64	; 100
    3926:	df 4f       	sbci	r29, 0xFF	; 255
    3928:	e8 81       	ld	r30, Y
    392a:	f9 81       	ldd	r31, Y+1	; 0x01
    392c:	cc 59       	subi	r28, 0x9C	; 156
    392e:	d0 40       	sbci	r29, 0x00	; 0
    3930:	00 80       	ld	r0, Z
    3932:	c4 56       	subi	r28, 0x64	; 100
    3934:	df 4f       	sbci	r29, 0xFF	; 255
    3936:	88 81       	ld	r24, Y
    3938:	99 81       	ldd	r25, Y+1	; 0x01
    393a:	cc 59       	subi	r28, 0x9C	; 156
    393c:	d0 40       	sbci	r29, 0x00	; 0
    393e:	01 96       	adiw	r24, 0x01	; 1
    3940:	c4 56       	subi	r28, 0x64	; 100
    3942:	df 4f       	sbci	r29, 0xFF	; 255
    3944:	99 83       	std	Y+1, r25	; 0x01
    3946:	88 83       	st	Y, r24
    3948:	cc 59       	subi	r28, 0x9C	; 156
    394a:	d0 40       	sbci	r29, 0x00	; 0
    394c:	c6 56       	subi	r28, 0x66	; 102
    394e:	df 4f       	sbci	r29, 0xFF	; 255
    3950:	e8 81       	ld	r30, Y
    3952:	f9 81       	ldd	r31, Y+1	; 0x01
    3954:	ca 59       	subi	r28, 0x9A	; 154
    3956:	d0 40       	sbci	r29, 0x00	; 0
    3958:	00 82       	st	Z, r0
    395a:	c6 56       	subi	r28, 0x66	; 102
    395c:	df 4f       	sbci	r29, 0xFF	; 255
    395e:	88 81       	ld	r24, Y
    3960:	99 81       	ldd	r25, Y+1	; 0x01
    3962:	ca 59       	subi	r28, 0x9A	; 154
    3964:	d0 40       	sbci	r29, 0x00	; 0
    3966:	01 96       	adiw	r24, 0x01	; 1
    3968:	c6 56       	subi	r28, 0x66	; 102
    396a:	df 4f       	sbci	r29, 0xFF	; 255
    396c:	99 83       	std	Y+1, r25	; 0x01
    396e:	88 83       	st	Y, r24
    3970:	ca 59       	subi	r28, 0x9A	; 154
    3972:	d0 40       	sbci	r29, 0x00	; 0
    3974:	c2 56       	subi	r28, 0x62	; 98
    3976:	df 4f       	sbci	r29, 0xFF	; 255
    3978:	98 81       	ld	r25, Y
    397a:	ce 59       	subi	r28, 0x9E	; 158
    397c:	d0 40       	sbci	r29, 0x00	; 0
    397e:	91 50       	subi	r25, 0x01	; 1
    3980:	c2 56       	subi	r28, 0x62	; 98
    3982:	df 4f       	sbci	r29, 0xFF	; 255
    3984:	98 83       	st	Y, r25
    3986:	ce 59       	subi	r28, 0x9E	; 158
    3988:	d0 40       	sbci	r29, 0x00	; 0
    398a:	c2 56       	subi	r28, 0x62	; 98
    398c:	df 4f       	sbci	r29, 0xFF	; 255
    398e:	e8 81       	ld	r30, Y
    3990:	ce 59       	subi	r28, 0x9E	; 158
    3992:	d0 40       	sbci	r29, 0x00	; 0
    3994:	ee 23       	and	r30, r30
    3996:	31 f6       	brne	.-116    	; 0x3924 <main+0x4c>
	DIO_SetPinDirection(GROUPA,PIN_7,OUTPUT);//red
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	67 e0       	ldi	r22, 0x07	; 7
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_SetPinDirection>
	DIO_SetPinDirection(GROUPA,PIN_6,OUTPUT);//green
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	66 e0       	ldi	r22, 0x06	; 6
    39a6:	41 e0       	ldi	r20, 0x01	; 1
    39a8:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_SetPinDirection>
	DIO_SetPinDirection(GROUPC,PIN_7,OUTPUT);//BAZZER
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	67 e0       	ldi	r22, 0x07	; 7
    39b0:	41 e0       	ldi	r20, 0x01	; 1
    39b2:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_SetPinDirection>
	SW_voidSetConfig(SW0);
    39b6:	fe 01       	movw	r30, r28
    39b8:	ed 57       	subi	r30, 0x7D	; 125
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	60 81       	ld	r22, Z
    39be:	71 81       	ldd	r23, Z+1	; 0x01
    39c0:	82 81       	ldd	r24, Z+2	; 0x02
    39c2:	0e 94 19 1c 	call	0x3832	; 0x3832 <SW_voidSetConfig>
	DIO_SetPinDirection(GROUPD,PIN_5,OUTPUT);	//OC1A(servo)
    39c6:	83 e0       	ldi	r24, 0x03	; 3
    39c8:	65 e0       	ldi	r22, 0x05	; 5
    39ca:	41 e0       	ldi	r20, 0x01	; 1
    39cc:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_SetPinDirection>

	char string[10];
	long count;
	double distance;

	DIO_SetPinDirection(GROUPA,PIN_2,OUTPUT);
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	62 e0       	ldi	r22, 0x02	; 2
    39d4:	41 e0       	ldi	r20, 0x01	; 1
    39d6:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_SetPinDirection>
    //DDRA = 0b00000100;
    DIO_SetPinValue(GROUPD,PIN_6,HIGH);
    39da:	83 e0       	ldi	r24, 0x03	; 3
    39dc:	66 e0       	ldi	r22, 0x06	; 6
    39de:	41 e0       	ldi	r20, 0x01	; 1
    39e0:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    //PORTD = 0b01000000;

	sei();
    39e4:	78 94       	sei
	TIMSK = (1 << TOIE1);
    39e6:	e9 e5       	ldi	r30, 0x59	; 89
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	84 e0       	ldi	r24, 0x04	; 4
    39ec:	80 83       	st	Z, r24
	TCCR1A = 0;
    39ee:	ef e4       	ldi	r30, 0x4F	; 79
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	10 82       	st	Z, r1

	while (1)
	{

	PORTA |= (1 << Trigger_pin);
    39f4:	ab e3       	ldi	r26, 0x3B	; 59
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	eb e3       	ldi	r30, 0x3B	; 59
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	84 60       	ori	r24, 0x04	; 4
    3a00:	8c 93       	st	X, r24
    3a02:	fe 01       	movw	r30, r28
    3a04:	e9 58       	subi	r30, 0x89	; 137
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a0 e2       	ldi	r26, 0x20	; 32
    3a0e:	b1 e4       	ldi	r27, 0x41	; 65
    3a10:	80 83       	st	Z, r24
    3a12:	91 83       	std	Z+1, r25	; 0x01
    3a14:	a2 83       	std	Z+2, r26	; 0x02
    3a16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a18:	8e 01       	movw	r16, r28
    3a1a:	0d 58       	subi	r16, 0x8D	; 141
    3a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e9 58       	subi	r30, 0x89	; 137
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	60 81       	ld	r22, Z
    3a26:	71 81       	ldd	r23, Z+1	; 0x01
    3a28:	82 81       	ldd	r24, Z+2	; 0x02
    3a2a:	93 81       	ldd	r25, Z+3	; 0x03
    3a2c:	2b ea       	ldi	r18, 0xAB	; 171
    3a2e:	3a ea       	ldi	r19, 0xAA	; 170
    3a30:	4a e2       	ldi	r20, 0x2A	; 42
    3a32:	50 e4       	ldi	r21, 0x40	; 64
    3a34:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	f8 01       	movw	r30, r16
    3a3e:	80 83       	st	Z, r24
    3a40:	91 83       	std	Z+1, r25	; 0x01
    3a42:	a2 83       	std	Z+2, r26	; 0x02
    3a44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a46:	fe 01       	movw	r30, r28
    3a48:	ed 58       	subi	r30, 0x8D	; 141
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	60 81       	ld	r22, Z
    3a4e:	71 81       	ldd	r23, Z+1	; 0x01
    3a50:	82 81       	ldd	r24, Z+2	; 0x02
    3a52:	93 81       	ldd	r25, Z+3	; 0x03
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e8       	ldi	r20, 0x80	; 128
    3a5a:	5f e3       	ldi	r21, 0x3F	; 63
    3a5c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3a60:	88 23       	and	r24, r24
    3a62:	34 f4       	brge	.+12     	; 0x3a70 <main+0x198>
		__ticks = 1;
    3a64:	fe 01       	movw	r30, r28
    3a66:	ee 58       	subi	r30, 0x8E	; 142
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	80 83       	st	Z, r24
    3a6e:	e0 c0       	rjmp	.+448    	; 0x3c30 <main+0x358>
	else if (__tmp > 255)
    3a70:	fe 01       	movw	r30, r28
    3a72:	ed 58       	subi	r30, 0x8D	; 141
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	60 81       	ld	r22, Z
    3a78:	71 81       	ldd	r23, Z+1	; 0x01
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	4f e7       	ldi	r20, 0x7F	; 127
    3a84:	53 e4       	ldi	r21, 0x43	; 67
    3a86:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3a8a:	18 16       	cp	r1, r24
    3a8c:	0c f0       	brlt	.+2      	; 0x3a90 <main+0x1b8>
    3a8e:	c0 c0       	rjmp	.+384    	; 0x3c10 <main+0x338>
	{
		_delay_ms(__us / 1000.0);
    3a90:	fe 01       	movw	r30, r28
    3a92:	e9 58       	subi	r30, 0x89	; 137
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	60 81       	ld	r22, Z
    3a98:	71 81       	ldd	r23, Z+1	; 0x01
    3a9a:	82 81       	ldd	r24, Z+2	; 0x02
    3a9c:	93 81       	ldd	r25, Z+3	; 0x03
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	4a e7       	ldi	r20, 0x7A	; 122
    3aa4:	54 e4       	ldi	r21, 0x44	; 68
    3aa6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	fe 01       	movw	r30, r28
    3ab0:	e2 59       	subi	r30, 0x92	; 146
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	80 83       	st	Z, r24
    3ab6:	91 83       	std	Z+1, r25	; 0x01
    3ab8:	a2 83       	std	Z+2, r26	; 0x02
    3aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abc:	8e 01       	movw	r16, r28
    3abe:	06 59       	subi	r16, 0x96	; 150
    3ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e2 59       	subi	r30, 0x92	; 146
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	4a ef       	ldi	r20, 0xFA	; 250
    3ad6:	54 e4       	ldi	r21, 0x44	; 68
    3ad8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	f8 01       	movw	r30, r16
    3ae2:	80 83       	st	Z, r24
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    3ae6:	a2 83       	std	Z+2, r26	; 0x02
    3ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aea:	fe 01       	movw	r30, r28
    3aec:	e6 59       	subi	r30, 0x96	; 150
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	60 81       	ld	r22, Z
    3af2:	71 81       	ldd	r23, Z+1	; 0x01
    3af4:	82 81       	ldd	r24, Z+2	; 0x02
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	44 f4       	brge	.+16     	; 0x3b18 <main+0x240>
		__ticks = 1;
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e8 59       	subi	r30, 0x98	; 152
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
    3b16:	64 c0       	rjmp	.+200    	; 0x3be0 <main+0x308>
	else if (__tmp > 65535)
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e6 59       	subi	r30, 0x96	; 150
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	60 81       	ld	r22, Z
    3b20:	71 81       	ldd	r23, Z+1	; 0x01
    3b22:	82 81       	ldd	r24, Z+2	; 0x02
    3b24:	93 81       	ldd	r25, Z+3	; 0x03
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	3f ef       	ldi	r19, 0xFF	; 255
    3b2a:	4f e7       	ldi	r20, 0x7F	; 127
    3b2c:	57 e4       	ldi	r21, 0x47	; 71
    3b2e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3b32:	18 16       	cp	r1, r24
    3b34:	0c f0       	brlt	.+2      	; 0x3b38 <main+0x260>
    3b36:	43 c0       	rjmp	.+134    	; 0x3bbe <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e2 59       	subi	r30, 0x92	; 146
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e2       	ldi	r20, 0x20	; 32
    3b4c:	51 e4       	ldi	r21, 0x41	; 65
    3b4e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	8e 01       	movw	r16, r28
    3b58:	08 59       	subi	r16, 0x98	; 152
    3b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	f8 01       	movw	r30, r16
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	1f c0       	rjmp	.+62     	; 0x3bae <main+0x2d6>
    3b70:	fe 01       	movw	r30, r28
    3b72:	ea 59       	subi	r30, 0x9A	; 154
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	88 ec       	ldi	r24, 0xC8	; 200
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
    3b7e:	fe 01       	movw	r30, r28
    3b80:	ea 59       	subi	r30, 0x9A	; 154
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	80 81       	ld	r24, Z
    3b86:	91 81       	ldd	r25, Z+1	; 0x01
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	f1 f7       	brne	.-4      	; 0x3b88 <main+0x2b0>
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	ea 59       	subi	r30, 0x9A	; 154
    3b90:	ff 4f       	sbci	r31, 0xFF	; 255
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b96:	de 01       	movw	r26, r28
    3b98:	a8 59       	subi	r26, 0x98	; 152
    3b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e8 59       	subi	r30, 0x98	; 152
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	11 96       	adiw	r26, 0x01	; 1
    3baa:	9c 93       	st	X, r25
    3bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e8 59       	subi	r30, 0x98	; 152
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	d1 f6       	brne	.-76     	; 0x3b70 <main+0x298>
    3bbc:	4b c0       	rjmp	.+150    	; 0x3c54 <main+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bbe:	8e 01       	movw	r16, r28
    3bc0:	08 59       	subi	r16, 0x98	; 152
    3bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e6 59       	subi	r30, 0x96	; 150
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	60 81       	ld	r22, Z
    3bcc:	71 81       	ldd	r23, Z+1	; 0x01
    3bce:	82 81       	ldd	r24, Z+2	; 0x02
    3bd0:	93 81       	ldd	r25, Z+3	; 0x03
    3bd2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	f8 01       	movw	r30, r16
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	80 83       	st	Z, r24
    3be0:	de 01       	movw	r26, r28
    3be2:	ac 59       	subi	r26, 0x9C	; 156
    3be4:	bf 4f       	sbci	r27, 0xFF	; 255
    3be6:	fe 01       	movw	r30, r28
    3be8:	e8 59       	subi	r30, 0x98	; 152
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 81       	ld	r24, Z
    3bee:	91 81       	ldd	r25, Z+1	; 0x01
    3bf0:	11 96       	adiw	r26, 0x01	; 1
    3bf2:	9c 93       	st	X, r25
    3bf4:	8e 93       	st	-X, r24
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	ec 59       	subi	r30, 0x9C	; 156
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	80 81       	ld	r24, Z
    3bfe:	91 81       	ldd	r25, Z+1	; 0x01
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <main+0x328>
    3c04:	fe 01       	movw	r30, r28
    3c06:	ec 59       	subi	r30, 0x9C	; 156
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	91 83       	std	Z+1, r25	; 0x01
    3c0c:	80 83       	st	Z, r24
    3c0e:	22 c0       	rjmp	.+68     	; 0x3c54 <main+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c10:	8e 01       	movw	r16, r28
    3c12:	0e 58       	subi	r16, 0x8E	; 142
    3c14:	1f 4f       	sbci	r17, 0xFF	; 255
    3c16:	fe 01       	movw	r30, r28
    3c18:	ed 58       	subi	r30, 0x8D	; 141
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	60 81       	ld	r22, Z
    3c1e:	71 81       	ldd	r23, Z+1	; 0x01
    3c20:	82 81       	ldd	r24, Z+2	; 0x02
    3c22:	93 81       	ldd	r25, Z+3	; 0x03
    3c24:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	80 83       	st	Z, r24
    3c30:	de 01       	movw	r26, r28
    3c32:	ad 59       	subi	r26, 0x9D	; 157
    3c34:	bf 4f       	sbci	r27, 0xFF	; 255
    3c36:	fe 01       	movw	r30, r28
    3c38:	ee 58       	subi	r30, 0x8E	; 142
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	80 81       	ld	r24, Z
    3c3e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c40:	fe 01       	movw	r30, r28
    3c42:	ed 59       	subi	r30, 0x9D	; 157
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	8a 95       	dec	r24
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <main+0x370>
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	ed 59       	subi	r30, 0x9D	; 157
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	80 83       	st	Z, r24
	_delay_us(10);
	PORTA &= (~(1 << Trigger_pin));
    3c54:	ab e3       	ldi	r26, 0x3B	; 59
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	eb e3       	ldi	r30, 0x3B	; 59
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	8b 7f       	andi	r24, 0xFB	; 251
    3c60:	8c 93       	st	X, r24

	TCNT1 = 0;
    3c62:	ec e4       	ldi	r30, 0x4C	; 76
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	11 82       	std	Z+1, r1	; 0x01
    3c68:	10 82       	st	Z, r1
	TCCR1B =0b01000001;
    3c6a:	ee e4       	ldi	r30, 0x4E	; 78
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	81 e4       	ldi	r24, 0x41	; 65
    3c70:	80 83       	st	Z, r24
	TIFR = 1 << ICF1;
    3c72:	e8 e5       	ldi	r30, 0x58	; 88
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	80 e2       	ldi	r24, 0x20	; 32
    3c78:	80 83       	st	Z, r24
	TIFR = 1 << TOV1;
    3c7a:	e8 e5       	ldi	r30, 0x58	; 88
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	84 e0       	ldi	r24, 0x04	; 4
    3c80:	80 83       	st	Z, r24

	while ((TIFR & (1 << ICF1)) == 0)
    3c82:	e8 e5       	ldi	r30, 0x58	; 88
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	88 2f       	mov	r24, r24
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	80 72       	andi	r24, 0x20	; 32
    3c8e:	90 70       	andi	r25, 0x00	; 0
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	b9 f3       	breq	.-18     	; 0x3c82 <main+0x3aa>
		;

	TCNT1 = 0;
    3c94:	ec e4       	ldi	r30, 0x4C	; 76
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	11 82       	std	Z+1, r1	; 0x01
    3c9a:	10 82       	st	Z, r1
	TCCR1B =0b00000001;
    3c9c:	ee e4       	ldi	r30, 0x4E	; 78
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	80 83       	st	Z, r24
	TIFR = 1 << ICF1;
    3ca4:	e8 e5       	ldi	r30, 0x58	; 88
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	80 e2       	ldi	r24, 0x20	; 32
    3caa:	80 83       	st	Z, r24
	TIFR = 1 << TOV1;
    3cac:	e8 e5       	ldi	r30, 0x58	; 88
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	84 e0       	ldi	r24, 0x04	; 4
    3cb2:	80 83       	st	Z, r24
	TimerOverflow = 0;
    3cb4:	10 92 7d 01 	sts	0x017D, r1
    3cb8:	10 92 7c 01 	sts	0x017C, r1

	while ((TIFR & (1 << ICF1)) == 0)
    3cbc:	e8 e5       	ldi	r30, 0x58	; 88
    3cbe:	f0 e0       	ldi	r31, 0x00	; 0
    3cc0:	80 81       	ld	r24, Z
    3cc2:	88 2f       	mov	r24, r24
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	80 72       	andi	r24, 0x20	; 32
    3cc8:	90 70       	andi	r25, 0x00	; 0
    3cca:	00 97       	sbiw	r24, 0x00	; 0
    3ccc:	b9 f3       	breq	.-18     	; 0x3cbc <main+0x3e4>
		;

	count = ICR1 + (65535 * TimerOverflow);
    3cce:	e6 e4       	ldi	r30, 0x46	; 70
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	80 81       	ld	r24, Z
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	7c 01       	movw	r14, r24
    3cd8:	00 e0       	ldi	r16, 0x00	; 0
    3cda:	10 e0       	ldi	r17, 0x00	; 0
    3cdc:	80 91 7c 01 	lds	r24, 0x017C
    3ce0:	90 91 7d 01 	lds	r25, 0x017D
    3ce4:	aa 27       	eor	r26, r26
    3ce6:	97 fd       	sbrc	r25, 7
    3ce8:	a0 95       	com	r26
    3cea:	ba 2f       	mov	r27, r26
    3cec:	2f ef       	ldi	r18, 0xFF	; 255
    3cee:	3f ef       	ldi	r19, 0xFF	; 255
    3cf0:	40 e0       	ldi	r20, 0x00	; 0
    3cf2:	50 e0       	ldi	r21, 0x00	; 0
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	cd 01       	movw	r24, r26
    3cf8:	0e 94 2c 23 	call	0x4658	; 0x4658 <__mulsi3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	fe 01       	movw	r30, r28
    3d02:	e1 58       	subi	r30, 0x81	; 129
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	8e 0d       	add	r24, r14
    3d08:	9f 1d       	adc	r25, r15
    3d0a:	a0 1f       	adc	r26, r16
    3d0c:	b1 1f       	adc	r27, r17
    3d0e:	80 83       	st	Z, r24
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	a2 83       	std	Z+2, r26	; 0x02
    3d14:	b3 83       	std	Z+3, r27	; 0x03

	distance = (double) count / 466.47;
    3d16:	fe 01       	movw	r30, r28
    3d18:	e1 58       	subi	r30, 0x81	; 129
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	60 81       	ld	r22, Z
    3d1e:	71 81       	ldd	r23, Z+1	; 0x01
    3d20:	82 81       	ldd	r24, Z+2	; 0x02
    3d22:	93 81       	ldd	r25, Z+3	; 0x03
    3d24:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	8e 01       	movw	r16, r28
    3d2e:	05 58       	subi	r16, 0x85	; 133
    3d30:	1f 4f       	sbci	r17, 0xFF	; 255
    3d32:	bc 01       	movw	r22, r24
    3d34:	cd 01       	movw	r24, r26
    3d36:	29 e2       	ldi	r18, 0x29	; 41
    3d38:	3c e3       	ldi	r19, 0x3C	; 60
    3d3a:	49 ee       	ldi	r20, 0xE9	; 233
    3d3c:	53 e4       	ldi	r21, 0x43	; 67
    3d3e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	f8 01       	movw	r30, r16
    3d48:	80 83       	st	Z, r24
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	a2 83       	std	Z+2, r26	; 0x02
    3d4e:	b3 83       	std	Z+3, r27	; 0x03

	dtostrf(distance, 2, 2, string);
    3d50:	fe 01       	movw	r30, r28
    3d52:	e5 58       	subi	r30, 0x85	; 133
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	91 81       	ldd	r25, Z+1	; 0x01
    3d5a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d5c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d5e:	fe 01       	movw	r30, r28
    3d60:	ea 57       	subi	r30, 0x7A	; 122
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	42 e0       	ldi	r20, 0x02	; 2
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	22 e0       	ldi	r18, 0x02	; 2
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	8f 01       	movw	r16, r30
    3d72:	0e 94 82 23 	call	0x4704	; 0x4704 <dtostrf>
//return 0;
//	}
/////////////////////////////
//while (1)
	//{
	if(DIO_GetPinValue(GROUPD,PIN_2)==0)
    3d76:	83 e0       	ldi	r24, 0x03	; 3
    3d78:	62 e0       	ldi	r22, 0x02	; 2
    3d7a:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_GetPinValue>
    3d7e:	88 23       	and	r24, r24
    3d80:	09 f0       	breq	.+2      	; 0x3d84 <main+0x4ac>
    3d82:	91 c3       	rjmp	.+1826   	; 0x44a6 <main+0xbce>
    3d84:	fe 01       	movw	r30, r28
    3d86:	e1 5a       	subi	r30, 0xA1	; 161
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	a8 ec       	ldi	r26, 0xC8	; 200
    3d90:	b2 e4       	ldi	r27, 0x42	; 66
    3d92:	80 83       	st	Z, r24
    3d94:	91 83       	std	Z+1, r25	; 0x01
    3d96:	a2 83       	std	Z+2, r26	; 0x02
    3d98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9a:	8e 01       	movw	r16, r28
    3d9c:	05 5a       	subi	r16, 0xA5	; 165
    3d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3da0:	fe 01       	movw	r30, r28
    3da2:	e1 5a       	subi	r30, 0xA1	; 161
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	60 81       	ld	r22, Z
    3da8:	71 81       	ldd	r23, Z+1	; 0x01
    3daa:	82 81       	ldd	r24, Z+2	; 0x02
    3dac:	93 81       	ldd	r25, Z+3	; 0x03
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	4a ef       	ldi	r20, 0xFA	; 250
    3db4:	54 e4       	ldi	r21, 0x44	; 68
    3db6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	f8 01       	movw	r30, r16
    3dc0:	80 83       	st	Z, r24
    3dc2:	91 83       	std	Z+1, r25	; 0x01
    3dc4:	a2 83       	std	Z+2, r26	; 0x02
    3dc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e5 5a       	subi	r30, 0xA5	; 165
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	60 81       	ld	r22, Z
    3dd0:	71 81       	ldd	r23, Z+1	; 0x01
    3dd2:	82 81       	ldd	r24, Z+2	; 0x02
    3dd4:	93 81       	ldd	r25, Z+3	; 0x03
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e8       	ldi	r20, 0x80	; 128
    3ddc:	5f e3       	ldi	r21, 0x3F	; 63
    3dde:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3de2:	88 23       	and	r24, r24
    3de4:	44 f4       	brge	.+16     	; 0x3df6 <main+0x51e>
		__ticks = 1;
    3de6:	fe 01       	movw	r30, r28
    3de8:	e7 5a       	subi	r30, 0xA7	; 167
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
    3df4:	64 c0       	rjmp	.+200    	; 0x3ebe <main+0x5e6>
	else if (__tmp > 65535)
    3df6:	fe 01       	movw	r30, r28
    3df8:	e5 5a       	subi	r30, 0xA5	; 165
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	60 81       	ld	r22, Z
    3dfe:	71 81       	ldd	r23, Z+1	; 0x01
    3e00:	82 81       	ldd	r24, Z+2	; 0x02
    3e02:	93 81       	ldd	r25, Z+3	; 0x03
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	3f ef       	ldi	r19, 0xFF	; 255
    3e08:	4f e7       	ldi	r20, 0x7F	; 127
    3e0a:	57 e4       	ldi	r21, 0x47	; 71
    3e0c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3e10:	18 16       	cp	r1, r24
    3e12:	0c f0       	brlt	.+2      	; 0x3e16 <main+0x53e>
    3e14:	43 c0       	rjmp	.+134    	; 0x3e9c <main+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e16:	fe 01       	movw	r30, r28
    3e18:	e1 5a       	subi	r30, 0xA1	; 161
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	60 81       	ld	r22, Z
    3e1e:	71 81       	ldd	r23, Z+1	; 0x01
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e2       	ldi	r20, 0x20	; 32
    3e2a:	51 e4       	ldi	r21, 0x41	; 65
    3e2c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	8e 01       	movw	r16, r28
    3e36:	07 5a       	subi	r16, 0xA7	; 167
    3e38:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3a:	bc 01       	movw	r22, r24
    3e3c:	cd 01       	movw	r24, r26
    3e3e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	f8 01       	movw	r30, r16
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	80 83       	st	Z, r24
    3e4c:	1f c0       	rjmp	.+62     	; 0x3e8c <main+0x5b4>
    3e4e:	fe 01       	movw	r30, r28
    3e50:	e9 5a       	subi	r30, 0xA9	; 169
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	88 ec       	ldi	r24, 0xC8	; 200
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	e9 5a       	subi	r30, 0xA9	; 169
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	80 81       	ld	r24, Z
    3e64:	91 81       	ldd	r25, Z+1	; 0x01
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <main+0x58e>
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	e9 5a       	subi	r30, 0xA9	; 169
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e74:	de 01       	movw	r26, r28
    3e76:	a7 5a       	subi	r26, 0xA7	; 167
    3e78:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e7 5a       	subi	r30, 0xA7	; 167
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	80 81       	ld	r24, Z
    3e82:	91 81       	ldd	r25, Z+1	; 0x01
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	11 96       	adiw	r26, 0x01	; 1
    3e88:	9c 93       	st	X, r25
    3e8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	e7 5a       	subi	r30, 0xA7	; 167
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	80 81       	ld	r24, Z
    3e94:	91 81       	ldd	r25, Z+1	; 0x01
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	d1 f6       	brne	.-76     	; 0x3e4e <main+0x576>
    3e9a:	27 c0       	rjmp	.+78     	; 0x3eea <main+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9c:	8e 01       	movw	r16, r28
    3e9e:	07 5a       	subi	r16, 0xA7	; 167
    3ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	e5 5a       	subi	r30, 0xA5	; 165
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	60 81       	ld	r22, Z
    3eaa:	71 81       	ldd	r23, Z+1	; 0x01
    3eac:	82 81       	ldd	r24, Z+2	; 0x02
    3eae:	93 81       	ldd	r25, Z+3	; 0x03
    3eb0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	f8 01       	movw	r30, r16
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
    3ebe:	de 01       	movw	r26, r28
    3ec0:	ab 5a       	subi	r26, 0xAB	; 171
    3ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e7 5a       	subi	r30, 0xA7	; 167
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 81       	ld	r24, Z
    3ecc:	91 81       	ldd	r25, Z+1	; 0x01
    3ece:	8d 93       	st	X+, r24
    3ed0:	9c 93       	st	X, r25
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	eb 5a       	subi	r30, 0xAB	; 171
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	80 81       	ld	r24, Z
    3eda:	91 81       	ldd	r25, Z+1	; 0x01
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	f1 f7       	brne	.-4      	; 0x3edc <main+0x604>
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	eb 5a       	subi	r30, 0xAB	; 171
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	80 83       	st	Z, r24
	{
				_delay_ms(100);
				if(DIO_GetPinValue(GROUPD,PIN_2)==0)
    3eea:	83 e0       	ldi	r24, 0x03	; 3
    3eec:	62 e0       	ldi	r22, 0x02	; 2
    3eee:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_GetPinValue>
    3ef2:	88 23       	and	r24, r24
    3ef4:	09 f0       	breq	.+2      	; 0x3ef8 <main+0x620>
    3ef6:	d5 c1       	rjmp	.+938    	; 0x42a2 <main+0x9ca>
				{
	/***************servo******************/
			    TCCR1A=0b10000010;
    3ef8:	ef e4       	ldi	r30, 0x4F	; 79
    3efa:	f0 e0       	ldi	r31, 0x00	; 0
    3efc:	82 e8       	ldi	r24, 0x82	; 130
    3efe:	80 83       	st	Z, r24
				TCCR1B=0b00011100;
    3f00:	ee e4       	ldi	r30, 0x4E	; 78
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	8c e1       	ldi	r24, 0x1C	; 28
    3f06:	80 83       	st	Z, r24
				ICR1=625;
    3f08:	e6 e4       	ldi	r30, 0x46	; 70
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	81 e7       	ldi	r24, 0x71	; 113
    3f0e:	92 e0       	ldi	r25, 0x02	; 2
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	80 83       	st	Z, r24
    3f14:	fe 01       	movw	r30, r28
    3f16:	ef 5a       	subi	r30, 0xAF	; 175
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	a0 e2       	ldi	r26, 0x20	; 32
    3f20:	b1 e4       	ldi	r27, 0x41	; 65
    3f22:	80 83       	st	Z, r24
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	a2 83       	std	Z+2, r26	; 0x02
    3f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2a:	8e 01       	movw	r16, r28
    3f2c:	03 5b       	subi	r16, 0xB3	; 179
    3f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f30:	fe 01       	movw	r30, r28
    3f32:	ef 5a       	subi	r30, 0xAF	; 175
    3f34:	ff 4f       	sbci	r31, 0xFF	; 255
    3f36:	60 81       	ld	r22, Z
    3f38:	71 81       	ldd	r23, Z+1	; 0x01
    3f3a:	82 81       	ldd	r24, Z+2	; 0x02
    3f3c:	93 81       	ldd	r25, Z+3	; 0x03
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	4a ef       	ldi	r20, 0xFA	; 250
    3f44:	54 e4       	ldi	r21, 0x44	; 68
    3f46:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	f8 01       	movw	r30, r16
    3f50:	80 83       	st	Z, r24
    3f52:	91 83       	std	Z+1, r25	; 0x01
    3f54:	a2 83       	std	Z+2, r26	; 0x02
    3f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e3 5b       	subi	r30, 0xB3	; 179
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	40 e8       	ldi	r20, 0x80	; 128
    3f6c:	5f e3       	ldi	r21, 0x3F	; 63
    3f6e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3f72:	88 23       	and	r24, r24
    3f74:	44 f4       	brge	.+16     	; 0x3f86 <main+0x6ae>
		__ticks = 1;
    3f76:	fe 01       	movw	r30, r28
    3f78:	e5 5b       	subi	r30, 0xB5	; 181
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
    3f84:	64 c0       	rjmp	.+200    	; 0x404e <main+0x776>
	else if (__tmp > 65535)
    3f86:	fe 01       	movw	r30, r28
    3f88:	e3 5b       	subi	r30, 0xB3	; 179
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	60 81       	ld	r22, Z
    3f8e:	71 81       	ldd	r23, Z+1	; 0x01
    3f90:	82 81       	ldd	r24, Z+2	; 0x02
    3f92:	93 81       	ldd	r25, Z+3	; 0x03
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	3f ef       	ldi	r19, 0xFF	; 255
    3f98:	4f e7       	ldi	r20, 0x7F	; 127
    3f9a:	57 e4       	ldi	r21, 0x47	; 71
    3f9c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3fa0:	18 16       	cp	r1, r24
    3fa2:	0c f0       	brlt	.+2      	; 0x3fa6 <main+0x6ce>
    3fa4:	43 c0       	rjmp	.+134    	; 0x402c <main+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	ef 5a       	subi	r30, 0xAF	; 175
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	60 81       	ld	r22, Z
    3fae:	71 81       	ldd	r23, Z+1	; 0x01
    3fb0:	82 81       	ldd	r24, Z+2	; 0x02
    3fb2:	93 81       	ldd	r25, Z+3	; 0x03
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e2       	ldi	r20, 0x20	; 32
    3fba:	51 e4       	ldi	r21, 0x41	; 65
    3fbc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	8e 01       	movw	r16, r28
    3fc6:	05 5b       	subi	r16, 0xB5	; 181
    3fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fca:	bc 01       	movw	r22, r24
    3fcc:	cd 01       	movw	r24, r26
    3fce:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	f8 01       	movw	r30, r16
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
    3fdc:	1f c0       	rjmp	.+62     	; 0x401c <main+0x744>
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e7 5b       	subi	r30, 0xB7	; 183
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	88 ec       	ldi	r24, 0xC8	; 200
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	91 83       	std	Z+1, r25	; 0x01
    3fea:	80 83       	st	Z, r24
    3fec:	fe 01       	movw	r30, r28
    3fee:	e7 5b       	subi	r30, 0xB7	; 183
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	80 81       	ld	r24, Z
    3ff4:	91 81       	ldd	r25, Z+1	; 0x01
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	f1 f7       	brne	.-4      	; 0x3ff6 <main+0x71e>
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e7 5b       	subi	r30, 0xB7	; 183
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	91 83       	std	Z+1, r25	; 0x01
    4002:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4004:	de 01       	movw	r26, r28
    4006:	a5 5b       	subi	r26, 0xB5	; 181
    4008:	bf 4f       	sbci	r27, 0xFF	; 255
    400a:	fe 01       	movw	r30, r28
    400c:	e5 5b       	subi	r30, 0xB5	; 181
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	80 81       	ld	r24, Z
    4012:	91 81       	ldd	r25, Z+1	; 0x01
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	11 96       	adiw	r26, 0x01	; 1
    4018:	9c 93       	st	X, r25
    401a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    401c:	fe 01       	movw	r30, r28
    401e:	e5 5b       	subi	r30, 0xB5	; 181
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 81       	ld	r24, Z
    4024:	91 81       	ldd	r25, Z+1	; 0x01
    4026:	00 97       	sbiw	r24, 0x00	; 0
    4028:	d1 f6       	brne	.-76     	; 0x3fde <main+0x706>
    402a:	27 c0       	rjmp	.+78     	; 0x407a <main+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    402c:	8e 01       	movw	r16, r28
    402e:	05 5b       	subi	r16, 0xB5	; 181
    4030:	1f 4f       	sbci	r17, 0xFF	; 255
    4032:	fe 01       	movw	r30, r28
    4034:	e3 5b       	subi	r30, 0xB3	; 179
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	60 81       	ld	r22, Z
    403a:	71 81       	ldd	r23, Z+1	; 0x01
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	93 81       	ldd	r25, Z+3	; 0x03
    4040:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	f8 01       	movw	r30, r16
    404a:	91 83       	std	Z+1, r25	; 0x01
    404c:	80 83       	st	Z, r24
    404e:	de 01       	movw	r26, r28
    4050:	a9 5b       	subi	r26, 0xB9	; 185
    4052:	bf 4f       	sbci	r27, 0xFF	; 255
    4054:	fe 01       	movw	r30, r28
    4056:	e5 5b       	subi	r30, 0xB5	; 181
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	80 81       	ld	r24, Z
    405c:	91 81       	ldd	r25, Z+1	; 0x01
    405e:	8d 93       	st	X+, r24
    4060:	9c 93       	st	X, r25
    4062:	fe 01       	movw	r30, r28
    4064:	e9 5b       	subi	r30, 0xB9	; 185
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 81       	ld	r24, Z
    406a:	91 81       	ldd	r25, Z+1	; 0x01
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	f1 f7       	brne	.-4      	; 0x406c <main+0x794>
    4070:	fe 01       	movw	r30, r28
    4072:	e9 5b       	subi	r30, 0xB9	; 185
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	91 83       	std	Z+1, r25	; 0x01
    4078:	80 83       	st	Z, r24
				_delay_ms(10);
				OCR1A=15;//0degree
    407a:	ea e4       	ldi	r30, 0x4A	; 74
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	8f e0       	ldi	r24, 0x0F	; 15
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	80 83       	st	Z, r24
    4086:	fe 01       	movw	r30, r28
    4088:	ed 5b       	subi	r30, 0xBD	; 189
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	aa e7       	ldi	r26, 0x7A	; 122
    4092:	b5 e4       	ldi	r27, 0x45	; 69
    4094:	80 83       	st	Z, r24
    4096:	91 83       	std	Z+1, r25	; 0x01
    4098:	a2 83       	std	Z+2, r26	; 0x02
    409a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    409c:	8e 01       	movw	r16, r28
    409e:	01 5c       	subi	r16, 0xC1	; 193
    40a0:	1f 4f       	sbci	r17, 0xFF	; 255
    40a2:	fe 01       	movw	r30, r28
    40a4:	ed 5b       	subi	r30, 0xBD	; 189
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	60 81       	ld	r22, Z
    40aa:	71 81       	ldd	r23, Z+1	; 0x01
    40ac:	82 81       	ldd	r24, Z+2	; 0x02
    40ae:	93 81       	ldd	r25, Z+3	; 0x03
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	4a ef       	ldi	r20, 0xFA	; 250
    40b6:	54 e4       	ldi	r21, 0x44	; 68
    40b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	f8 01       	movw	r30, r16
    40c2:	80 83       	st	Z, r24
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	a2 83       	std	Z+2, r26	; 0x02
    40c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40ca:	fe 01       	movw	r30, r28
    40cc:	ff 96       	adiw	r30, 0x3f	; 63
    40ce:	60 81       	ld	r22, Z
    40d0:	71 81       	ldd	r23, Z+1	; 0x01
    40d2:	82 81       	ldd	r24, Z+2	; 0x02
    40d4:	93 81       	ldd	r25, Z+3	; 0x03
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e8       	ldi	r20, 0x80	; 128
    40dc:	5f e3       	ldi	r21, 0x3F	; 63
    40de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    40e2:	88 23       	and	r24, r24
    40e4:	2c f4       	brge	.+10     	; 0x40f0 <main+0x818>
		__ticks = 1;
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	9e af       	std	Y+62, r25	; 0x3e
    40ec:	8d af       	std	Y+61, r24	; 0x3d
    40ee:	46 c0       	rjmp	.+140    	; 0x417c <main+0x8a4>
	else if (__tmp > 65535)
    40f0:	fe 01       	movw	r30, r28
    40f2:	ff 96       	adiw	r30, 0x3f	; 63
    40f4:	60 81       	ld	r22, Z
    40f6:	71 81       	ldd	r23, Z+1	; 0x01
    40f8:	82 81       	ldd	r24, Z+2	; 0x02
    40fa:	93 81       	ldd	r25, Z+3	; 0x03
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	3f ef       	ldi	r19, 0xFF	; 255
    4100:	4f e7       	ldi	r20, 0x7F	; 127
    4102:	57 e4       	ldi	r21, 0x47	; 71
    4104:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4108:	18 16       	cp	r1, r24
    410a:	64 f5       	brge	.+88     	; 0x4164 <main+0x88c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    410c:	fe 01       	movw	r30, r28
    410e:	ed 5b       	subi	r30, 0xBD	; 189
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	60 81       	ld	r22, Z
    4114:	71 81       	ldd	r23, Z+1	; 0x01
    4116:	82 81       	ldd	r24, Z+2	; 0x02
    4118:	93 81       	ldd	r25, Z+3	; 0x03
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e2       	ldi	r20, 0x20	; 32
    4120:	51 e4       	ldi	r21, 0x41	; 65
    4122:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	bc 01       	movw	r22, r24
    412c:	cd 01       	movw	r24, r26
    412e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	9e af       	std	Y+62, r25	; 0x3e
    4138:	8d af       	std	Y+61, r24	; 0x3d
    413a:	0f c0       	rjmp	.+30     	; 0x415a <main+0x882>
    413c:	88 ec       	ldi	r24, 0xC8	; 200
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	9c af       	std	Y+60, r25	; 0x3c
    4142:	8b af       	std	Y+59, r24	; 0x3b
    4144:	8b ad       	ldd	r24, Y+59	; 0x3b
    4146:	9c ad       	ldd	r25, Y+60	; 0x3c
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	f1 f7       	brne	.-4      	; 0x4148 <main+0x870>
    414c:	9c af       	std	Y+60, r25	; 0x3c
    414e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4150:	8d ad       	ldd	r24, Y+61	; 0x3d
    4152:	9e ad       	ldd	r25, Y+62	; 0x3e
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	9e af       	std	Y+62, r25	; 0x3e
    4158:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415a:	8d ad       	ldd	r24, Y+61	; 0x3d
    415c:	9e ad       	ldd	r25, Y+62	; 0x3e
    415e:	00 97       	sbiw	r24, 0x00	; 0
    4160:	69 f7       	brne	.-38     	; 0x413c <main+0x864>
    4162:	16 c0       	rjmp	.+44     	; 0x4190 <main+0x8b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4164:	fe 01       	movw	r30, r28
    4166:	ff 96       	adiw	r30, 0x3f	; 63
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	9e af       	std	Y+62, r25	; 0x3e
    417a:	8d af       	std	Y+61, r24	; 0x3d
    417c:	8d ad       	ldd	r24, Y+61	; 0x3d
    417e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4180:	9a af       	std	Y+58, r25	; 0x3a
    4182:	89 af       	std	Y+57, r24	; 0x39
    4184:	89 ad       	ldd	r24, Y+57	; 0x39
    4186:	9a ad       	ldd	r25, Y+58	; 0x3a
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	f1 f7       	brne	.-4      	; 0x4188 <main+0x8b0>
    418c:	9a af       	std	Y+58, r25	; 0x3a
    418e:	89 af       	std	Y+57, r24	; 0x39
			    _delay_ms(4000);
			   	OCR1A=75;//180degree
    4190:	ea e4       	ldi	r30, 0x4A	; 74
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	8b e4       	ldi	r24, 0x4B	; 75
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	91 83       	std	Z+1, r25	; 0x01
    419a:	80 83       	st	Z, r24
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	aa ef       	ldi	r26, 0xFA	; 250
    41a2:	b3 e4       	ldi	r27, 0x43	; 67
    41a4:	8d ab       	std	Y+53, r24	; 0x35
    41a6:	9e ab       	std	Y+54, r25	; 0x36
    41a8:	af ab       	std	Y+55, r26	; 0x37
    41aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ac:	6d a9       	ldd	r22, Y+53	; 0x35
    41ae:	7e a9       	ldd	r23, Y+54	; 0x36
    41b0:	8f a9       	ldd	r24, Y+55	; 0x37
    41b2:	98 ad       	ldd	r25, Y+56	; 0x38
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	4a ef       	ldi	r20, 0xFA	; 250
    41ba:	54 e4       	ldi	r21, 0x44	; 68
    41bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	89 ab       	std	Y+49, r24	; 0x31
    41c6:	9a ab       	std	Y+50, r25	; 0x32
    41c8:	ab ab       	std	Y+51, r26	; 0x33
    41ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    41cc:	69 a9       	ldd	r22, Y+49	; 0x31
    41ce:	7a a9       	ldd	r23, Y+50	; 0x32
    41d0:	8b a9       	ldd	r24, Y+51	; 0x33
    41d2:	9c a9       	ldd	r25, Y+52	; 0x34
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	40 e8       	ldi	r20, 0x80	; 128
    41da:	5f e3       	ldi	r21, 0x3F	; 63
    41dc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    41e0:	88 23       	and	r24, r24
    41e2:	2c f4       	brge	.+10     	; 0x41ee <main+0x916>
		__ticks = 1;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	98 ab       	std	Y+48, r25	; 0x30
    41ea:	8f a7       	std	Y+47, r24	; 0x2f
    41ec:	3f c0       	rjmp	.+126    	; 0x426c <main+0x994>
	else if (__tmp > 65535)
    41ee:	69 a9       	ldd	r22, Y+49	; 0x31
    41f0:	7a a9       	ldd	r23, Y+50	; 0x32
    41f2:	8b a9       	ldd	r24, Y+51	; 0x33
    41f4:	9c a9       	ldd	r25, Y+52	; 0x34
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	3f ef       	ldi	r19, 0xFF	; 255
    41fa:	4f e7       	ldi	r20, 0x7F	; 127
    41fc:	57 e4       	ldi	r21, 0x47	; 71
    41fe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4202:	18 16       	cp	r1, r24
    4204:	4c f5       	brge	.+82     	; 0x4258 <main+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4206:	6d a9       	ldd	r22, Y+53	; 0x35
    4208:	7e a9       	ldd	r23, Y+54	; 0x36
    420a:	8f a9       	ldd	r24, Y+55	; 0x37
    420c:	98 ad       	ldd	r25, Y+56	; 0x38
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	40 e2       	ldi	r20, 0x20	; 32
    4214:	51 e4       	ldi	r21, 0x41	; 65
    4216:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	bc 01       	movw	r22, r24
    4220:	cd 01       	movw	r24, r26
    4222:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	98 ab       	std	Y+48, r25	; 0x30
    422c:	8f a7       	std	Y+47, r24	; 0x2f
    422e:	0f c0       	rjmp	.+30     	; 0x424e <main+0x976>
    4230:	88 ec       	ldi	r24, 0xC8	; 200
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	9e a7       	std	Y+46, r25	; 0x2e
    4236:	8d a7       	std	Y+45, r24	; 0x2d
    4238:	8d a5       	ldd	r24, Y+45	; 0x2d
    423a:	9e a5       	ldd	r25, Y+46	; 0x2e
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	f1 f7       	brne	.-4      	; 0x423c <main+0x964>
    4240:	9e a7       	std	Y+46, r25	; 0x2e
    4242:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4244:	8f a5       	ldd	r24, Y+47	; 0x2f
    4246:	98 a9       	ldd	r25, Y+48	; 0x30
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	98 ab       	std	Y+48, r25	; 0x30
    424c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    424e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4250:	98 a9       	ldd	r25, Y+48	; 0x30
    4252:	00 97       	sbiw	r24, 0x00	; 0
    4254:	69 f7       	brne	.-38     	; 0x4230 <main+0x958>
    4256:	14 c0       	rjmp	.+40     	; 0x4280 <main+0x9a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4258:	69 a9       	ldd	r22, Y+49	; 0x31
    425a:	7a a9       	ldd	r23, Y+50	; 0x32
    425c:	8b a9       	ldd	r24, Y+51	; 0x33
    425e:	9c a9       	ldd	r25, Y+52	; 0x34
    4260:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	98 ab       	std	Y+48, r25	; 0x30
    426a:	8f a7       	std	Y+47, r24	; 0x2f
    426c:	8f a5       	ldd	r24, Y+47	; 0x2f
    426e:	98 a9       	ldd	r25, Y+48	; 0x30
    4270:	9c a7       	std	Y+44, r25	; 0x2c
    4272:	8b a7       	std	Y+43, r24	; 0x2b
    4274:	8b a5       	ldd	r24, Y+43	; 0x2b
    4276:	9c a5       	ldd	r25, Y+44	; 0x2c
    4278:	01 97       	sbiw	r24, 0x01	; 1
    427a:	f1 f7       	brne	.-4      	; 0x4278 <main+0x9a0>
    427c:	9c a7       	std	Y+44, r25	; 0x2c
    427e:	8b a7       	std	Y+43, r24	; 0x2b
			    _delay_ms(500);
			    OCR1A=15;//0degree
    4280:	ea e4       	ldi	r30, 0x4A	; 74
    4282:	f0 e0       	ldi	r31, 0x00	; 0
    4284:	8f e0       	ldi	r24, 0x0F	; 15
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
			    ICR1=0;
    428c:	e6 e4       	ldi	r30, 0x46	; 70
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	11 82       	std	Z+1, r1	; 0x01
    4292:	10 82       	st	Z, r1
			    TCCR1A=0;
    4294:	ef e4       	ldi	r30, 0x4F	; 79
    4296:	f0 e0       	ldi	r31, 0x00	; 0
    4298:	10 82       	st	Z, r1
			    TCCR1B=0;
    429a:	ee e4       	ldi	r30, 0x4E	; 78
    429c:	f0 e0       	ldi	r31, 0x00	; 0
    429e:	10 82       	st	Z, r1
    42a0:	02 c1       	rjmp	.+516    	; 0x44a6 <main+0xbce>
				}
				else
			    {

               TCCR1A=0b10000010;
    42a2:	ef e4       	ldi	r30, 0x4F	; 79
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	82 e8       	ldi	r24, 0x82	; 130
    42a8:	80 83       	st	Z, r24
				TCCR1B=0b00011100;
    42aa:	ee e4       	ldi	r30, 0x4E	; 78
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	8c e1       	ldi	r24, 0x1C	; 28
    42b0:	80 83       	st	Z, r24
				ICR1=625;
    42b2:	e6 e4       	ldi	r30, 0x46	; 70
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	81 e7       	ldi	r24, 0x71	; 113
    42b8:	92 e0       	ldi	r25, 0x02	; 2
    42ba:	91 83       	std	Z+1, r25	; 0x01
    42bc:	80 83       	st	Z, r24
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	a0 e2       	ldi	r26, 0x20	; 32
    42c4:	b1 e4       	ldi	r27, 0x41	; 65
    42c6:	8f a3       	std	Y+39, r24	; 0x27
    42c8:	98 a7       	std	Y+40, r25	; 0x28
    42ca:	a9 a7       	std	Y+41, r26	; 0x29
    42cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ce:	6f a1       	ldd	r22, Y+39	; 0x27
    42d0:	78 a5       	ldd	r23, Y+40	; 0x28
    42d2:	89 a5       	ldd	r24, Y+41	; 0x29
    42d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	4a ef       	ldi	r20, 0xFA	; 250
    42dc:	54 e4       	ldi	r21, 0x44	; 68
    42de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	8b a3       	std	Y+35, r24	; 0x23
    42e8:	9c a3       	std	Y+36, r25	; 0x24
    42ea:	ad a3       	std	Y+37, r26	; 0x25
    42ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42ee:	6b a1       	ldd	r22, Y+35	; 0x23
    42f0:	7c a1       	ldd	r23, Y+36	; 0x24
    42f2:	8d a1       	ldd	r24, Y+37	; 0x25
    42f4:	9e a1       	ldd	r25, Y+38	; 0x26
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	40 e8       	ldi	r20, 0x80	; 128
    42fc:	5f e3       	ldi	r21, 0x3F	; 63
    42fe:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4302:	88 23       	and	r24, r24
    4304:	2c f4       	brge	.+10     	; 0x4310 <main+0xa38>
		__ticks = 1;
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	9a a3       	std	Y+34, r25	; 0x22
    430c:	89 a3       	std	Y+33, r24	; 0x21
    430e:	3f c0       	rjmp	.+126    	; 0x438e <main+0xab6>
	else if (__tmp > 65535)
    4310:	6b a1       	ldd	r22, Y+35	; 0x23
    4312:	7c a1       	ldd	r23, Y+36	; 0x24
    4314:	8d a1       	ldd	r24, Y+37	; 0x25
    4316:	9e a1       	ldd	r25, Y+38	; 0x26
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	3f ef       	ldi	r19, 0xFF	; 255
    431c:	4f e7       	ldi	r20, 0x7F	; 127
    431e:	57 e4       	ldi	r21, 0x47	; 71
    4320:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4324:	18 16       	cp	r1, r24
    4326:	4c f5       	brge	.+82     	; 0x437a <main+0xaa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4328:	6f a1       	ldd	r22, Y+39	; 0x27
    432a:	78 a5       	ldd	r23, Y+40	; 0x28
    432c:	89 a5       	ldd	r24, Y+41	; 0x29
    432e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	40 e2       	ldi	r20, 0x20	; 32
    4336:	51 e4       	ldi	r21, 0x41	; 65
    4338:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	bc 01       	movw	r22, r24
    4342:	cd 01       	movw	r24, r26
    4344:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	9a a3       	std	Y+34, r25	; 0x22
    434e:	89 a3       	std	Y+33, r24	; 0x21
    4350:	0f c0       	rjmp	.+30     	; 0x4370 <main+0xa98>
    4352:	88 ec       	ldi	r24, 0xC8	; 200
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	98 a3       	std	Y+32, r25	; 0x20
    4358:	8f 8f       	std	Y+31, r24	; 0x1f
    435a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    435c:	98 a1       	ldd	r25, Y+32	; 0x20
    435e:	01 97       	sbiw	r24, 0x01	; 1
    4360:	f1 f7       	brne	.-4      	; 0x435e <main+0xa86>
    4362:	98 a3       	std	Y+32, r25	; 0x20
    4364:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4366:	89 a1       	ldd	r24, Y+33	; 0x21
    4368:	9a a1       	ldd	r25, Y+34	; 0x22
    436a:	01 97       	sbiw	r24, 0x01	; 1
    436c:	9a a3       	std	Y+34, r25	; 0x22
    436e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4370:	89 a1       	ldd	r24, Y+33	; 0x21
    4372:	9a a1       	ldd	r25, Y+34	; 0x22
    4374:	00 97       	sbiw	r24, 0x00	; 0
    4376:	69 f7       	brne	.-38     	; 0x4352 <main+0xa7a>
    4378:	14 c0       	rjmp	.+40     	; 0x43a2 <main+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    437a:	6b a1       	ldd	r22, Y+35	; 0x23
    437c:	7c a1       	ldd	r23, Y+36	; 0x24
    437e:	8d a1       	ldd	r24, Y+37	; 0x25
    4380:	9e a1       	ldd	r25, Y+38	; 0x26
    4382:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	9a a3       	std	Y+34, r25	; 0x22
    438c:	89 a3       	std	Y+33, r24	; 0x21
    438e:	89 a1       	ldd	r24, Y+33	; 0x21
    4390:	9a a1       	ldd	r25, Y+34	; 0x22
    4392:	9e 8f       	std	Y+30, r25	; 0x1e
    4394:	8d 8f       	std	Y+29, r24	; 0x1d
    4396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4398:	9e 8d       	ldd	r25, Y+30	; 0x1e
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	f1 f7       	brne	.-4      	; 0x439a <main+0xac2>
    439e:	9e 8f       	std	Y+30, r25	; 0x1e
    43a0:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);
				OCR1A=15;//0degree
    43a2:	ea e4       	ldi	r30, 0x4A	; 74
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	8f e0       	ldi	r24, 0x0F	; 15
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	91 83       	std	Z+1, r25	; 0x01
    43ac:	80 83       	st	Z, r24
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	a8 ec       	ldi	r26, 0xC8	; 200
    43b4:	b2 e4       	ldi	r27, 0x42	; 66
    43b6:	89 8f       	std	Y+25, r24	; 0x19
    43b8:	9a 8f       	std	Y+26, r25	; 0x1a
    43ba:	ab 8f       	std	Y+27, r26	; 0x1b
    43bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43be:	69 8d       	ldd	r22, Y+25	; 0x19
    43c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	4a ef       	ldi	r20, 0xFA	; 250
    43cc:	54 e4       	ldi	r21, 0x44	; 68
    43ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	8d 8b       	std	Y+21, r24	; 0x15
    43d8:	9e 8b       	std	Y+22, r25	; 0x16
    43da:	af 8b       	std	Y+23, r26	; 0x17
    43dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43de:	6d 89       	ldd	r22, Y+21	; 0x15
    43e0:	7e 89       	ldd	r23, Y+22	; 0x16
    43e2:	8f 89       	ldd	r24, Y+23	; 0x17
    43e4:	98 8d       	ldd	r25, Y+24	; 0x18
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	40 e8       	ldi	r20, 0x80	; 128
    43ec:	5f e3       	ldi	r21, 0x3F	; 63
    43ee:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    43f2:	88 23       	and	r24, r24
    43f4:	2c f4       	brge	.+10     	; 0x4400 <main+0xb28>
		__ticks = 1;
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	9c 8b       	std	Y+20, r25	; 0x14
    43fc:	8b 8b       	std	Y+19, r24	; 0x13
    43fe:	3f c0       	rjmp	.+126    	; 0x447e <main+0xba6>
	else if (__tmp > 65535)
    4400:	6d 89       	ldd	r22, Y+21	; 0x15
    4402:	7e 89       	ldd	r23, Y+22	; 0x16
    4404:	8f 89       	ldd	r24, Y+23	; 0x17
    4406:	98 8d       	ldd	r25, Y+24	; 0x18
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	3f ef       	ldi	r19, 0xFF	; 255
    440c:	4f e7       	ldi	r20, 0x7F	; 127
    440e:	57 e4       	ldi	r21, 0x47	; 71
    4410:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4414:	18 16       	cp	r1, r24
    4416:	4c f5       	brge	.+82     	; 0x446a <main+0xb92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4418:	69 8d       	ldd	r22, Y+25	; 0x19
    441a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    441c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    441e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e2       	ldi	r20, 0x20	; 32
    4426:	51 e4       	ldi	r21, 0x41	; 65
    4428:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	bc 01       	movw	r22, r24
    4432:	cd 01       	movw	r24, r26
    4434:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4438:	dc 01       	movw	r26, r24
    443a:	cb 01       	movw	r24, r22
    443c:	9c 8b       	std	Y+20, r25	; 0x14
    443e:	8b 8b       	std	Y+19, r24	; 0x13
    4440:	0f c0       	rjmp	.+30     	; 0x4460 <main+0xb88>
    4442:	88 ec       	ldi	r24, 0xC8	; 200
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	9a 8b       	std	Y+18, r25	; 0x12
    4448:	89 8b       	std	Y+17, r24	; 0x11
    444a:	89 89       	ldd	r24, Y+17	; 0x11
    444c:	9a 89       	ldd	r25, Y+18	; 0x12
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	f1 f7       	brne	.-4      	; 0x444e <main+0xb76>
    4452:	9a 8b       	std	Y+18, r25	; 0x12
    4454:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4456:	8b 89       	ldd	r24, Y+19	; 0x13
    4458:	9c 89       	ldd	r25, Y+20	; 0x14
    445a:	01 97       	sbiw	r24, 0x01	; 1
    445c:	9c 8b       	std	Y+20, r25	; 0x14
    445e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4460:	8b 89       	ldd	r24, Y+19	; 0x13
    4462:	9c 89       	ldd	r25, Y+20	; 0x14
    4464:	00 97       	sbiw	r24, 0x00	; 0
    4466:	69 f7       	brne	.-38     	; 0x4442 <main+0xb6a>
    4468:	14 c0       	rjmp	.+40     	; 0x4492 <main+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    446a:	6d 89       	ldd	r22, Y+21	; 0x15
    446c:	7e 89       	ldd	r23, Y+22	; 0x16
    446e:	8f 89       	ldd	r24, Y+23	; 0x17
    4470:	98 8d       	ldd	r25, Y+24	; 0x18
    4472:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	9c 8b       	std	Y+20, r25	; 0x14
    447c:	8b 8b       	std	Y+19, r24	; 0x13
    447e:	8b 89       	ldd	r24, Y+19	; 0x13
    4480:	9c 89       	ldd	r25, Y+20	; 0x14
    4482:	98 8b       	std	Y+16, r25	; 0x10
    4484:	8f 87       	std	Y+15, r24	; 0x0f
    4486:	8f 85       	ldd	r24, Y+15	; 0x0f
    4488:	98 89       	ldd	r25, Y+16	; 0x10
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	f1 f7       	brne	.-4      	; 0x448a <main+0xbb2>
    448e:	98 8b       	std	Y+16, r25	; 0x10
    4490:	8f 87       	std	Y+15, r24	; 0x0f
              _delay_ms(100);

			    ICR1=0;
    4492:	e6 e4       	ldi	r30, 0x46	; 70
    4494:	f0 e0       	ldi	r31, 0x00	; 0
    4496:	11 82       	std	Z+1, r1	; 0x01
    4498:	10 82       	st	Z, r1
			    TCCR1A=0;
    449a:	ef e4       	ldi	r30, 0x4F	; 79
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	10 82       	st	Z, r1
			    TCCR1B=0;
    44a0:	ee e4       	ldi	r30, 0x4E	; 78
    44a2:	f0 e0       	ldi	r31, 0x00	; 0
    44a4:	10 82       	st	Z, r1
	          }
	}
	if (distance >5 && distance < 10)
    44a6:	fe 01       	movw	r30, r28
    44a8:	e5 58       	subi	r30, 0x85	; 133
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	60 81       	ld	r22, Z
    44ae:	71 81       	ldd	r23, Z+1	; 0x01
    44b0:	82 81       	ldd	r24, Z+2	; 0x02
    44b2:	93 81       	ldd	r25, Z+3	; 0x03
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	40 ea       	ldi	r20, 0xA0	; 160
    44ba:	50 e4       	ldi	r21, 0x40	; 64
    44bc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    44c0:	18 16       	cp	r1, r24
    44c2:	f4 f4       	brge	.+60     	; 0x4500 <main+0xc28>
    44c4:	fe 01       	movw	r30, r28
    44c6:	e5 58       	subi	r30, 0x85	; 133
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	60 81       	ld	r22, Z
    44cc:	71 81       	ldd	r23, Z+1	; 0x01
    44ce:	82 81       	ldd	r24, Z+2	; 0x02
    44d0:	93 81       	ldd	r25, Z+3	; 0x03
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e2       	ldi	r20, 0x20	; 32
    44d8:	51 e4       	ldi	r21, 0x41	; 65
    44da:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    44de:	88 23       	and	r24, r24
    44e0:	7c f4       	brge	.+30     	; 0x4500 <main+0xc28>
				{
					DIO_SetPinValue(GROUPA,PIN_6,HIGH); //green on
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	66 e0       	ldi	r22, 0x06	; 6
    44e6:	41 e0       	ldi	r20, 0x01	; 1
    44e8:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
					DIO_SetPinValue(GROUPA,PIN_7,LOW); //red off
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	67 e0       	ldi	r22, 0x07	; 7
    44f0:	40 e0       	ldi	r20, 0x00	; 0
    44f2:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
					DIO_SetPinValue(GROUPC,PIN_7,LOW);//bazzer off
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	67 e0       	ldi	r22, 0x07	; 7
    44fa:	40 e0       	ldi	r20, 0x00	; 0
    44fc:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>

				}
	if (distance <1)
    4500:	fe 01       	movw	r30, r28
    4502:	e5 58       	subi	r30, 0x85	; 133
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	60 81       	ld	r22, Z
    4508:	71 81       	ldd	r23, Z+1	; 0x01
    450a:	82 81       	ldd	r24, Z+2	; 0x02
    450c:	93 81       	ldd	r25, Z+3	; 0x03
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	40 e8       	ldi	r20, 0x80	; 128
    4514:	5f e3       	ldi	r21, 0x3F	; 63
    4516:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    451a:	88 23       	and	r24, r24
    451c:	0c f0       	brlt	.+2      	; 0x4520 <main+0xc48>
    451e:	7c c0       	rjmp	.+248    	; 0x4618 <main+0xd40>
	{
		DIO_SetPinValue(GROUPC,PIN_7,HIGH);//bazzer on
    4520:	82 e0       	ldi	r24, 0x02	; 2
    4522:	67 e0       	ldi	r22, 0x07	; 7
    4524:	41 e0       	ldi	r20, 0x01	; 1
    4526:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	aa ef       	ldi	r26, 0xFA	; 250
    4530:	b4 e4       	ldi	r27, 0x44	; 68
    4532:	8b 87       	std	Y+11, r24	; 0x0b
    4534:	9c 87       	std	Y+12, r25	; 0x0c
    4536:	ad 87       	std	Y+13, r26	; 0x0d
    4538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    453a:	6b 85       	ldd	r22, Y+11	; 0x0b
    453c:	7c 85       	ldd	r23, Y+12	; 0x0c
    453e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4540:	9e 85       	ldd	r25, Y+14	; 0x0e
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	4a ef       	ldi	r20, 0xFA	; 250
    4548:	54 e4       	ldi	r21, 0x44	; 68
    454a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	8f 83       	std	Y+7, r24	; 0x07
    4554:	98 87       	std	Y+8, r25	; 0x08
    4556:	a9 87       	std	Y+9, r26	; 0x09
    4558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    455a:	6f 81       	ldd	r22, Y+7	; 0x07
    455c:	78 85       	ldd	r23, Y+8	; 0x08
    455e:	89 85       	ldd	r24, Y+9	; 0x09
    4560:	9a 85       	ldd	r25, Y+10	; 0x0a
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	40 e8       	ldi	r20, 0x80	; 128
    4568:	5f e3       	ldi	r21, 0x3F	; 63
    456a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    456e:	88 23       	and	r24, r24
    4570:	2c f4       	brge	.+10     	; 0x457c <main+0xca4>
		__ticks = 1;
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	9e 83       	std	Y+6, r25	; 0x06
    4578:	8d 83       	std	Y+5, r24	; 0x05
    457a:	3f c0       	rjmp	.+126    	; 0x45fa <main+0xd22>
	else if (__tmp > 65535)
    457c:	6f 81       	ldd	r22, Y+7	; 0x07
    457e:	78 85       	ldd	r23, Y+8	; 0x08
    4580:	89 85       	ldd	r24, Y+9	; 0x09
    4582:	9a 85       	ldd	r25, Y+10	; 0x0a
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	3f ef       	ldi	r19, 0xFF	; 255
    4588:	4f e7       	ldi	r20, 0x7F	; 127
    458a:	57 e4       	ldi	r21, 0x47	; 71
    458c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4590:	18 16       	cp	r1, r24
    4592:	4c f5       	brge	.+82     	; 0x45e6 <main+0xd0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4594:	6b 85       	ldd	r22, Y+11	; 0x0b
    4596:	7c 85       	ldd	r23, Y+12	; 0x0c
    4598:	8d 85       	ldd	r24, Y+13	; 0x0d
    459a:	9e 85       	ldd	r25, Y+14	; 0x0e
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	40 e2       	ldi	r20, 0x20	; 32
    45a2:	51 e4       	ldi	r21, 0x41	; 65
    45a4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	bc 01       	movw	r22, r24
    45ae:	cd 01       	movw	r24, r26
    45b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    45b4:	dc 01       	movw	r26, r24
    45b6:	cb 01       	movw	r24, r22
    45b8:	9e 83       	std	Y+6, r25	; 0x06
    45ba:	8d 83       	std	Y+5, r24	; 0x05
    45bc:	0f c0       	rjmp	.+30     	; 0x45dc <main+0xd04>
    45be:	88 ec       	ldi	r24, 0xC8	; 200
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	9c 83       	std	Y+4, r25	; 0x04
    45c4:	8b 83       	std	Y+3, r24	; 0x03
    45c6:	8b 81       	ldd	r24, Y+3	; 0x03
    45c8:	9c 81       	ldd	r25, Y+4	; 0x04
    45ca:	01 97       	sbiw	r24, 0x01	; 1
    45cc:	f1 f7       	brne	.-4      	; 0x45ca <main+0xcf2>
    45ce:	9c 83       	std	Y+4, r25	; 0x04
    45d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45d2:	8d 81       	ldd	r24, Y+5	; 0x05
    45d4:	9e 81       	ldd	r25, Y+6	; 0x06
    45d6:	01 97       	sbiw	r24, 0x01	; 1
    45d8:	9e 83       	std	Y+6, r25	; 0x06
    45da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45dc:	8d 81       	ldd	r24, Y+5	; 0x05
    45de:	9e 81       	ldd	r25, Y+6	; 0x06
    45e0:	00 97       	sbiw	r24, 0x00	; 0
    45e2:	69 f7       	brne	.-38     	; 0x45be <main+0xce6>
    45e4:	14 c0       	rjmp	.+40     	; 0x460e <main+0xd36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e6:	6f 81       	ldd	r22, Y+7	; 0x07
    45e8:	78 85       	ldd	r23, Y+8	; 0x08
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	9e 83       	std	Y+6, r25	; 0x06
    45f8:	8d 83       	std	Y+5, r24	; 0x05
    45fa:	8d 81       	ldd	r24, Y+5	; 0x05
    45fc:	9e 81       	ldd	r25, Y+6	; 0x06
    45fe:	9a 83       	std	Y+2, r25	; 0x02
    4600:	89 83       	std	Y+1, r24	; 0x01
    4602:	89 81       	ldd	r24, Y+1	; 0x01
    4604:	9a 81       	ldd	r25, Y+2	; 0x02
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	f1 f7       	brne	.-4      	; 0x4606 <main+0xd2e>
    460a:	9a 83       	std	Y+2, r25	; 0x02
    460c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		DIO_SetPinValue(GROUPC,PIN_7,LOW);//bazzer off
    460e:	82 e0       	ldi	r24, 0x02	; 2
    4610:	67 e0       	ldi	r22, 0x07	; 7
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
	}
	if(distance > 15)
    4618:	fe 01       	movw	r30, r28
    461a:	e5 58       	subi	r30, 0x85	; 133
    461c:	ff 4f       	sbci	r31, 0xFF	; 255
    461e:	60 81       	ld	r22, Z
    4620:	71 81       	ldd	r23, Z+1	; 0x01
    4622:	82 81       	ldd	r24, Z+2	; 0x02
    4624:	93 81       	ldd	r25, Z+3	; 0x03
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e7       	ldi	r20, 0x70	; 112
    462c:	51 e4       	ldi	r21, 0x41	; 65
    462e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4632:	18 16       	cp	r1, r24
    4634:	0c f0       	brlt	.+2      	; 0x4638 <main+0xd60>
    4636:	de c9       	rjmp	.-3140   	; 0x39f4 <main+0x11c>
	{
		DIO_SetPinValue(GROUPC,PIN_7,LOW);//bazzer off
    4638:	82 e0       	ldi	r24, 0x02	; 2
    463a:	67 e0       	ldi	r22, 0x07	; 7
    463c:	40 e0       	ldi	r20, 0x00	; 0
    463e:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
		DIO_SetPinValue(GROUPA,PIN_7,LOW); //red off
    4642:	80 e0       	ldi	r24, 0x00	; 0
    4644:	67 e0       	ldi	r22, 0x07	; 7
    4646:	40 e0       	ldi	r20, 0x00	; 0
    4648:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
		DIO_SetPinValue(GROUPA,PIN_6,LOW); //green off
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	66 e0       	ldi	r22, 0x06	; 6
    4650:	40 e0       	ldi	r20, 0x00	; 0
    4652:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_SetPinValue>
    4656:	ce c9       	rjmp	.-3172   	; 0x39f4 <main+0x11c>

00004658 <__mulsi3>:
    4658:	62 9f       	mul	r22, r18
    465a:	d0 01       	movw	r26, r0
    465c:	73 9f       	mul	r23, r19
    465e:	f0 01       	movw	r30, r0
    4660:	82 9f       	mul	r24, r18
    4662:	e0 0d       	add	r30, r0
    4664:	f1 1d       	adc	r31, r1
    4666:	64 9f       	mul	r22, r20
    4668:	e0 0d       	add	r30, r0
    466a:	f1 1d       	adc	r31, r1
    466c:	92 9f       	mul	r25, r18
    466e:	f0 0d       	add	r31, r0
    4670:	83 9f       	mul	r24, r19
    4672:	f0 0d       	add	r31, r0
    4674:	74 9f       	mul	r23, r20
    4676:	f0 0d       	add	r31, r0
    4678:	65 9f       	mul	r22, r21
    467a:	f0 0d       	add	r31, r0
    467c:	99 27       	eor	r25, r25
    467e:	72 9f       	mul	r23, r18
    4680:	b0 0d       	add	r27, r0
    4682:	e1 1d       	adc	r30, r1
    4684:	f9 1f       	adc	r31, r25
    4686:	63 9f       	mul	r22, r19
    4688:	b0 0d       	add	r27, r0
    468a:	e1 1d       	adc	r30, r1
    468c:	f9 1f       	adc	r31, r25
    468e:	bd 01       	movw	r22, r26
    4690:	cf 01       	movw	r24, r30
    4692:	11 24       	eor	r1, r1
    4694:	08 95       	ret

00004696 <__prologue_saves__>:
    4696:	2f 92       	push	r2
    4698:	3f 92       	push	r3
    469a:	4f 92       	push	r4
    469c:	5f 92       	push	r5
    469e:	6f 92       	push	r6
    46a0:	7f 92       	push	r7
    46a2:	8f 92       	push	r8
    46a4:	9f 92       	push	r9
    46a6:	af 92       	push	r10
    46a8:	bf 92       	push	r11
    46aa:	cf 92       	push	r12
    46ac:	df 92       	push	r13
    46ae:	ef 92       	push	r14
    46b0:	ff 92       	push	r15
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
    46be:	ca 1b       	sub	r28, r26
    46c0:	db 0b       	sbc	r29, r27
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	cd bf       	out	0x3d, r28	; 61
    46cc:	09 94       	ijmp

000046ce <__epilogue_restores__>:
    46ce:	2a 88       	ldd	r2, Y+18	; 0x12
    46d0:	39 88       	ldd	r3, Y+17	; 0x11
    46d2:	48 88       	ldd	r4, Y+16	; 0x10
    46d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    46d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    46d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    46da:	8c 84       	ldd	r8, Y+12	; 0x0c
    46dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    46de:	aa 84       	ldd	r10, Y+10	; 0x0a
    46e0:	b9 84       	ldd	r11, Y+9	; 0x09
    46e2:	c8 84       	ldd	r12, Y+8	; 0x08
    46e4:	df 80       	ldd	r13, Y+7	; 0x07
    46e6:	ee 80       	ldd	r14, Y+6	; 0x06
    46e8:	fd 80       	ldd	r15, Y+5	; 0x05
    46ea:	0c 81       	ldd	r16, Y+4	; 0x04
    46ec:	1b 81       	ldd	r17, Y+3	; 0x03
    46ee:	aa 81       	ldd	r26, Y+2	; 0x02
    46f0:	b9 81       	ldd	r27, Y+1	; 0x01
    46f2:	ce 0f       	add	r28, r30
    46f4:	d1 1d       	adc	r29, r1
    46f6:	0f b6       	in	r0, 0x3f	; 63
    46f8:	f8 94       	cli
    46fa:	de bf       	out	0x3e, r29	; 62
    46fc:	0f be       	out	0x3f, r0	; 63
    46fe:	cd bf       	out	0x3d, r28	; 61
    4700:	ed 01       	movw	r28, r26
    4702:	08 95       	ret

00004704 <dtostrf>:
    4704:	ef 92       	push	r14
    4706:	ff 92       	push	r15
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	f2 2f       	mov	r31, r18
    470e:	f0 2e       	mov	r15, r16
    4710:	47 fd       	sbrc	r20, 7
    4712:	02 c0       	rjmp	.+4      	; 0x4718 <dtostrf+0x14>
    4714:	e4 e0       	ldi	r30, 0x04	; 4
    4716:	01 c0       	rjmp	.+2      	; 0x471a <dtostrf+0x16>
    4718:	e4 e1       	ldi	r30, 0x14	; 20
    471a:	24 2f       	mov	r18, r20
    471c:	33 27       	eor	r19, r19
    471e:	27 fd       	sbrc	r18, 7
    4720:	30 95       	com	r19
    4722:	37 ff       	sbrs	r19, 7
    4724:	03 c0       	rjmp	.+6      	; 0x472c <dtostrf+0x28>
    4726:	30 95       	com	r19
    4728:	21 95       	neg	r18
    472a:	3f 4f       	sbci	r19, 0xFF	; 255
    472c:	4f 2d       	mov	r20, r15
    472e:	51 2f       	mov	r21, r17
    4730:	0f 2f       	mov	r16, r31
    4732:	ee 2e       	mov	r14, r30
    4734:	0e 94 a3 23 	call	0x4746	; 0x4746 <dtoa_prf>
    4738:	8f 2d       	mov	r24, r15
    473a:	91 2f       	mov	r25, r17
    473c:	1f 91       	pop	r17
    473e:	0f 91       	pop	r16
    4740:	ff 90       	pop	r15
    4742:	ef 90       	pop	r14
    4744:	08 95       	ret

00004746 <dtoa_prf>:
    4746:	a9 e0       	ldi	r26, 0x09	; 9
    4748:	b0 e0       	ldi	r27, 0x00	; 0
    474a:	e9 ea       	ldi	r30, 0xA9	; 169
    474c:	f3 e2       	ldi	r31, 0x23	; 35
    474e:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__prologue_saves__+0x8>
    4752:	6a 01       	movw	r12, r20
    4754:	12 2f       	mov	r17, r18
    4756:	a0 2e       	mov	r10, r16
    4758:	be 2c       	mov	r11, r14
    475a:	2b e3       	ldi	r18, 0x3B	; 59
    475c:	20 17       	cp	r18, r16
    475e:	18 f4       	brcc	.+6      	; 0x4766 <dtoa_prf+0x20>
    4760:	2c e3       	ldi	r18, 0x3C	; 60
    4762:	92 2e       	mov	r9, r18
    4764:	02 c0       	rjmp	.+4      	; 0x476a <dtoa_prf+0x24>
    4766:	90 2e       	mov	r9, r16
    4768:	93 94       	inc	r9
    476a:	ae 01       	movw	r20, r28
    476c:	4f 5f       	subi	r20, 0xFF	; 255
    476e:	5f 4f       	sbci	r21, 0xFF	; 255
    4770:	27 e0       	ldi	r18, 0x07	; 7
    4772:	09 2d       	mov	r16, r9
    4774:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__ftoa_engine>
    4778:	bc 01       	movw	r22, r24
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	e8 2e       	mov	r14, r24
    477e:	ff 24       	eor	r15, r15
    4780:	c7 01       	movw	r24, r14
    4782:	89 70       	andi	r24, 0x09	; 9
    4784:	90 70       	andi	r25, 0x00	; 0
    4786:	01 97       	sbiw	r24, 0x01	; 1
    4788:	11 f4       	brne	.+4      	; 0x478e <dtoa_prf+0x48>
    478a:	ad e2       	ldi	r26, 0x2D	; 45
    478c:	09 c0       	rjmp	.+18     	; 0x47a0 <dtoa_prf+0x5a>
    478e:	b1 fe       	sbrs	r11, 1
    4790:	02 c0       	rjmp	.+4      	; 0x4796 <dtoa_prf+0x50>
    4792:	ab e2       	ldi	r26, 0x2B	; 43
    4794:	05 c0       	rjmp	.+10     	; 0x47a0 <dtoa_prf+0x5a>
    4796:	b0 fc       	sbrc	r11, 0
    4798:	02 c0       	rjmp	.+4      	; 0x479e <dtoa_prf+0x58>
    479a:	a0 e0       	ldi	r26, 0x00	; 0
    479c:	01 c0       	rjmp	.+2      	; 0x47a0 <dtoa_prf+0x5a>
    479e:	a0 e2       	ldi	r26, 0x20	; 32
    47a0:	e3 fe       	sbrs	r14, 3
    47a2:	3b c0       	rjmp	.+118    	; 0x481a <dtoa_prf+0xd4>
    47a4:	aa 23       	and	r26, r26
    47a6:	11 f4       	brne	.+4      	; 0x47ac <dtoa_prf+0x66>
    47a8:	23 e0       	ldi	r18, 0x03	; 3
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <dtoa_prf+0x68>
    47ac:	24 e0       	ldi	r18, 0x04	; 4
    47ae:	21 17       	cp	r18, r17
    47b0:	10 f0       	brcs	.+4      	; 0x47b6 <dtoa_prf+0x70>
    47b2:	20 e0       	ldi	r18, 0x00	; 0
    47b4:	02 c0       	rjmp	.+4      	; 0x47ba <dtoa_prf+0x74>
    47b6:	12 1b       	sub	r17, r18
    47b8:	21 2f       	mov	r18, r17
    47ba:	eb 2c       	mov	r14, r11
    47bc:	b4 fe       	sbrs	r11, 4
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <dtoa_prf+0x7e>
    47c0:	32 2f       	mov	r19, r18
    47c2:	0a c0       	rjmp	.+20     	; 0x47d8 <dtoa_prf+0x92>
    47c4:	f6 01       	movw	r30, r12
    47c6:	32 2f       	mov	r19, r18
    47c8:	80 e2       	ldi	r24, 0x20	; 32
    47ca:	02 c0       	rjmp	.+4      	; 0x47d0 <dtoa_prf+0x8a>
    47cc:	81 93       	st	Z+, r24
    47ce:	31 50       	subi	r19, 0x01	; 1
    47d0:	33 23       	and	r19, r19
    47d2:	e1 f7       	brne	.-8      	; 0x47cc <dtoa_prf+0x86>
    47d4:	c2 0e       	add	r12, r18
    47d6:	d1 1c       	adc	r13, r1
    47d8:	aa 23       	and	r26, r26
    47da:	19 f0       	breq	.+6      	; 0x47e2 <dtoa_prf+0x9c>
    47dc:	f6 01       	movw	r30, r12
    47de:	a1 93       	st	Z+, r26
    47e0:	6f 01       	movw	r12, r30
    47e2:	f6 01       	movw	r30, r12
    47e4:	31 96       	adiw	r30, 0x01	; 1
    47e6:	e2 fe       	sbrs	r14, 2
    47e8:	05 c0       	rjmp	.+10     	; 0x47f4 <dtoa_prf+0xae>
    47ea:	9e e4       	ldi	r25, 0x4E	; 78
    47ec:	d6 01       	movw	r26, r12
    47ee:	9c 93       	st	X, r25
    47f0:	81 e4       	ldi	r24, 0x41	; 65
    47f2:	04 c0       	rjmp	.+8      	; 0x47fc <dtoa_prf+0xb6>
    47f4:	9e e6       	ldi	r25, 0x6E	; 110
    47f6:	d6 01       	movw	r26, r12
    47f8:	9c 93       	st	X, r25
    47fa:	81 e6       	ldi	r24, 0x61	; 97
    47fc:	11 96       	adiw	r26, 0x01	; 1
    47fe:	8c 93       	st	X, r24
    4800:	91 83       	std	Z+1, r25	; 0x01
    4802:	32 96       	adiw	r30, 0x02	; 2
    4804:	df 01       	movw	r26, r30
    4806:	83 2f       	mov	r24, r19
    4808:	90 e2       	ldi	r25, 0x20	; 32
    480a:	02 c0       	rjmp	.+4      	; 0x4810 <dtoa_prf+0xca>
    480c:	9d 93       	st	X+, r25
    480e:	81 50       	subi	r24, 0x01	; 1
    4810:	88 23       	and	r24, r24
    4812:	e1 f7       	brne	.-8      	; 0x480c <dtoa_prf+0xc6>
    4814:	e3 0f       	add	r30, r19
    4816:	f1 1d       	adc	r31, r1
    4818:	40 c0       	rjmp	.+128    	; 0x489a <dtoa_prf+0x154>
    481a:	e2 fe       	sbrs	r14, 2
    481c:	42 c0       	rjmp	.+132    	; 0x48a2 <dtoa_prf+0x15c>
    481e:	aa 23       	and	r26, r26
    4820:	11 f4       	brne	.+4      	; 0x4826 <dtoa_prf+0xe0>
    4822:	23 e0       	ldi	r18, 0x03	; 3
    4824:	01 c0       	rjmp	.+2      	; 0x4828 <dtoa_prf+0xe2>
    4826:	24 e0       	ldi	r18, 0x04	; 4
    4828:	21 17       	cp	r18, r17
    482a:	10 f0       	brcs	.+4      	; 0x4830 <dtoa_prf+0xea>
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	02 c0       	rjmp	.+4      	; 0x4834 <dtoa_prf+0xee>
    4830:	12 1b       	sub	r17, r18
    4832:	21 2f       	mov	r18, r17
    4834:	eb 2c       	mov	r14, r11
    4836:	b4 fe       	sbrs	r11, 4
    4838:	02 c0       	rjmp	.+4      	; 0x483e <dtoa_prf+0xf8>
    483a:	92 2f       	mov	r25, r18
    483c:	0a c0       	rjmp	.+20     	; 0x4852 <dtoa_prf+0x10c>
    483e:	f6 01       	movw	r30, r12
    4840:	92 2f       	mov	r25, r18
    4842:	80 e2       	ldi	r24, 0x20	; 32
    4844:	02 c0       	rjmp	.+4      	; 0x484a <dtoa_prf+0x104>
    4846:	81 93       	st	Z+, r24
    4848:	91 50       	subi	r25, 0x01	; 1
    484a:	99 23       	and	r25, r25
    484c:	e1 f7       	brne	.-8      	; 0x4846 <dtoa_prf+0x100>
    484e:	c2 0e       	add	r12, r18
    4850:	d1 1c       	adc	r13, r1
    4852:	aa 23       	and	r26, r26
    4854:	19 f0       	breq	.+6      	; 0x485c <dtoa_prf+0x116>
    4856:	f6 01       	movw	r30, r12
    4858:	a1 93       	st	Z+, r26
    485a:	6f 01       	movw	r12, r30
    485c:	f6 01       	movw	r30, r12
    485e:	31 96       	adiw	r30, 0x01	; 1
    4860:	e2 fe       	sbrs	r14, 2
    4862:	08 c0       	rjmp	.+16     	; 0x4874 <dtoa_prf+0x12e>
    4864:	89 e4       	ldi	r24, 0x49	; 73
    4866:	d6 01       	movw	r26, r12
    4868:	8c 93       	st	X, r24
    486a:	8e e4       	ldi	r24, 0x4E	; 78
    486c:	11 96       	adiw	r26, 0x01	; 1
    486e:	8c 93       	st	X, r24
    4870:	86 e4       	ldi	r24, 0x46	; 70
    4872:	07 c0       	rjmp	.+14     	; 0x4882 <dtoa_prf+0x13c>
    4874:	89 e6       	ldi	r24, 0x69	; 105
    4876:	d6 01       	movw	r26, r12
    4878:	8c 93       	st	X, r24
    487a:	8e e6       	ldi	r24, 0x6E	; 110
    487c:	11 96       	adiw	r26, 0x01	; 1
    487e:	8c 93       	st	X, r24
    4880:	86 e6       	ldi	r24, 0x66	; 102
    4882:	81 83       	std	Z+1, r24	; 0x01
    4884:	32 96       	adiw	r30, 0x02	; 2
    4886:	df 01       	movw	r26, r30
    4888:	89 2f       	mov	r24, r25
    488a:	20 e2       	ldi	r18, 0x20	; 32
    488c:	02 c0       	rjmp	.+4      	; 0x4892 <dtoa_prf+0x14c>
    488e:	2d 93       	st	X+, r18
    4890:	81 50       	subi	r24, 0x01	; 1
    4892:	88 23       	and	r24, r24
    4894:	e1 f7       	brne	.-8      	; 0x488e <dtoa_prf+0x148>
    4896:	e9 0f       	add	r30, r25
    4898:	f1 1d       	adc	r31, r1
    489a:	10 82       	st	Z, r1
    489c:	2e ef       	ldi	r18, 0xFE	; 254
    489e:	3f ef       	ldi	r19, 0xFF	; 255
    48a0:	af c0       	rjmp	.+350    	; 0x4a00 <dtoa_prf+0x2ba>
    48a2:	16 16       	cp	r1, r22
    48a4:	17 06       	cpc	r1, r23
    48a6:	1c f0       	brlt	.+6      	; 0x48ae <dtoa_prf+0x168>
    48a8:	41 e0       	ldi	r20, 0x01	; 1
    48aa:	50 e0       	ldi	r21, 0x00	; 0
    48ac:	03 c0       	rjmp	.+6      	; 0x48b4 <dtoa_prf+0x16e>
    48ae:	ab 01       	movw	r20, r22
    48b0:	4f 5f       	subi	r20, 0xFF	; 255
    48b2:	5f 4f       	sbci	r21, 0xFF	; 255
    48b4:	aa 20       	and	r10, r10
    48b6:	19 f4       	brne	.+6      	; 0x48be <dtoa_prf+0x178>
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	03 c0       	rjmp	.+6      	; 0x48c4 <dtoa_prf+0x17e>
    48be:	8a 2d       	mov	r24, r10
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	01 96       	adiw	r24, 0x01	; 1
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	aa 23       	and	r26, r26
    48ca:	11 f0       	breq	.+4      	; 0x48d0 <dtoa_prf+0x18a>
    48cc:	21 e0       	ldi	r18, 0x01	; 1
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	24 0f       	add	r18, r20
    48d2:	35 1f       	adc	r19, r21
    48d4:	28 0f       	add	r18, r24
    48d6:	39 1f       	adc	r19, r25
    48d8:	81 2f       	mov	r24, r17
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	28 17       	cp	r18, r24
    48de:	39 07       	cpc	r19, r25
    48e0:	14 f0       	brlt	.+4      	; 0x48e6 <dtoa_prf+0x1a0>
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	02 c0       	rjmp	.+4      	; 0x48ea <dtoa_prf+0x1a4>
    48e6:	12 1b       	sub	r17, r18
    48e8:	21 2f       	mov	r18, r17
    48ea:	4b 2d       	mov	r20, r11
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	ca 01       	movw	r24, r20
    48f0:	80 71       	andi	r24, 0x10	; 16
    48f2:	90 70       	andi	r25, 0x00	; 0
    48f4:	b4 fc       	sbrc	r11, 4
    48f6:	0d c0       	rjmp	.+26     	; 0x4912 <dtoa_prf+0x1cc>
    48f8:	b3 fc       	sbrc	r11, 3
    48fa:	0b c0       	rjmp	.+22     	; 0x4912 <dtoa_prf+0x1cc>
    48fc:	f6 01       	movw	r30, r12
    48fe:	32 2f       	mov	r19, r18
    4900:	40 e2       	ldi	r20, 0x20	; 32
    4902:	02 c0       	rjmp	.+4      	; 0x4908 <dtoa_prf+0x1c2>
    4904:	41 93       	st	Z+, r20
    4906:	31 50       	subi	r19, 0x01	; 1
    4908:	33 23       	and	r19, r19
    490a:	e1 f7       	brne	.-8      	; 0x4904 <dtoa_prf+0x1be>
    490c:	c2 0e       	add	r12, r18
    490e:	d1 1c       	adc	r13, r1
    4910:	01 c0       	rjmp	.+2      	; 0x4914 <dtoa_prf+0x1ce>
    4912:	32 2f       	mov	r19, r18
    4914:	aa 23       	and	r26, r26
    4916:	19 f0       	breq	.+6      	; 0x491e <dtoa_prf+0x1d8>
    4918:	f6 01       	movw	r30, r12
    491a:	a1 93       	st	Z+, r26
    491c:	6f 01       	movw	r12, r30
    491e:	89 2b       	or	r24, r25
    4920:	11 f0       	breq	.+4      	; 0x4926 <dtoa_prf+0x1e0>
    4922:	13 2f       	mov	r17, r19
    4924:	0a c0       	rjmp	.+20     	; 0x493a <dtoa_prf+0x1f4>
    4926:	f6 01       	movw	r30, r12
    4928:	13 2f       	mov	r17, r19
    492a:	80 e3       	ldi	r24, 0x30	; 48
    492c:	02 c0       	rjmp	.+4      	; 0x4932 <dtoa_prf+0x1ec>
    492e:	81 93       	st	Z+, r24
    4930:	11 50       	subi	r17, 0x01	; 1
    4932:	11 23       	and	r17, r17
    4934:	e1 f7       	brne	.-8      	; 0x492e <dtoa_prf+0x1e8>
    4936:	c3 0e       	add	r12, r19
    4938:	d1 1c       	adc	r13, r1
    493a:	09 2d       	mov	r16, r9
    493c:	06 0f       	add	r16, r22
    493e:	ba 80       	ldd	r11, Y+2	; 0x02
    4940:	90 e1       	ldi	r25, 0x10	; 16
    4942:	89 2e       	mov	r8, r25
    4944:	91 2c       	mov	r9, r1
    4946:	8e 20       	and	r8, r14
    4948:	9f 20       	and	r9, r15
    494a:	e4 fe       	sbrs	r14, 4
    494c:	04 c0       	rjmp	.+8      	; 0x4956 <dtoa_prf+0x210>
    494e:	f1 e3       	ldi	r31, 0x31	; 49
    4950:	bf 16       	cp	r11, r31
    4952:	09 f4       	brne	.+2      	; 0x4956 <dtoa_prf+0x210>
    4954:	01 50       	subi	r16, 0x01	; 1
    4956:	10 16       	cp	r1, r16
    4958:	14 f0       	brlt	.+4      	; 0x495e <dtoa_prf+0x218>
    495a:	01 e0       	ldi	r16, 0x01	; 1
    495c:	03 c0       	rjmp	.+6      	; 0x4964 <dtoa_prf+0x21e>
    495e:	09 30       	cpi	r16, 0x09	; 9
    4960:	08 f0       	brcs	.+2      	; 0x4964 <dtoa_prf+0x21e>
    4962:	08 e0       	ldi	r16, 0x08	; 8
    4964:	9b 01       	movw	r18, r22
    4966:	77 ff       	sbrs	r23, 7
    4968:	02 c0       	rjmp	.+4      	; 0x496e <dtoa_prf+0x228>
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	cb 01       	movw	r24, r22
    4970:	01 96       	adiw	r24, 0x01	; 1
    4972:	82 1b       	sub	r24, r18
    4974:	93 0b       	sbc	r25, r19
    4976:	fe 01       	movw	r30, r28
    4978:	31 96       	adiw	r30, 0x01	; 1
    497a:	e8 0f       	add	r30, r24
    497c:	f9 1f       	adc	r31, r25
    497e:	8e e2       	ldi	r24, 0x2E	; 46
    4980:	f8 2e       	mov	r15, r24
    4982:	3b 01       	movw	r6, r22
    4984:	60 1a       	sub	r6, r16
    4986:	71 08       	sbc	r7, r1
    4988:	8a 2d       	mov	r24, r10
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	44 27       	eor	r20, r20
    498e:	55 27       	eor	r21, r21
    4990:	48 1b       	sub	r20, r24
    4992:	59 0b       	sbc	r21, r25
    4994:	8f ef       	ldi	r24, 0xFF	; 255
    4996:	2f 3f       	cpi	r18, 0xFF	; 255
    4998:	38 07       	cpc	r19, r24
    499a:	19 f4       	brne	.+6      	; 0x49a2 <dtoa_prf+0x25c>
    499c:	d6 01       	movw	r26, r12
    499e:	fd 92       	st	X+, r15
    49a0:	6d 01       	movw	r12, r26
    49a2:	62 17       	cp	r22, r18
    49a4:	73 07       	cpc	r23, r19
    49a6:	2c f0       	brlt	.+10     	; 0x49b2 <dtoa_prf+0x26c>
    49a8:	62 16       	cp	r6, r18
    49aa:	73 06       	cpc	r7, r19
    49ac:	14 f4       	brge	.+4      	; 0x49b2 <dtoa_prf+0x26c>
    49ae:	80 81       	ld	r24, Z
    49b0:	01 c0       	rjmp	.+2      	; 0x49b4 <dtoa_prf+0x26e>
    49b2:	80 e3       	ldi	r24, 0x30	; 48
    49b4:	21 50       	subi	r18, 0x01	; 1
    49b6:	30 40       	sbci	r19, 0x00	; 0
    49b8:	31 96       	adiw	r30, 0x01	; 1
    49ba:	24 17       	cp	r18, r20
    49bc:	35 07       	cpc	r19, r21
    49be:	24 f0       	brlt	.+8      	; 0x49c8 <dtoa_prf+0x282>
    49c0:	d6 01       	movw	r26, r12
    49c2:	8d 93       	st	X+, r24
    49c4:	6d 01       	movw	r12, r26
    49c6:	e6 cf       	rjmp	.-52     	; 0x4994 <dtoa_prf+0x24e>
    49c8:	26 17       	cp	r18, r22
    49ca:	37 07       	cpc	r19, r23
    49cc:	49 f4       	brne	.+18     	; 0x49e0 <dtoa_prf+0x29a>
    49ce:	b5 e3       	ldi	r27, 0x35	; 53
    49d0:	bb 15       	cp	r27, r11
    49d2:	28 f0       	brcs	.+10     	; 0x49de <dtoa_prf+0x298>
    49d4:	bb 16       	cp	r11, r27
    49d6:	21 f4       	brne	.+8      	; 0x49e0 <dtoa_prf+0x29a>
    49d8:	81 14       	cp	r8, r1
    49da:	91 04       	cpc	r9, r1
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <dtoa_prf+0x29a>
    49de:	81 e3       	ldi	r24, 0x31	; 49
    49e0:	f6 01       	movw	r30, r12
    49e2:	81 93       	st	Z+, r24
    49e4:	d6 01       	movw	r26, r12
    49e6:	81 2f       	mov	r24, r17
    49e8:	90 e2       	ldi	r25, 0x20	; 32
    49ea:	02 c0       	rjmp	.+4      	; 0x49f0 <dtoa_prf+0x2aa>
    49ec:	9c 93       	st	X, r25
    49ee:	81 50       	subi	r24, 0x01	; 1
    49f0:	11 96       	adiw	r26, 0x01	; 1
    49f2:	88 23       	and	r24, r24
    49f4:	d9 f7       	brne	.-10     	; 0x49ec <dtoa_prf+0x2a6>
    49f6:	e1 0f       	add	r30, r17
    49f8:	f1 1d       	adc	r31, r1
    49fa:	10 82       	st	Z, r1
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	c9 01       	movw	r24, r18
    4a02:	29 96       	adiw	r28, 0x09	; 9
    4a04:	ee e0       	ldi	r30, 0x0E	; 14
    4a06:	0c 94 6b 23 	jmp	0x46d6	; 0x46d6 <__epilogue_restores__+0x8>

00004a0a <__ftoa_engine>:
    4a0a:	28 30       	cpi	r18, 0x08	; 8
    4a0c:	08 f0       	brcs	.+2      	; 0x4a10 <__ftoa_engine+0x6>
    4a0e:	27 e0       	ldi	r18, 0x07	; 7
    4a10:	33 27       	eor	r19, r19
    4a12:	da 01       	movw	r26, r20
    4a14:	99 0f       	add	r25, r25
    4a16:	31 1d       	adc	r19, r1
    4a18:	87 fd       	sbrc	r24, 7
    4a1a:	91 60       	ori	r25, 0x01	; 1
    4a1c:	00 96       	adiw	r24, 0x00	; 0
    4a1e:	61 05       	cpc	r22, r1
    4a20:	71 05       	cpc	r23, r1
    4a22:	39 f4       	brne	.+14     	; 0x4a32 <__ftoa_engine+0x28>
    4a24:	32 60       	ori	r19, 0x02	; 2
    4a26:	2e 5f       	subi	r18, 0xFE	; 254
    4a28:	3d 93       	st	X+, r19
    4a2a:	30 e3       	ldi	r19, 0x30	; 48
    4a2c:	2a 95       	dec	r18
    4a2e:	e1 f7       	brne	.-8      	; 0x4a28 <__ftoa_engine+0x1e>
    4a30:	08 95       	ret
    4a32:	9f 3f       	cpi	r25, 0xFF	; 255
    4a34:	30 f0       	brcs	.+12     	; 0x4a42 <__ftoa_engine+0x38>
    4a36:	80 38       	cpi	r24, 0x80	; 128
    4a38:	71 05       	cpc	r23, r1
    4a3a:	61 05       	cpc	r22, r1
    4a3c:	09 f0       	breq	.+2      	; 0x4a40 <__ftoa_engine+0x36>
    4a3e:	3c 5f       	subi	r19, 0xFC	; 252
    4a40:	3c 5f       	subi	r19, 0xFC	; 252
    4a42:	3d 93       	st	X+, r19
    4a44:	91 30       	cpi	r25, 0x01	; 1
    4a46:	08 f0       	brcs	.+2      	; 0x4a4a <__ftoa_engine+0x40>
    4a48:	80 68       	ori	r24, 0x80	; 128
    4a4a:	91 1d       	adc	r25, r1
    4a4c:	df 93       	push	r29
    4a4e:	cf 93       	push	r28
    4a50:	1f 93       	push	r17
    4a52:	0f 93       	push	r16
    4a54:	ff 92       	push	r15
    4a56:	ef 92       	push	r14
    4a58:	19 2f       	mov	r17, r25
    4a5a:	98 7f       	andi	r25, 0xF8	; 248
    4a5c:	96 95       	lsr	r25
    4a5e:	e9 2f       	mov	r30, r25
    4a60:	96 95       	lsr	r25
    4a62:	96 95       	lsr	r25
    4a64:	e9 0f       	add	r30, r25
    4a66:	ff 27       	eor	r31, r31
    4a68:	e2 55       	subi	r30, 0x52	; 82
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	99 27       	eor	r25, r25
    4a6e:	33 27       	eor	r19, r19
    4a70:	ee 24       	eor	r14, r14
    4a72:	ff 24       	eor	r15, r15
    4a74:	a7 01       	movw	r20, r14
    4a76:	e7 01       	movw	r28, r14
    4a78:	05 90       	lpm	r0, Z+
    4a7a:	08 94       	sec
    4a7c:	07 94       	ror	r0
    4a7e:	28 f4       	brcc	.+10     	; 0x4a8a <__ftoa_engine+0x80>
    4a80:	36 0f       	add	r19, r22
    4a82:	e7 1e       	adc	r14, r23
    4a84:	f8 1e       	adc	r15, r24
    4a86:	49 1f       	adc	r20, r25
    4a88:	51 1d       	adc	r21, r1
    4a8a:	66 0f       	add	r22, r22
    4a8c:	77 1f       	adc	r23, r23
    4a8e:	88 1f       	adc	r24, r24
    4a90:	99 1f       	adc	r25, r25
    4a92:	06 94       	lsr	r0
    4a94:	a1 f7       	brne	.-24     	; 0x4a7e <__ftoa_engine+0x74>
    4a96:	05 90       	lpm	r0, Z+
    4a98:	07 94       	ror	r0
    4a9a:	28 f4       	brcc	.+10     	; 0x4aa6 <__ftoa_engine+0x9c>
    4a9c:	e7 0e       	add	r14, r23
    4a9e:	f8 1e       	adc	r15, r24
    4aa0:	49 1f       	adc	r20, r25
    4aa2:	56 1f       	adc	r21, r22
    4aa4:	c1 1d       	adc	r28, r1
    4aa6:	77 0f       	add	r23, r23
    4aa8:	88 1f       	adc	r24, r24
    4aaa:	99 1f       	adc	r25, r25
    4aac:	66 1f       	adc	r22, r22
    4aae:	06 94       	lsr	r0
    4ab0:	a1 f7       	brne	.-24     	; 0x4a9a <__ftoa_engine+0x90>
    4ab2:	05 90       	lpm	r0, Z+
    4ab4:	07 94       	ror	r0
    4ab6:	28 f4       	brcc	.+10     	; 0x4ac2 <__ftoa_engine+0xb8>
    4ab8:	f8 0e       	add	r15, r24
    4aba:	49 1f       	adc	r20, r25
    4abc:	56 1f       	adc	r21, r22
    4abe:	c7 1f       	adc	r28, r23
    4ac0:	d1 1d       	adc	r29, r1
    4ac2:	88 0f       	add	r24, r24
    4ac4:	99 1f       	adc	r25, r25
    4ac6:	66 1f       	adc	r22, r22
    4ac8:	77 1f       	adc	r23, r23
    4aca:	06 94       	lsr	r0
    4acc:	a1 f7       	brne	.-24     	; 0x4ab6 <__ftoa_engine+0xac>
    4ace:	05 90       	lpm	r0, Z+
    4ad0:	07 94       	ror	r0
    4ad2:	20 f4       	brcc	.+8      	; 0x4adc <__ftoa_engine+0xd2>
    4ad4:	49 0f       	add	r20, r25
    4ad6:	56 1f       	adc	r21, r22
    4ad8:	c7 1f       	adc	r28, r23
    4ada:	d8 1f       	adc	r29, r24
    4adc:	99 0f       	add	r25, r25
    4ade:	66 1f       	adc	r22, r22
    4ae0:	77 1f       	adc	r23, r23
    4ae2:	88 1f       	adc	r24, r24
    4ae4:	06 94       	lsr	r0
    4ae6:	a9 f7       	brne	.-22     	; 0x4ad2 <__ftoa_engine+0xc8>
    4ae8:	84 91       	lpm	r24, Z+
    4aea:	10 95       	com	r17
    4aec:	17 70       	andi	r17, 0x07	; 7
    4aee:	41 f0       	breq	.+16     	; 0x4b00 <__ftoa_engine+0xf6>
    4af0:	d6 95       	lsr	r29
    4af2:	c7 95       	ror	r28
    4af4:	57 95       	ror	r21
    4af6:	47 95       	ror	r20
    4af8:	f7 94       	ror	r15
    4afa:	e7 94       	ror	r14
    4afc:	1a 95       	dec	r17
    4afe:	c1 f7       	brne	.-16     	; 0x4af0 <__ftoa_engine+0xe6>
    4b00:	e4 e5       	ldi	r30, 0x54	; 84
    4b02:	f0 e0       	ldi	r31, 0x00	; 0
    4b04:	68 94       	set
    4b06:	15 90       	lpm	r1, Z+
    4b08:	15 91       	lpm	r17, Z+
    4b0a:	35 91       	lpm	r19, Z+
    4b0c:	65 91       	lpm	r22, Z+
    4b0e:	95 91       	lpm	r25, Z+
    4b10:	05 90       	lpm	r0, Z+
    4b12:	7f e2       	ldi	r23, 0x2F	; 47
    4b14:	73 95       	inc	r23
    4b16:	e1 18       	sub	r14, r1
    4b18:	f1 0a       	sbc	r15, r17
    4b1a:	43 0b       	sbc	r20, r19
    4b1c:	56 0b       	sbc	r21, r22
    4b1e:	c9 0b       	sbc	r28, r25
    4b20:	d0 09       	sbc	r29, r0
    4b22:	c0 f7       	brcc	.-16     	; 0x4b14 <__ftoa_engine+0x10a>
    4b24:	e1 0c       	add	r14, r1
    4b26:	f1 1e       	adc	r15, r17
    4b28:	43 1f       	adc	r20, r19
    4b2a:	56 1f       	adc	r21, r22
    4b2c:	c9 1f       	adc	r28, r25
    4b2e:	d0 1d       	adc	r29, r0
    4b30:	7e f4       	brtc	.+30     	; 0x4b50 <__ftoa_engine+0x146>
    4b32:	70 33       	cpi	r23, 0x30	; 48
    4b34:	11 f4       	brne	.+4      	; 0x4b3a <__ftoa_engine+0x130>
    4b36:	8a 95       	dec	r24
    4b38:	e6 cf       	rjmp	.-52     	; 0x4b06 <__ftoa_engine+0xfc>
    4b3a:	e8 94       	clt
    4b3c:	01 50       	subi	r16, 0x01	; 1
    4b3e:	30 f0       	brcs	.+12     	; 0x4b4c <__ftoa_engine+0x142>
    4b40:	08 0f       	add	r16, r24
    4b42:	0a f4       	brpl	.+2      	; 0x4b46 <__ftoa_engine+0x13c>
    4b44:	00 27       	eor	r16, r16
    4b46:	02 17       	cp	r16, r18
    4b48:	08 f4       	brcc	.+2      	; 0x4b4c <__ftoa_engine+0x142>
    4b4a:	20 2f       	mov	r18, r16
    4b4c:	23 95       	inc	r18
    4b4e:	02 2f       	mov	r16, r18
    4b50:	7a 33       	cpi	r23, 0x3A	; 58
    4b52:	28 f0       	brcs	.+10     	; 0x4b5e <__ftoa_engine+0x154>
    4b54:	79 e3       	ldi	r23, 0x39	; 57
    4b56:	7d 93       	st	X+, r23
    4b58:	2a 95       	dec	r18
    4b5a:	e9 f7       	brne	.-6      	; 0x4b56 <__ftoa_engine+0x14c>
    4b5c:	10 c0       	rjmp	.+32     	; 0x4b7e <__ftoa_engine+0x174>
    4b5e:	7d 93       	st	X+, r23
    4b60:	2a 95       	dec	r18
    4b62:	89 f6       	brne	.-94     	; 0x4b06 <__ftoa_engine+0xfc>
    4b64:	06 94       	lsr	r0
    4b66:	97 95       	ror	r25
    4b68:	67 95       	ror	r22
    4b6a:	37 95       	ror	r19
    4b6c:	17 95       	ror	r17
    4b6e:	17 94       	ror	r1
    4b70:	e1 18       	sub	r14, r1
    4b72:	f1 0a       	sbc	r15, r17
    4b74:	43 0b       	sbc	r20, r19
    4b76:	56 0b       	sbc	r21, r22
    4b78:	c9 0b       	sbc	r28, r25
    4b7a:	d0 09       	sbc	r29, r0
    4b7c:	98 f0       	brcs	.+38     	; 0x4ba4 <__ftoa_engine+0x19a>
    4b7e:	23 95       	inc	r18
    4b80:	7e 91       	ld	r23, -X
    4b82:	73 95       	inc	r23
    4b84:	7a 33       	cpi	r23, 0x3A	; 58
    4b86:	08 f0       	brcs	.+2      	; 0x4b8a <__ftoa_engine+0x180>
    4b88:	70 e3       	ldi	r23, 0x30	; 48
    4b8a:	7c 93       	st	X, r23
    4b8c:	20 13       	cpse	r18, r16
    4b8e:	b8 f7       	brcc	.-18     	; 0x4b7e <__ftoa_engine+0x174>
    4b90:	7e 91       	ld	r23, -X
    4b92:	70 61       	ori	r23, 0x10	; 16
    4b94:	7d 93       	st	X+, r23
    4b96:	30 f0       	brcs	.+12     	; 0x4ba4 <__ftoa_engine+0x19a>
    4b98:	83 95       	inc	r24
    4b9a:	71 e3       	ldi	r23, 0x31	; 49
    4b9c:	7d 93       	st	X+, r23
    4b9e:	70 e3       	ldi	r23, 0x30	; 48
    4ba0:	2a 95       	dec	r18
    4ba2:	e1 f7       	brne	.-8      	; 0x4b9c <__ftoa_engine+0x192>
    4ba4:	11 24       	eor	r1, r1
    4ba6:	ef 90       	pop	r14
    4ba8:	ff 90       	pop	r15
    4baa:	0f 91       	pop	r16
    4bac:	1f 91       	pop	r17
    4bae:	cf 91       	pop	r28
    4bb0:	df 91       	pop	r29
    4bb2:	99 27       	eor	r25, r25
    4bb4:	87 fd       	sbrc	r24, 7
    4bb6:	90 95       	com	r25
    4bb8:	08 95       	ret

00004bba <_exit>:
    4bba:	f8 94       	cli

00004bbc <__stop_program>:
    4bbc:	ff cf       	rjmp	.-2      	; 0x4bbc <__stop_program>
